//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/channel/RealtimeChannelDemuxer.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "com/goodow/realtime/DocumentBridge.h"
#import "com/goodow/realtime/channel/Channel.h"
#import "com/goodow/realtime/channel/ChannelError.h"
#import "com/goodow/realtime/channel/RealtimeChannelDemuxer.h"
#import "com/goodow/realtime/channel/Socket.h"
#import "com/goodow/realtime/channel/operation/ReceiveOpChannelImpl.h"
#import "com/goodow/realtime/channel/rpc/Constants.h"
#import "com/goodow/realtime/channel/rpc/Rpc.h"
#import "com/goodow/realtime/channel/rpc/RpcImpl.h"
#import "com/goodow/realtime/channel/util/ChannelFactory.h"
#import "com/goodow/realtime/channel/util/ChannelNative.h"
#import "elemental/json/Json.h"
#import "elemental/json/JsonObject.h"
#import "elemental/util/ArrayOfString.h"
#import "elemental/util/Collections.h"
#import "elemental/util/MapFromStringTo.h"
#import "java/util/logging/Level.h"
#import "java/util/logging/Logger.h"

@implementation ComGoodowRealtimeChannelRealtimeChannelDemuxer

static JavaUtilLoggingLogger * ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_;
static ComGoodowRealtimeChannelRealtimeChannelDemuxer * ComGoodowRealtimeChannelRealtimeChannelDemuxer_INSTANCE_;
static id<ElementalUtilMapFromStringTo> ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_;
static id<ComGoodowRealtimeChannelRpcRpc> ComGoodowRealtimeChannelRealtimeChannelDemuxer_rpc_;

@synthesize currentToken = currentToken_;
@synthesize socket = socket_;

+ (JavaUtilLoggingLogger *)log {
  return ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_;
}

+ (ComGoodowRealtimeChannelRealtimeChannelDemuxer *)INSTANCE {
  return ComGoodowRealtimeChannelRealtimeChannelDemuxer_INSTANCE_;
}

+ (id<ElementalUtilMapFromStringTo>)entries {
  return ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_;
}

+ (id<ComGoodowRealtimeChannelRpcRpc>)rpc {
  return ComGoodowRealtimeChannelRealtimeChannelDemuxer_rpc_;
}

+ (ComGoodowRealtimeChannelRealtimeChannelDemuxer *)get {
  return ComGoodowRealtimeChannelRealtimeChannelDemuxer_INSTANCE_;
}

- (id)init {
  if ((self = [super init])) {
    currentToken_ = nil;
  }
  return self;
}

- (void)clear {
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) keys]) length]; i < len; i++) {
    [self closeWithNSString:[((id<ElementalUtilArrayOfString>) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) keys]) getWithInt:i]];
  }
}

- (void)close {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:@"onClose "];
}

- (void)closeWithNSString:(NSString *)id_ {
  [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) removeWithNSString:id_];
}

- (void)connectWithNSString:(NSString *)token {
  NSAssert(token != nil, @"Null token");
  if (![NIL_CHK(token) isEqual:currentToken_]) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"Connecting with token %@", token]];
    currentToken_ = token;
    if (socket_ != nil) {
      [socket_ close];
    }
    id<ComGoodowRealtimeChannelChannel> channel = [((id<ComGoodowRealtimeChannelUtilChannelFactory>) [ComGoodowRealtimeChannelUtilChannelNative get]) createChannelWithNSString:token];
    socket_ = [((id<ComGoodowRealtimeChannelChannel>) NIL_CHK(channel)) openWithComGoodowRealtimeChannelSocketListener:self];
  }
  else {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"Already using same token, ignoring %@", token]];
  }
}

- (id<ElementalUtilArrayOfString>)getIds {
  return [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) keys];
}

- (int)getRevisionWithNSString:(NSString *)id_ {
  return [((ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *) NIL_CHK(((ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry *) [ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_ getWithNSString:id_]).channel)) revision];
}

- (id<ComGoodowRealtimeChannelRpcRpc>)getRpc {
  return ComGoodowRealtimeChannelRealtimeChannelDemuxer_rpc_;
}

- (GDRDocumentBridge *)getSnapshotWithNSString:(NSString *)id_ {
  if (![((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) hasKeyWithNSString:id_]) {
    return nil;
  }
  return ((ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) getWithNSString:id_]).snapshot;
}

- (void)onClose {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:@"onClose "];
}

- (void)onErrorWithComGoodowRealtimeChannelChannelError:(id<ComGoodowRealtimeChannelChannelError>)error {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:[NSString stringWithFormat:@"onError code=%@ description=%@", [((id<ComGoodowRealtimeChannelChannelError>) NIL_CHK(error)) getCode], [((id<ComGoodowRealtimeChannelChannelError>) NIL_CHK(error)) getDescription]]];
}

- (void)onMessageWithNSString:(NSString *)message {
  if (message == nil) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"Null data on channel"];
    return;
  }
  id<EMJsonObject> msg = [EMJson parseWithNSString:message];
  [self publishMessageWithEMJsonObject:msg];
}

- (void)onOpen {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:@"onOpened "];
}

- (void)publishMessageWithEMJsonObject:(id<EMJsonObject>)msg {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"publishMessage data=%@", [((id<EMJsonObject>) NIL_CHK(msg)) toJson]]];
  NSAssert([((id<EMJsonObject>) NIL_CHK(msg)) hasKeyWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params ID]] && [((id<EMJsonObject>) NIL_CHK(msg)) hasKeyWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params DELTAS]], [[NSString stringWithFormat:@"Bad data on channel (Missing fields) %@" J2OBJC_COMMA() msg] description]);
  NSString *id_ = [((id<EMJsonObject>) NIL_CHK(msg)) getStringWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params ID]];
  ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *channel = ((ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) getWithNSString:id_]).channel;
  if (channel == nil) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:[NSString stringWithFormat:@"No channel registered for object with id %@", id_]];
    return;
  }
  [((ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *) NIL_CHK(channel)) onMessageWithEMJsonObject:msg];
}

- (void)register__WithNSString:(NSString *)id_
         withGDRDocumentBridge:(GDRDocumentBridge *)snapshot
withComGoodowRealtimeChannelOperationReceiveOpChannelImpl:(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *)channel {
  NSAssert(![((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) hasKeyWithNSString:id_], [[NSString stringWithFormat:@"Channel handler already registered for %@" J2OBJC_COMMA() id_] description]);
  [((id<ElementalUtilMapFromStringTo>) NIL_CHK(ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_)) putWithNSString:id_ withId:[[ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry alloc] initWithGDRDocumentBridge:snapshot withComGoodowRealtimeChannelOperationReceiveOpChannelImpl:channel]];
}

+ (void)initialize {
  if (self == [ComGoodowRealtimeChannelRealtimeChannelDemuxer class]) {
    ComGoodowRealtimeChannelRealtimeChannelDemuxer_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComGoodowRealtimeChannelRealtimeChannelDemuxer class]] getName]];
    ComGoodowRealtimeChannelRealtimeChannelDemuxer_INSTANCE_ = [[ComGoodowRealtimeChannelRealtimeChannelDemuxer alloc] init];
    ComGoodowRealtimeChannelRealtimeChannelDemuxer_entries_ = ((id<ElementalUtilMapFromStringTo>) [ElementalUtilCollections mapFromStringTo]);
    ComGoodowRealtimeChannelRealtimeChannelDemuxer_rpc_ = [[ComGoodowRealtimeChannelRpcRpcImpl alloc] initWithNSString:@"" withComGoodowRealtimeChannelRpcRpc_ConnectionStateListener:nil];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelRealtimeChannelDemuxer *typedCopy = (ComGoodowRealtimeChannelRealtimeChannelDemuxer *) copy;
  typedCopy.currentToken = currentToken_;
  typedCopy.socket = socket_;
}

@end
@implementation ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry

@synthesize snapshot = snapshot_;
@synthesize channel = channel_;

- (id)initWithGDRDocumentBridge:(GDRDocumentBridge *)snapshot
withComGoodowRealtimeChannelOperationReceiveOpChannelImpl:(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *)channel {
  if ((self = [super init])) {
    self.snapshot = snapshot;
    self.channel = channel;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry *typedCopy = (ComGoodowRealtimeChannelRealtimeChannelDemuxer_Entry *) copy;
  typedCopy.snapshot = snapshot_;
  typedCopy.channel = channel_;
}

@end
