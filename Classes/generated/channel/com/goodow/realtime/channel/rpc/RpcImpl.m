//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/channel/rpc/RpcImpl.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "com/goodow/realtime/channel/http/HttpRequest.h"
#import "com/goodow/realtime/channel/http/HttpResponse.h"
#import "com/goodow/realtime/channel/http/HttpTransport.h"
#import "com/goodow/realtime/channel/rpc/Rpc.h"
#import "com/goodow/realtime/channel/rpc/RpcImpl.h"
#import "com/goodow/realtime/channel/util/ChannelFactory.h"
#import "com/goodow/realtime/channel/util/ChannelNative.h"
#import "elemental/json/JsonException.h"
#import "elemental/util/ArrayOfInt.h"
#import "elemental/util/ArrayOfString.h"
#import "elemental/util/Collections.h"
#import "elemental/util/MapFromIntTo.h"
#import "elemental/util/MapFromStringToString.h"
#import "java/io/IOException.h"
#import "java/lang/AssertionError.h"
#import "java/lang/Exception.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/Throwable.h"
#import "java/util/logging/Level.h"
#import "java/util/logging/Logger.h"

@implementation ComGoodowRealtimeChannelRpcRpcImpl

static JavaUtilLoggingLogger * ComGoodowRealtimeChannelRpcRpcImpl_log_;
static int ComGoodowRealtimeChannelRpcRpcImpl_nextRequestId_;
static id<ElementalUtilMapFromIntTo> ComGoodowRealtimeChannelRpcRpcImpl_handles_;

@synthesize rpcRoot = rpcRoot_;
@synthesize listener = listener_;
@synthesize connectionState = connectionState_;
@synthesize consecutiveFailures = consecutiveFailures_;

+ (JavaUtilLoggingLogger *)log {
  return ComGoodowRealtimeChannelRpcRpcImpl_log_;
}

+ (int)nextRequestId {
  return ComGoodowRealtimeChannelRpcRpcImpl_nextRequestId_;
}

+ (int *)nextRequestIdRef {
  return &ComGoodowRealtimeChannelRpcRpcImpl_nextRequestId_;
}

+ (id<ElementalUtilMapFromIntTo>)handles {
  return ComGoodowRealtimeChannelRpcRpcImpl_handles_;
}

+ (void)setHandles:(id<ElementalUtilMapFromIntTo>)handles {
  ComGoodowRealtimeChannelRpcRpcImpl_handles_ = handles;
}

+ (void)dropRequestWithComGoodowRealtimeChannelRpcRpcImpl_Handle:(ComGoodowRealtimeChannelRpcRpcImpl_Handle *)handle {
  [((id<ElementalUtilMapFromIntTo>) NIL_CHK(ComGoodowRealtimeChannelRpcRpcImpl_handles_)) removeWithInt:[((ComGoodowRealtimeChannelRpcRpcImpl_Handle *) NIL_CHK(handle)) getId]];
}

+ (void)dropAll {
  id<ElementalUtilArrayOfInt> keys = [((id<ElementalUtilMapFromIntTo>) NIL_CHK(ComGoodowRealtimeChannelRpcRpcImpl_handles_)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfInt>) NIL_CHK(keys)) length]; i < len; i++) {
    [((id<ElementalUtilMapFromIntTo>) NIL_CHK(ComGoodowRealtimeChannelRpcRpcImpl_handles_)) removeWithInt:[((id<ElementalUtilArrayOfInt>) NIL_CHK(keys)) getWithInt:i]];
  }
}

- (id)initWithNSString:(NSString *)rpcRoot
withComGoodowRealtimeChannelRpcRpc_ConnectionStateListener:(id<ComGoodowRealtimeChannelRpcRpc_ConnectionStateListener>)listener {
  if ((self = [super init])) {
    connectionState_ = [ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum CONNECTED];
    consecutiveFailures_ = 0;
    self.rpcRoot = rpcRoot;
    self.listener = listener;
  }
  return self;
}

- (id<ComGoodowRealtimeChannelRpcRpc_RpcHandle>)getWithNSString:(NSString *)serviceName
                         withElementalUtilMapFromStringToString:(id<ElementalUtilMapFromStringToString>)params
                 withComGoodowRealtimeChannelRpcRpc_RpcCallback:(id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>)rpcCallback {
  return [self makeRequestWithComGoodowRealtimeChannelRpcRpc_MethodEnum:[ComGoodowRealtimeChannelRpcRpc_MethodEnum GET] withNSString:serviceName withElementalUtilMapFromStringToString:params withNSString:nil withComGoodowRealtimeChannelRpcRpc_RpcCallback:rpcCallback];
}

- (void)maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:(ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum *)newState {
  if (newState != connectionState_ && [((ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum *) NIL_CHK(connectionState_)) canTransitionToWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:newState]) {
    connectionState_ = newState;
    if (listener_ != nil) {
      [listener_ connectionStateChangedWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:connectionState_];
    }
  }
}

- (id<ComGoodowRealtimeChannelRpcRpc_RpcHandle>)postWithNSString:(NSString *)serviceName
                          withElementalUtilMapFromStringToString:(id<ElementalUtilMapFromStringToString>)params
                                                    withNSString:(NSString *)formData
                  withComGoodowRealtimeChannelRpcRpc_RpcCallback:(id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>)rpcCallback {
  return [self makeRequestWithComGoodowRealtimeChannelRpcRpc_MethodEnum:[ComGoodowRealtimeChannelRpcRpc_MethodEnum POST] withNSString:serviceName withElementalUtilMapFromStringToString:params withNSString:formData withComGoodowRealtimeChannelRpcRpc_RpcCallback:rpcCallback];
}

- (JavaLangStringBuilder *)addParamsWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                       withElementalUtilMapFromStringToString:(id<ElementalUtilMapFromStringToString>)params {
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringToString>) NIL_CHK(params)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    NSString *value = [((id<ElementalUtilMapFromStringToString>) NIL_CHK(params)) getWithNSString:key];
    if (value != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(b)) appendWithNSString:[NSString stringWithFormat:@"%@=%@&", key, [((id<ComGoodowRealtimeChannelUtilChannelFactory>) [ComGoodowRealtimeChannelUtilChannelNative get]) escapeUriQueryWithNSString:value]]];
    }
  }
  return b;
}

- (id<ComGoodowRealtimeChannelRpcRpc_RpcHandle>)makeRequestWithComGoodowRealtimeChannelRpcRpc_MethodEnum:(ComGoodowRealtimeChannelRpcRpc_MethodEnum *)method
                                                                                            withNSString:(NSString *)serviceName
                                                                  withElementalUtilMapFromStringToString:(id<ElementalUtilMapFromStringToString>)params
                                                                                            withNSString:(NSString *)formData
                                                          withComGoodowRealtimeChannelRpcRpc_RpcCallback:(id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>)rpcCallback {
  int requestId = ComGoodowRealtimeChannelRpcRpcImpl_nextRequestId_;
  ComGoodowRealtimeChannelRpcRpcImpl_nextRequestId_++;
  if (connectionState_ == [ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum HARD_RELOAD]) {
    return [[ComGoodowRealtimeChannelRpcRpcImpl_Handle alloc] initWithComGoodowRealtimeChannelRpcRpcImpl:self withInt:requestId];
  }
  NSString *requestData = nil;
  JavaLangStringBuilder *urlBuilder = [[JavaLangStringBuilder alloc] initWithNSString:[NSString stringWithFormat:@"%@/%@?", rpcRoot_, serviceName]];
  if (method == [ComGoodowRealtimeChannelRpcRpc_MethodEnum GET]) {
    [self addParamsWithJavaLangStringBuilder:urlBuilder withElementalUtilMapFromStringToString:params];
  }
  else {
    [self addParamsWithJavaLangStringBuilder:urlBuilder withElementalUtilMapFromStringToString:params];
    requestData = [NSString stringWithFormat:@"=%@", formData];
  }
  NSString *url = [((JavaLangStringBuilder *) NIL_CHK(urlBuilder)) description];
  ComGoodowRealtimeChannelHttpHttpRequest *r = [[((id<ComGoodowRealtimeChannelUtilChannelFactory>) [ComGoodowRealtimeChannelUtilChannelNative get]) getHttpTransport] buildRequestWithNSString:[((ComGoodowRealtimeChannelRpcRpc_MethodEnum *) NIL_CHK(method)) name] withNSString:url];
  if (method == [ComGoodowRealtimeChannelRpcRpc_MethodEnum POST]) {
    [((ComGoodowRealtimeChannelHttpHttpRequest *) NIL_CHK(r)) setContentTypeWithNSString:@"application/x-www-form-urlencoded"];
    [((ComGoodowRealtimeChannelHttpHttpRequest *) NIL_CHK(r)) addHeaderWithNSString:@"X-Same-Domain" withNSString:@"true"];
  }
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelRpcRpcImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"RPC Request, id=%d method=%@ urlSize=%d bodySize=%d", requestId, [((ComGoodowRealtimeChannelRpcRpc_MethodEnum *) NIL_CHK(method)) name], (int) [NIL_CHK(url) length], (requestData == nil ? 0 : [NIL_CHK(requestData) length])]];
  ComGoodowRealtimeChannelRpcRpcImpl_makeRequest_RpcRequestCallback *innerCallback = [[ComGoodowRealtimeChannelRpcRpcImpl_makeRequest_RpcRequestCallback alloc] initWithComGoodowRealtimeChannelRpcRpcImpl:self withInt:requestId withComGoodowRealtimeChannelRpcRpc_RpcCallback:rpcCallback withNSString:url];
  @try {
    [((ComGoodowRealtimeChannelHttpHttpRequest *) NIL_CHK(r)) setContentWithNSString:requestData];
    [((ComGoodowRealtimeChannelHttpHttpRequest *) NIL_CHK(r)) executeAsyncWithComGoodowRealtimeChannelHttpHttpRequestCallback:innerCallback];
    ComGoodowRealtimeChannelRpcRpcImpl_Handle *handle = [[ComGoodowRealtimeChannelRpcRpcImpl_Handle alloc] initWithComGoodowRealtimeChannelRpcRpcImpl:self withInt:requestId];
    [((id<ElementalUtilMapFromIntTo>) NIL_CHK(ComGoodowRealtimeChannelRpcRpcImpl_handles_)) putWithInt:[((ComGoodowRealtimeChannelRpcRpcImpl_Handle *) NIL_CHK(handle)) getId] withId:handle];
    return handle;
  }
  @catch (JavaIoIOException *e) {
    [((ComGoodowRealtimeChannelRpcRpcImpl_makeRequest_RpcRequestCallback *) NIL_CHK(innerCallback)) errorWithJavaLangThrowable:e];
    return nil;
  }
}

+ (void)initialize {
  if (self == [ComGoodowRealtimeChannelRpcRpcImpl class]) {
    ComGoodowRealtimeChannelRpcRpcImpl_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComGoodowRealtimeChannelRpcRpcImpl class]] getName]];
    ComGoodowRealtimeChannelRpcRpcImpl_handles_ = ((id<ElementalUtilMapFromIntTo>) [ElementalUtilCollections mapFromIntTo]);
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelRpcRpcImpl *typedCopy = (ComGoodowRealtimeChannelRpcRpcImpl *) copy;
  typedCopy.rpcRoot = rpcRoot_;
  typedCopy.listener = listener_;
  typedCopy.connectionState = connectionState_;
  typedCopy.consecutiveFailures = consecutiveFailures_;
}

@end
@implementation ComGoodowRealtimeChannelRpcRpcImpl_Handle

@synthesize id_ = id__;

- (id)initWithComGoodowRealtimeChannelRpcRpcImpl:(ComGoodowRealtimeChannelRpcRpcImpl *)outer$
                                         withInt:(int)id_ {
  if ((self = [super init])) {
    self.id_ = id_;
  }
  return self;
}

- (void)drop {
  [ComGoodowRealtimeChannelRpcRpcImpl dropRequestWithComGoodowRealtimeChannelRpcRpcImpl_Handle:self];
}

- (BOOL)isEqual:(id)other {
  if ([other isKindOfClass:[ComGoodowRealtimeChannelRpcRpcImpl_Handle class]]) {
    return id__ == ((ComGoodowRealtimeChannelRpcRpcImpl_Handle *) other).id_;
  }
  return NO;
}

- (int)getId {
  return id__;
}

- (NSUInteger)hash {
  return id__ * 43;
}

- (BOOL)isPending {
  return [((id<ElementalUtilMapFromIntTo>) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl handles])) hasKeyWithInt:id__];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelRpcRpcImpl_Handle *typedCopy = (ComGoodowRealtimeChannelRpcRpcImpl_Handle *) copy;
  typedCopy.id_ = id__;
}

@end

static ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_OK;
static ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_PERMANENT_FAILURE;
static ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_RETRYABLE_FAILURE;
IOSObjectArray *ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_values;

@implementation ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum

+ (ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *)OK {
  return ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_OK;
}
+ (ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *)PERMANENT_FAILURE {
  return ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_PERMANENT_FAILURE;
}
+ (ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *)RETRYABLE_FAILURE {
  return ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_RETRYABLE_FAILURE;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum class]) {
    ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_OK = [[ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum alloc] initWithNSString:@"OK" withInt:0];
    ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_PERMANENT_FAILURE = [[ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum alloc] initWithNSString:@"PERMANENT_FAILURE" withInt:1];
    ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_RETRYABLE_FAILURE = [[ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum alloc] initWithNSString:@"RETRYABLE_FAILURE" withInt:2];
    ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_OK, ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_PERMANENT_FAILURE, ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_RETRYABLE_FAILURE, nil } count:3 type:[IOSClass classWithClass:[ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_values];
}

+ (ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_values count]; i++) {
    ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *e = [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation ComGoodowRealtimeChannelRpcRpcImpl_makeRequest_RpcRequestCallback

@synthesize this$0 = this$0_;
@synthesize id_ = id__;
@synthesize callback = callback_;
@synthesize url_ = url__;

- (id)initWithComGoodowRealtimeChannelRpcRpcImpl:(ComGoodowRealtimeChannelRpcRpcImpl *)outer$
                                         withInt:(int)id_
  withComGoodowRealtimeChannelRpcRpc_RpcCallback:(id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>)callback
                                    withNSString:(NSString *)url_ {
  if ((self = [super init])) {
    this$0_ = outer$;
    self.id_ = id_;
    self.callback = callback;
    self.url_ = url_;
  }
  return self;
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)exception {
  if (![((id<ElementalUtilMapFromIntTo>) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl handles])) hasKeyWithInt:id__]) {
    [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"RPC FailureDrop, id=%d %@", id__, [((JavaLangThrowable *) NIL_CHK(exception)) getMessage]]];
    return;
  }
  [self removeHandle];
  [self errorWithJavaLangThrowable:exception];
}

- (void)onResponseWithComGoodowRealtimeChannelHttpHttpResponse:(ComGoodowRealtimeChannelHttpHttpResponse *)response {
  id<ComGoodowRealtimeChannelRpcRpc_RpcHandle> handle = ((id<ComGoodowRealtimeChannelRpcRpc_RpcHandle>) [((id<ElementalUtilMapFromIntTo>) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl handles])) getWithInt:id__]);
  if (handle == nil) {
    [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"RPC SuccessDrop, id=%d", id__]];
    return;
  }
  [self removeHandle];
  int statusCode = [((ComGoodowRealtimeChannelHttpHttpResponse *) NIL_CHK(response)) getStatusCode];
  NSString *data = [((ComGoodowRealtimeChannelHttpHttpResponse *) NIL_CHK(response)) getContent];
  ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum *result;
  if (statusCode < 100) {
    result = [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum RETRYABLE_FAILURE];
    [this$0_ maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:[ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum OFFLINE]];
  }
  else if (statusCode == 200) {
    result = [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum OK];
    [this$0_ maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:[ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum CONNECTED]];
    this$0_.consecutiveFailures = 0;
  }
  else if (statusCode >= 500) {
    result = [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum RETRYABLE_FAILURE];
    this$0_.consecutiveFailures++;
    if (this$0_.consecutiveFailures > ComGoodowRealtimeChannelRpcRpcImpl_MAX_CONSECUTIVE_FAILURES) {
      [this$0_ maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:[ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum OFFLINE]];
    }
    else {
      [this$0_ maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:[ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum CONNECTED]];
    }
  }
  else {
    result = [ComGoodowRealtimeChannelRpcRpcImpl_ResultEnum PERMANENT_FAILURE];
    [this$0_ maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:[ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum SOFT_RELOAD]];
  }
  switch ([result ordinal]) {
    case ComGoodowRealtimeChannelRpcRpcImpl_Result_OK:
    [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"RPC Success, id=%d", id__]];
    @try {
      [((id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>) NIL_CHK(callback_)) onSuccessWithNSString:data];
    }
    @catch (EMJsonException *e) {
      [this$0_ maybeSetConnectionStateWithComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum:[ComGoodowRealtimeChannelRpcRpc_ConnectionStateEnum LOGGED_OUT]];
      [self errorWithJavaLangThrowable:[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"%@%d, data: %@", @"RPC failed due to message exception, treating as auth failure, status code: ", statusCode, data]]];
    }
    break;
    case ComGoodowRealtimeChannelRpcRpcImpl_Result_RETRYABLE_FAILURE:
    [self errorWithJavaLangThrowable:[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"RPC failed, status code: %d, data: %@", statusCode, data]]];
    break;
    case ComGoodowRealtimeChannelRpcRpcImpl_Result_PERMANENT_FAILURE:
    [self fatalWithJavaLangThrowable:[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"RPC bad request, status code: %d, data: %@", statusCode, data]]];
    break;
    default:
    @throw [[JavaLangAssertionError alloc] initWithId:[NSString stringWithFormat:@"Unknown result %@", result]];
  }
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:[NSString stringWithFormat:@"RPC Failure, id=%d %@ Request url:%@", id__, [((JavaLangThrowable *) NIL_CHK(e)) getMessage], url__] withJavaLangThrowable:e];
  [((id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>) NIL_CHK(callback_)) onConnectionErrorWithJavaLangThrowable:e];
}

- (void)fatalWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:[NSString stringWithFormat:@"RPC Bad Request, id=%d %@ Request url:%@", id__, [((JavaLangThrowable *) NIL_CHK(e)) getMessage], url__] withJavaLangThrowable:e];
  [((id<ComGoodowRealtimeChannelRpcRpc_RpcCallback>) NIL_CHK(callback_)) onFatalErrorWithJavaLangThrowable:e];
}

- (void)removeHandle {
  [((id<ElementalUtilMapFromIntTo>) NIL_CHK([ComGoodowRealtimeChannelRpcRpcImpl handles])) removeWithInt:id__];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelRpcRpcImpl_makeRequest_RpcRequestCallback *typedCopy = (ComGoodowRealtimeChannelRpcRpcImpl_makeRequest_RpcRequestCallback *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.id_ = id__;
  typedCopy.callback = callback_;
  typedCopy.url_ = url__;
}

@end
