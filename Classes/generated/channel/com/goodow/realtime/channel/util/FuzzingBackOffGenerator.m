//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "com/goodow/realtime/channel/util/FuzzingBackOffGenerator.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@implementation ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator

- (id)initWithInt:(int)initialBackOff
          withInt:(int)maxBackOff
       withDouble:(double)randomisationFactor {
  if (self = [super init]) {
    if (randomisationFactor < 0 || randomisationFactor > 1) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"randomisationFactor must be between 0 and 1. actual %f", randomisationFactor]];
    }
    if (initialBackOff <= 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"initialBackOff must be between 0 and 1. actual %d", initialBackOff]];
    }
    self->randomisationFactor_ = randomisationFactor;
    self->initialBackOff_ = initialBackOff;
    self->maxBackOff_ = maxBackOff;
    self->nextBackOffTime_ = initialBackOff;
    self->backOffTime_ = 0;
  }
  return self;
}

- (ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters *)next {
  int ret = [JavaLangMath minWithInt:nextBackOffTime_ withInt:maxBackOff_];
  nextBackOffTime_ += backOffTime_;
  backOffTime_ = ret;
  int randomizeTime = (int) (backOffTime_ * (1.0 + ([JavaLangMath random] * randomisationFactor_)));
  int minAllowedTime = (int) [JavaLangMath roundWithDouble:randomizeTime - backOffTime_ * randomisationFactor_];
  return [[ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters alloc] initWithInt:randomizeTime withInt:minAllowedTime];
}

- (void)reset {
  nextBackOffTime_ = initialBackOff_;
  backOffTime_ = 0;
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator *)other {
  [super copyAllFieldsTo:other];
  other->backOffTime_ = backOffTime_;
  other->initialBackOff_ = initialBackOff_;
  other->maxBackOff_ = maxBackOff_;
  other->nextBackOffTime_ = nextBackOffTime_;
  other->randomisationFactor_ = randomisationFactor_;
}

@end
@implementation ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters

- (id)initWithInt:(int)targetDelay
          withInt:(int)minimumDelay {
  if (self = [super init]) {
    self->targetDelay_ = targetDelay;
    self->minimumDelay_ = minimumDelay;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters *)other {
  [super copyAllFieldsTo:other];
  other->minimumDelay_ = minimumDelay_;
  other->targetDelay_ = targetDelay_;
}

@end
