//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/channel/util/FuzzingBackOffGenerator.java
//
//  Created by retechretech on 13-5-25.
//

#import "com/goodow/realtime/channel/util/FuzzingBackOffGenerator.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Math.h"

@implementation ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator

@synthesize randomisationFactor = randomisationFactor_;
@synthesize initialBackOff = initialBackOff_;
@synthesize maxBackOff = maxBackOff_;
@synthesize nextBackOffTime = nextBackOffTime_;
@synthesize backOffTime = backOffTime_;

- (id)initWithInt:(int)initialBackOff
          withInt:(int)maxBackOff
       withDouble:(double)randomisationFactor {
  if ((self = [super init])) {
    if (randomisationFactor < 0 || randomisationFactor > 1) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"randomisationFactor must be between 0 and 1. actual %f", randomisationFactor]];
    }
    if (initialBackOff <= 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"initialBackOff must be between 0 and 1. actual %d", initialBackOff]];
    }
    self.randomisationFactor = randomisationFactor;
    self.initialBackOff = initialBackOff;
    self.maxBackOff = maxBackOff;
    self.nextBackOffTime = initialBackOff;
    self.backOffTime = 0;
  }
  return self;
}

- (ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters *)next {
  int ret = [JavaLangMath minWithInt:nextBackOffTime_ withInt:maxBackOff_];
  nextBackOffTime_ += backOffTime_;
  backOffTime_ = ret;
  int randomizeTime = (int) (backOffTime_ * (1.0 + ([JavaLangMath random] * randomisationFactor_)));
  int minAllowedTime = (int) [JavaLangMath roundWithDouble:randomizeTime - backOffTime_ * randomisationFactor_];
  return [[ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters alloc] initWithInt:randomizeTime withInt:minAllowedTime];
}

- (void)reset {
  nextBackOffTime_ = initialBackOff_;
  backOffTime_ = 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator *typedCopy = (ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator *) copy;
  typedCopy.randomisationFactor = randomisationFactor_;
  typedCopy.initialBackOff = initialBackOff_;
  typedCopy.maxBackOff = maxBackOff_;
  typedCopy.nextBackOffTime = nextBackOffTime_;
  typedCopy.backOffTime = backOffTime_;
}

@end
@implementation ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters

@synthesize targetDelay = targetDelay_;
@synthesize minimumDelay = minimumDelay_;

- (id)initWithInt:(int)targetDelay
          withInt:(int)minimumDelay {
  if ((self = [super init])) {
    self.targetDelay = targetDelay;
    self.minimumDelay = minimumDelay;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters *typedCopy = (ComGoodowRealtimeChannelUtilFuzzingBackOffGenerator_BackOffParameters *) copy;
  typedCopy.targetDelay = targetDelay_;
  typedCopy.minimumDelay = minimumDelay_;
}

@end
