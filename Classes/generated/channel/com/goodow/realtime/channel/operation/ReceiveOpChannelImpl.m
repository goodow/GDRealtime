//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/channel/operation/ReceiveOpChannelImpl.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "com/goodow/realtime/channel/RealtimeChannelDemuxer.h"
#import "com/goodow/realtime/channel/operation/GenericOperationChannel.h"
#import "com/goodow/realtime/channel/operation/ReceiveOpChannelImpl.h"
#import "com/goodow/realtime/channel/rpc/Constants.h"
#import "com/goodow/realtime/channel/rpc/DeltaService.h"
#import "com/goodow/realtime/channel/rpc/Rpc.h"
#import "com/goodow/realtime/operation/Operation.h"
#import "com/goodow/realtime/operation/Transformer.h"
#import "com/goodow/realtime/util/ModelFactory.h"
#import "com/goodow/realtime/util/ModelNative.h"
#import "com/goodow/realtime/util/Pair.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonException.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonValue.h"
#import "elemental/util/Collections.h"
#import "elemental/util/MapFromIntTo.h"
#import "java/lang/Exception.h"
#import "java/lang/Math.h"
#import "java/lang/Runnable.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/Throwable.h"
#import "java/util/logging/Level.h"
#import "java/util/logging/Logger.h"

@implementation ComGoodowRealtimeChannelOperationReceiveOpChannelImpl

static JavaUtilLoggingLogger * ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_;

@synthesize isCatchupTaskScheduled = isCatchupTaskScheduled_;
@synthesize catchupTask = catchupTask_;
@synthesize callback = callback_;
@synthesize demuxer = demuxer_;
@synthesize pending = pending_;
@synthesize id_ = id__;
@synthesize service = service_;
@synthesize listener = listener_;
@synthesize currentRevision = currentRevision_;
@synthesize knownHeadRevision = knownHeadRevision_;
@synthesize catchupRevision = catchupRevision_;
@synthesize transformer = transformer_;
@synthesize corruptedByException = corruptedByException_;
@synthesize receiving = receiving_;

+ (JavaUtilLoggingLogger *)log {
  return ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_;
}

- (id)initWithNSString:(NSString *)id_
withComGoodowRealtimeChannelRpcRpc:(id<ComGoodowRealtimeChannelRpcRpc>)rpc
withComGoodowRealtimeOperationTransformer:(id<ComGoodowRealtimeOperationTransformer>)transformer {
  if ((self = [super init])) {
    catchupTask_ = [[ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$1 alloc] initWithComGoodowRealtimeChannelOperationReceiveOpChannelImpl:self];
    callback_ = [[ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$2 alloc] initWithComGoodowRealtimeChannelOperationReceiveOpChannelImpl:self];
    demuxer_ = [ComGoodowRealtimeChannelRealtimeChannelDemuxer get];
    pending_ = ((id<ElementalUtilMapFromIntTo>) [ElementalUtilCollections mapFromIntTo]);
    currentRevision_ = 0;
    knownHeadRevision_ = 0;
    catchupRevision_ = 0;
    corruptedByException_ = NO;
    receiving_ = NO;
    self.id_ = id_;
    self.transformer = transformer;
    self.service = [[ComGoodowRealtimeChannelRpcDeltaService alloc] initWithComGoodowRealtimeChannelRpcRpc:rpc];
  }
  return self;
}

- (void)connectWithInt:(int)revision
withComGoodowRealtimeChannelOperationGenericOperationChannel_ReceiveOpChannel_Listener:(id<ComGoodowRealtimeChannelOperationGenericOperationChannel_ReceiveOpChannel_Listener>)listener {
  NSAssert(self.listener == nil, @"src/main/java/com/goodow/realtime/channel/operation/ReceiveOpChannelImpl.java:100 condition failed: assert this.listener == null;");
  self.listener = listener;
  self.currentRevision = self.knownHeadRevision = revision;
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"connect, rev=%d", revision]];
}

- (void)disconnect {
  [((ComGoodowRealtimeChannelRealtimeChannelDemuxer *) NIL_CHK(demuxer_)) closeWithNSString:id__];
}

- (void)onKnownHeadRevisionWithInt:(int)headVersion {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"onKnownHeadRevision(%d), old known=%d, current=%d", headVersion, knownHeadRevision_, currentRevision_]];
  knownHeadRevision_ = [JavaLangMath maxWithInt:knownHeadRevision_ withInt:headVersion];
  if (knownHeadRevision_ > currentRevision_) {
    [self scheduleCatchup];
  }
  NSAssert(knownHeadRevision_ == currentRevision_ || isCatchupTaskScheduled_, @"src/main/java/com/goodow/realtime/channel/operation/ReceiveOpChannelImpl.java:122 condition failed: assert knownHeadRevision == currentRevision || isCatchupTaskScheduled;");
}

- (void)onMessageWithEMJsonObject:(id<EMJsonObject>)msg {
  id<EMJsonArray> deltas = [((id<EMJsonObject>) NIL_CHK(msg)) getArrayWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params DELTAS]];
  for (int i = 0, len = [((id<EMJsonArray>) NIL_CHK(deltas)) length]; i < len; i++) {
    id<EMJsonArray> delta = [((id<EMJsonArray>) NIL_CHK(deltas)) getArrayWithInt:i];
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"Store message: %@", [((id<EMJsonArray>) NIL_CHK(delta)) toJson]]];
    id op;
    @try {
      op = [((id<ComGoodowRealtimeOperationTransformer>) NIL_CHK(transformer_)) createOperationWithEMJsonValue:[((id<EMJsonArray>) NIL_CHK(delta)) getWithInt:0] withNSString:[((id<EMJsonArray>) NIL_CHK(delta)) getStringWithInt:1] withNSString:[((id<EMJsonArray>) NIL_CHK(delta)) getStringWithInt:3]];
    }
    @catch (EMJsonException *e) {
      [((id<ComGoodowRealtimeChannelOperationGenericOperationChannel_ReceiveOpChannel_Listener>) NIL_CHK(listener_)) onErrorWithJavaLangThrowable:e];
      return;
    }
    [self receiveUnorderedDataWithInt:(int) [((id<EMJsonArray>) NIL_CHK(delta)) getNumberWithInt:2] withNSString:[((id<EMJsonArray>) NIL_CHK(delta)) getStringWithInt:3] withId:op];
  }
  if ([((id<EMJsonObject>) NIL_CHK(msg)) hasKeyWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params REVISION]]) {
    [self onKnownHeadRevisionWithInt:(int) [((id<EMJsonObject>) NIL_CHK(msg)) getNumberWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params REVISION]]];
  }
  if ([((id<EMJsonObject>) NIL_CHK(msg)) hasKeyWithNSString:[ComGoodowRealtimeChannelRpcConstants_Params HAS_MORE]]) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:@"fetch history returned incomplete result, retrying for the rest"];
    [((ComGoodowRealtimeChannelRpcDeltaService *) NIL_CHK(service_)) fetchHistoryWithNSString:id__ withInt:currentRevision_ + 1 withComGoodowRealtimeChannelRpcDeltaService_Callback:callback_];
  }
}

- (int)revision {
  return currentRevision_;
}

- (void)maybeCatchup {
  if (knownHeadRevision_ > currentRevision_ && knownHeadRevision_ > catchupRevision_) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"Catching up to %d", knownHeadRevision_]];
    catchupRevision_ = knownHeadRevision_;
    [((ComGoodowRealtimeChannelRpcDeltaService *) NIL_CHK(service_)) fetchHistoryWithNSString:id__ withInt:currentRevision_ + 1 withComGoodowRealtimeChannelRpcDeltaService_Callback:callback_];
  }
  else {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:@"No need to catchup"];
  }
}

- (void)receiveUnorderedDataWithInt:(int)resultingRevision
                       withNSString:(NSString *)sessionId
                             withId:(id)op {
  NSAssert(!corruptedByException_, @"receiveUnorderedData called while corrupted");
  NSAssert(!receiving_, @"receiveUnorderedData called re-entrantly");
  receiving_ = YES;
  @try {
    [self unguardedReceiveUnorderedDataWithInt:resultingRevision withNSString:sessionId withId:op];
  }
  @catch (JavaLangRuntimeException *e) {
    corruptedByException_ = YES;
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"Op channel is now corrupted" withJavaLangThrowable:e];
    @throw e;
  }
  receiving_ = NO;
}

- (void)scheduleCatchup {
  [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:@"scheduleCatchup()"];
  if (!isCatchupTaskScheduled_) {
    isCatchupTaskScheduled_ = YES;
    [((id<ComGoodowRealtimeUtilModelFactory>) [ComGoodowRealtimeUtilModelNative get]) scheduleFixedDelayWithJavaLangRunnable:catchupTask_ withInt:ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_CATCHUP_DELAY_MILLIS];
  }
}

- (void)unguardedReceiveUnorderedDataWithInt:(int)resultingRevision
                                withNSString:(NSString *)sessionId
                                      withId:(id)op {
  knownHeadRevision_ = [JavaLangMath maxWithInt:knownHeadRevision_ withInt:resultingRevision];
  if (resultingRevision <= currentRevision_) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"Old dup at revision %d, current is now %d", resultingRevision, currentRevision_]];
    return;
  }
  ComGoodowRealtimeUtilPair *existing = ((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromIntTo>) NIL_CHK(pending_)) getWithInt:resultingRevision]);
  if (existing != nil) {
    NSAssert(resultingRevision > currentRevision_ + 1, @"should not have pending data");
    if (![NIL_CHK(existing.first) isEqual:sessionId]) {
      [((id<ComGoodowRealtimeChannelOperationGenericOperationChannel_ReceiveOpChannel_Listener>) NIL_CHK(listener_)) onErrorWithJavaLangThrowable:[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Duplicates did not match at resultingRevision %d: %@ vs (%@,%@)", resultingRevision, existing, sessionId, [NIL_CHK(op) description]]]];
    }
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"%@%@,%@)", @"Dup message: (", sessionId, [NIL_CHK(op) description]]];
    return;
  }
  if (resultingRevision > currentRevision_ + 1) {
    [((id<ElementalUtilMapFromIntTo>) NIL_CHK(pending_)) putWithInt:resultingRevision withId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:sessionId withId:op])];
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"Missed message, currentRevision=%d message revision=%d", currentRevision_, resultingRevision]];
    [self scheduleCatchup];
    return;
  }
  NSAssert(resultingRevision == currentRevision_ + 1, @"other cases should have been caught");
  while (YES) {
    [((JavaUtilLoggingLogger *) NIL_CHK(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:[NSString stringWithFormat:@"Ordered op @%d sid=%@, payload=%@", resultingRevision, sessionId, [NIL_CHK(op) description]]];
    [((id<ComGoodowRealtimeChannelOperationGenericOperationChannel_ReceiveOpChannel_Listener>) NIL_CHK(listener_)) onMessageWithInt:currentRevision_ + 1 withNSString:sessionId withId:op];
    currentRevision_++;
    int next = currentRevision_ + 1;
    ComGoodowRealtimeUtilPair *pair = ((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromIntTo>) NIL_CHK(pending_)) getWithInt:next]);
    if (pair != nil) {
      sessionId = pair.first;
      op = pair.second;
      [((id<ElementalUtilMapFromIntTo>) NIL_CHK(pending_)) removeWithInt:next];
    }
    else {
      break;
    }
  }
  NSAssert(![((id<ElementalUtilMapFromIntTo>) NIL_CHK(pending_)) hasKeyWithInt:currentRevision_ + 1], @"src/main/java/com/goodow/realtime/channel/operation/ReceiveOpChannelImpl.java:243 condition failed: assert !pending.hasKey(currentRevision + 1);");
}

+ (void)initialize {
  if (self == [ComGoodowRealtimeChannelOperationReceiveOpChannelImpl class]) {
    ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComGoodowRealtimeChannelOperationReceiveOpChannelImpl class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *typedCopy = (ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *) copy;
  typedCopy.isCatchupTaskScheduled = isCatchupTaskScheduled_;
  typedCopy.catchupTask = catchupTask_;
  typedCopy.callback = callback_;
  typedCopy.demuxer = demuxer_;
  typedCopy.pending = pending_;
  typedCopy.id_ = id__;
  typedCopy.service = service_;
  typedCopy.listener = listener_;
  typedCopy.currentRevision = currentRevision_;
  typedCopy.knownHeadRevision = knownHeadRevision_;
  typedCopy.catchupRevision = catchupRevision_;
  typedCopy.transformer = transformer_;
  typedCopy.corruptedByException = corruptedByException_;
  typedCopy.receiving = receiving_;
}

@end
@implementation ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$1

@synthesize this$0 = this$0_;

- (void)run {
  this$0_.isCatchupTaskScheduled = NO;
  [this$0_ maybeCatchup];
}

- (id)initWithComGoodowRealtimeChannelOperationReceiveOpChannelImpl:(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$1 *typedCopy = (ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$2

@synthesize this$0 = this$0_;

- (void)onConnectionErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelOperationReceiveOpChannelImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"onConnectionError " withJavaLangThrowable:e];
}

- (void)onFatalErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((JavaUtilLoggingLogger *) NIL_CHK([ComGoodowRealtimeChannelOperationReceiveOpChannelImpl log])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"onFatalError " withJavaLangThrowable:e];
}

- (void)onMessageWithEMJsonObject:(id<EMJsonObject>)msg {
  [this$0_ onMessageWithEMJsonObject:msg];
}

- (id)initWithComGoodowRealtimeChannelOperationReceiveOpChannelImpl:(ComGoodowRealtimeChannelOperationReceiveOpChannelImpl *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$2 *typedCopy = (ComGoodowRealtimeChannelOperationReceiveOpChannelImpl_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
