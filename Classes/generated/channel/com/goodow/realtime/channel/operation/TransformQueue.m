//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "com/goodow/realtime/channel/operation/TransformQueue.h"
#include "com/goodow/realtime/operation/Transformer.h"
#include "com/goodow/realtime/operation/util/Pair.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@implementation ComGoodowRealtimeChannelOperationTransformQueue

- (id)initWithComGoodowRealtimeOperationTransformer:(id<ComGoodowRealtimeOperationTransformer>)transformer {
  if (self = [super init]) {
    revision__ = -1;
    expectedAckedClientOps_ = 0;
    serverOps_ = [[JavaUtilLinkedList alloc] init];
    queuedClientOps_ = [[JavaUtilLinkedList alloc] init];
    unackedClientOps__ = [JavaUtilCollections emptyList];
    newClientOpSinceTransform_ = NO;
    self->transformer_ = transformer;
  }
  return self;
}

- (BOOL)ackClientOpWithInt:(int)resultingRevision {
  [self checkRevisionWithInt:resultingRevision];
  NSAssert(expectedAckedClientOps_ == 0, [[NSString stringWithFormat:@"must call expectedAck J2OBJC_COMMA() there are %d expectedAckedClientOps" J2OBJC_COMMA() expectedAckedClientOps_] description]);
  NSAssert(![((id<JavaUtilList>) nil_chk(unackedClientOps__)) isEmpty], [[NSString stringWithFormat:@"%@: unackedClientOps is empty; resultingRevision=%d" J2OBJC_COMMA() self J2OBJC_COMMA() resultingRevision] description]);
  self->revision__ = resultingRevision;
  (void) [unackedClientOps__ removeWithInt:0];
  return [unackedClientOps__ isEmpty];
}

- (id<JavaUtilList>)ackOpsIfVersionMatchesWithInt:(int)newRevision {
  if (newRevision == revision__ + [((id<JavaUtilList>) nil_chk(unackedClientOps__)) size]) {
    id<JavaUtilList> expectedAckingClientOps = unackedClientOps__;
    expectedAckedClientOps_ += [expectedAckingClientOps size];
    unackedClientOps__ = [[JavaUtilLinkedList alloc] init];
    revision__ = newRevision;
    return expectedAckingClientOps;
  }
  return nil;
}

- (void)clientOpWithId:(id)clientOp {
  [((id<ComGoodowRealtimeOperationTransformer>) nil_chk(transformer_)) transformWithJavaUtilList:queuedClientOps_ withId:clientOp withJavaUtilList:serverOps_ withInt:0 withBoolean:YES];
  newClientOpSinceTransform_ = YES;
}

- (BOOL)expectedAckWithInt:(int)resultingRevision {
  if (expectedAckedClientOps_ == 0) {
    return NO;
  }
  NSAssert(resultingRevision == revision__ - expectedAckedClientOps_ + 1, [[NSString stringWithFormat:@"bad rev %d J2OBJC_COMMA() current rev %d J2OBJC_COMMA() expected remaining %d" J2OBJC_COMMA() resultingRevision J2OBJC_COMMA() revision__ J2OBJC_COMMA() expectedAckedClientOps_] description]);
  expectedAckedClientOps_--;
  return YES;
}

- (BOOL)hasQueuedClientOps {
  return ![((id<JavaUtilList>) nil_chk(queuedClientOps_)) isEmpty];
}

- (BOOL)hasServerOp {
  return ![((id<JavaUtilList>) nil_chk(serverOps_)) isEmpty];
}

- (BOOL)hasUnacknowledgedClientOps {
  return ![((id<JavaUtilList>) nil_chk(unackedClientOps__)) isEmpty];
}

- (void)init__WithInt:(int)revision {
  NSAssert(self->revision__ == -1, [[NSString stringWithFormat:@"Already at a revision (%d) J2OBJC_COMMA() can't init at %d)" J2OBJC_COMMA() self->revision__ J2OBJC_COMMA() revision] description]);
  NSAssert(revision >= 0, [[NSString stringWithFormat:@"Initial revision must be >= 0 J2OBJC_COMMA() not %d" J2OBJC_COMMA() revision] description]);
  self->revision__ = revision;
}

- (id)peekServerOp {
  NSAssert([self hasServerOp], @"No server ops");
  return [((id<JavaUtilList>) nil_chk(serverOps_)) getWithInt:0];
}

- (id<JavaUtilList>)pushQueuedOpsToUnacked {
  NSAssert([((id<JavaUtilList>) nil_chk(unackedClientOps__)) isEmpty], [[NSString stringWithFormat:@"Queue contains unacknowledged operations: %@" J2OBJC_COMMA() unackedClientOps__] description]);
  unackedClientOps__ = [[JavaUtilLinkedList alloc] initWithJavaUtilCollection:[((id<ComGoodowRealtimeOperationTransformer>) nil_chk(transformer_)) compactWithJavaUtilList:queuedClientOps_]];
  queuedClientOps_ = [[JavaUtilLinkedList alloc] init];
  return [self unackedClientOps];
}

- (id)removeServerOp {
  NSAssert([self hasServerOp], @"No server ops");
  return [((id<JavaUtilList>) nil_chk(serverOps_)) removeWithInt:0];
}

- (int)revision {
  return revision__;
}

- (void)serverOpWithInt:(int)resultingRevision
                 withId:(id)serverOp {
  [self checkRevisionWithInt:resultingRevision];
  NSAssert(expectedAckedClientOps_ == 0, [[NSString stringWithFormat:@"server op arrived @%d while expecting %d client ops" J2OBJC_COMMA() resultingRevision J2OBJC_COMMA() expectedAckedClientOps_] description]);
  self->revision__ = resultingRevision;
  id<JavaUtilList> transformedServerOps = [[JavaUtilArrayList alloc] init];
  [((id<ComGoodowRealtimeOperationTransformer>) nil_chk(transformer_)) transformWithJavaUtilList:transformedServerOps withId:serverOp withJavaUtilList:unackedClientOps__ withInt:0 withBoolean:NO];
  if (![((id<JavaUtilList>) nil_chk(queuedClientOps_)) isEmpty]) {
    if (newClientOpSinceTransform_) {
      queuedClientOps_ = [transformer_ compactWithJavaUtilList:queuedClientOps_];
      newClientOpSinceTransform_ = NO;
    }
    ComGoodowRealtimeOperationUtilPair *pair = [transformer_ transformWithJavaUtilList:queuedClientOps_ withJavaUtilList:transformedServerOps];
    queuedClientOps_ = ((ComGoodowRealtimeOperationUtilPair *) nil_chk(pair))->first_;
    transformedServerOps = pair->second_;
  }
  [((id<JavaUtilList>) nil_chk(serverOps_)) addAllWithJavaUtilCollection:transformedServerOps];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"TQ{ %d\n  s:%@\n  exp: %d\n  u:%@\n  q:%@\n}", revision__, serverOps_, expectedAckedClientOps_, unackedClientOps__, queuedClientOps_];
}

- (id<JavaUtilList>)unackedClientOps {
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:unackedClientOps__];
}

- (int)unackedClientOpsCount {
  return [((id<JavaUtilList>) nil_chk(unackedClientOps__)) size];
}

- (void)checkRevisionWithInt:(int)resultingRevision {
  NSAssert(resultingRevision >= 1, [[NSString stringWithFormat:@"New revision %d must be >= 1" J2OBJC_COMMA() resultingRevision] description]);
  NSAssert(self->revision__ == resultingRevision - 1, [[NSString stringWithFormat:@"Revision mismatch: at %d J2OBJC_COMMA() received %d" J2OBJC_COMMA() self->revision__ J2OBJC_COMMA() resultingRevision] description]);
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeChannelOperationTransformQueue *)other {
  [super copyAllFieldsTo:other];
  other->expectedAckedClientOps_ = expectedAckedClientOps_;
  other->newClientOpSinceTransform_ = newClientOpSinceTransform_;
  other->queuedClientOps_ = queuedClientOps_;
  other->revision__ = revision__;
  other->serverOps_ = serverOps_;
  other->transformer_ = transformer_;
  other->unackedClientOps__ = unackedClientOps__;
}

@end
