/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2013 Google Inc.
 */

//
//  GTLQueryDevice.m
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   device/v1
// Description:
//   This is an API
// Classes:
//   GTLQueryDevice (7 custom class methods, 8 custom properties)

#import "GTLQueryDevice.h"

#import "GTLDeviceCollectionResponseDeviceInfo.h"
#import "GTLDeviceInfo.h"

@implementation GTLQueryDevice

@dynamic cursor, deviceInformation, deviceRegistrationID, fields, identifier,
         limit, message, timestamp;

+ (NSDictionary *)parameterNameMap {
  NSDictionary *map =
    [NSDictionary dictionaryWithObject:@"id"
                                forKey:@"identifier"];
  return map;
}

#pragma mark -
#pragma mark Service level methods
// These create a GTLQueryDevice object.

+ (id)queryForGetDeviceInfoWithIdentifier:(NSString *)identifier {
  NSString *methodName = @"device.getDeviceInfo";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLDeviceInfo class];
  return query;
}

+ (id)queryForInsertDeviceInfoWithObject:(GTLDeviceInfo *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"device.insertDeviceInfo";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLDeviceInfo class];
  return query;
}

+ (id)queryForInsertOrUpdateDeviceInfoWithDeviceRegistrationID:(NSString *)deviceRegistrationID
                                             deviceInformation:(NSString *)deviceInformation {
  NSString *methodName = @"device.insertOrUpdateDeviceInfo";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.deviceRegistrationID = deviceRegistrationID;
  query.deviceInformation = deviceInformation;
  query.expectedObjectClass = [GTLDeviceInfo class];
  return query;
}

+ (id)queryForListDeviceInfo {
  NSString *methodName = @"device.listDeviceInfo";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLDeviceCollectionResponseDeviceInfo class];
  return query;
}

+ (id)queryForRemoveDeviceInfoWithIdentifier:(NSString *)identifier {
  NSString *methodName = @"device.removeDeviceInfo";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLDeviceInfo class];
  return query;
}

+ (id)queryForSendMessageWithMessage:(NSString *)message {
  NSString *methodName = @"device.sendMessage";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.message = message;
  return query;
}

+ (id)queryForUpdateDeviceInfoWithObject:(GTLDeviceInfo *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"device.updateDeviceInfo";
  GTLQueryDevice *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLDeviceInfo class];
  return query;
}

@end
