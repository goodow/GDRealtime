//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "elemental/util/ArrayOf.h"
#include "elemental/util/ArrayOfNumber.h"
#include "elemental/util/CanCompareNumber.h"
#include "elemental/util/Collections.h"
#include "elemental/util/impl/JreArrayOfNumber.h"
#include "java/lang/Double.h"

@implementation ElementalUtilImplJreArrayOfNumber

- (id<ElementalUtilArrayOfNumber>)concatWithElementalUtilArrayOfNumber:(id<ElementalUtilArrayOfNumber>)values {
  return [[ElementalUtilImplJreArrayOfNumber alloc] initWithElementalUtilArrayOf:[((id<ElementalUtilArrayOf>) nil_chk(array_)) concatWithElementalUtilArrayOf:((ElementalUtilImplJreArrayOfNumber *) nil_chk(values))->array_]];
}

- (BOOL)containsWithDouble:(double)value {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) containsWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (double)getWithInt:(int)index {
  return [((JavaLangDouble *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) getWithInt:index])) doubleValue];
}

- (int)indexOfWithDouble:(double)value {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) indexOfWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)insertWithInt:(int)index
           withDouble:(double)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) insertWithInt:index withId:[JavaLangDouble valueOfWithDouble:value]];
}

- (BOOL)isEmpty {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) isEmpty];
}

- (BOOL)isSetWithInt:(int)index {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) getWithInt:index] != nil;
}

- (NSString *)join {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) join];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) joinWithNSString:separator];
}

- (int)length {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) length];
}

- (double)peek {
  return [((JavaLangDouble *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) peek])) doubleValue];
}

- (double)pop {
  return [((JavaLangDouble *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) pop])) doubleValue];
}

- (void)pushWithDouble:(double)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) pushWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)removeWithDouble:(double)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) removeWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)removeByIndexWithInt:(int)index {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) removeByIndexWithInt:index];
}

- (void)setWithInt:(int)index
        withDouble:(double)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) setWithInt:index withId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)setLengthWithInt:(int)length {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) setLengthWithInt:length];
}

- (double)shift {
  return [((JavaLangDouble *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) shift])) doubleValue];
}

- (void)sort {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) sortWithElementalUtilCanCompare:[[ElementalUtilImplJreArrayOfNumber_$1 alloc] init]];
}

- (void)sortWithElementalUtilCanCompareNumber:(id<ElementalUtilCanCompareNumber>)comparator {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) sortWithElementalUtilCanCompare:[[ElementalUtilImplJreArrayOfNumber_$2 alloc] initWithElementalUtilCanCompareNumber:comparator]];
}

- (id<ElementalUtilArrayOfNumber>)spliceWithInt:(int)index
                                        withInt:(int)count {
  return [[ElementalUtilImplJreArrayOfNumber alloc] initWithElementalUtilArrayOf:[((id<ElementalUtilArrayOf>) nil_chk(array_)) spliceWithInt:index withInt:count]];
}

- (void)unshiftWithDouble:(double)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) unshiftWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (id)init {
  if (self = [super init]) {
    array_ = [ElementalUtilCollections arrayOf];
  }
  return self;
}

- (id)initWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  if (self = [super init]) {
    self->array_ = array;
  }
  return self;
}

- (void)copyAllFieldsTo:(ElementalUtilImplJreArrayOfNumber *)other {
  [super copyAllFieldsTo:other];
  other->array_ = array_;
}

@end
@implementation ElementalUtilImplJreArrayOfNumber_$1

- (int)compareWithId:(JavaLangDouble *)a
              withId:(JavaLangDouble *)b {
  return a == nil ? (a == b ? 0 : -1) : [a compareToWithId:b];
}

- (id)init {
  return [super init];
}

@end
@implementation ElementalUtilImplJreArrayOfNumber_$2

- (int)compareWithId:(JavaLangDouble *)a
              withId:(JavaLangDouble *)b {
  return [((id<ElementalUtilCanCompareNumber>) nil_chk(val$comparator_)) compareWithDouble:[((JavaLangDouble *) nil_chk(a)) doubleValue] withDouble:[((JavaLangDouble *) nil_chk(b)) doubleValue]];
}

- (id)initWithElementalUtilCanCompareNumber:(id<ElementalUtilCanCompareNumber>)capture$0 {
  val$comparator_ = capture$0;
  return [super init];
}

@end
