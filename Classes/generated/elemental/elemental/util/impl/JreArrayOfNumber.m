//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/util/impl/JreArrayOfNumber.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/util/ArrayOf.h"
#import "elemental/util/ArrayOfNumber.h"
#import "elemental/util/CanCompareNumber.h"
#import "elemental/util/Collections.h"
#import "elemental/util/impl/JreArrayOfNumber.h"
#import "java/lang/Double.h"

@implementation ElementalUtilImplJreArrayOfNumber

- (id<ElementalUtilArrayOf>)array {
  return array_;
}
- (void)setArray:(id<ElementalUtilArrayOf>)array {
  JreOperatorRetainedAssign(&array_, array);
}
@synthesize array = array_;

- (id<ElementalUtilArrayOfNumber>)concatWithElementalUtilArrayOfNumber:(id<ElementalUtilArrayOfNumber>)values {
  return [[[ElementalUtilImplJreArrayOfNumber alloc] initWithElementalUtilArrayOf:((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) concatWithElementalUtilArrayOf:((ElementalUtilImplJreArrayOfNumber *) values).array])] autorelease];
}

- (BOOL)containsWithDouble:(double)value {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) containsWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (double)getWithInt:(int)index {
  return [((JavaLangDouble *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) getWithInt:index]) doubleValue];
}

- (int)indexOfWithDouble:(double)value {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) indexOfWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)insertWithInt:(int)index
           withDouble:(double)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) insertWithInt:index withId:[JavaLangDouble valueOfWithDouble:value]];
}

- (BOOL)isEmpty {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) isEmpty];
}

- (BOOL)isSetWithInt:(int)index {
  return ((JavaLangDouble *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) getWithInt:index]) != nil;
}

- (NSString *)join {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) join];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) joinWithNSString:separator];
}

- (int)length {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) length];
}

- (double)peek {
  return [((JavaLangDouble *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) peek]) doubleValue];
}

- (double)pop {
  return [((JavaLangDouble *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) pop]) doubleValue];
}

- (void)pushWithDouble:(double)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) pushWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)removeWithDouble:(double)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) removeWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)removeByIndexWithInt:(int)index {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) removeByIndexWithInt:index];
}

- (void)setWithInt:(int)index
        withDouble:(double)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) setWithInt:index withId:[JavaLangDouble valueOfWithDouble:value]];
}

- (void)setLengthWithInt:(int)length {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) setLengthWithInt:length];
}

- (double)shift {
  return [((JavaLangDouble *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) shift]) doubleValue];
}

- (void)sort {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) sortWithElementalUtilCanCompare:[[[ElementalUtilImplJreArrayOfNumber_$1 alloc] init] autorelease]];
}

- (void)sortWithElementalUtilCanCompareNumber:(id<ElementalUtilCanCompareNumber>)comparator {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) sortWithElementalUtilCanCompare:[[[ElementalUtilImplJreArrayOfNumber_$2 alloc] initWithElementalUtilCanCompareNumber:comparator] autorelease]];
}

- (id<ElementalUtilArrayOfNumber>)spliceWithInt:(int)index
                                        withInt:(int)count {
  return [[[ElementalUtilImplJreArrayOfNumber alloc] initWithElementalUtilArrayOf:((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) spliceWithInt:index withInt:count])] autorelease];
}

- (void)unshiftWithDouble:(double)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) unshiftWithId:[JavaLangDouble valueOfWithDouble:value]];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&array_, ((id<ElementalUtilArrayOf>) [ElementalUtilCollections arrayOf]));
  }
  return self;
}

- (id)initWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  if ((self = [super init])) {
    self.array = array;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&array_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOfNumber *typedCopy = (ElementalUtilImplJreArrayOfNumber *) copy;
  typedCopy.array = array_;
}

@end
@implementation ElementalUtilImplJreArrayOfNumber_$1

- (int)compareWithId:(JavaLangDouble *)a
              withId:(JavaLangDouble *)b {
  return a == nil ? (a == b ? 0 : -1) : [((JavaLangDouble *) NIL_CHK(a)) compareToWithId:b];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ElementalUtilImplJreArrayOfNumber_$2

- (id<ElementalUtilCanCompareNumber>)val$comparator {
  return val$comparator_;
}
- (void)setVal$comparator:(id<ElementalUtilCanCompareNumber>)val$comparator {
  JreOperatorRetainedAssign(&val$comparator_, val$comparator);
}
@synthesize val$comparator = val$comparator_;

- (int)compareWithId:(JavaLangDouble *)a
              withId:(JavaLangDouble *)b {
  return [((id<ElementalUtilCanCompareNumber>) NIL_CHK(val$comparator_)) compareWithDouble:[((JavaLangDouble *) NIL_CHK(a)) doubleValue] withDouble:[((JavaLangDouble *) NIL_CHK(b)) doubleValue]];
}

- (id)initWithElementalUtilCanCompareNumber:(id<ElementalUtilCanCompareNumber>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$comparator_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$comparator_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOfNumber_$2 *typedCopy = (ElementalUtilImplJreArrayOfNumber_$2 *) copy;
  typedCopy.val$comparator = val$comparator_;
}

@end
