//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "elemental/util/ArrayOf.h"
#include "elemental/util/ArrayOfInt.h"
#include "elemental/util/CanCompareInt.h"
#include "elemental/util/Collections.h"
#include "elemental/util/impl/JreArrayOfInt.h"
#include "java/lang/Integer.h"

@implementation ElementalUtilImplJreArrayOfInt

- (id<ElementalUtilArrayOfInt>)concatWithElementalUtilArrayOfInt:(id<ElementalUtilArrayOfInt>)values {
  return [[ElementalUtilImplJreArrayOfInt alloc] initWithElementalUtilArrayOf:[((id<ElementalUtilArrayOf>) nil_chk(array_)) concatWithElementalUtilArrayOf:((ElementalUtilImplJreArrayOfInt *) nil_chk(values))->array_]];
}

- (BOOL)containsWithInt:(int)value {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) containsWithId:[JavaLangInteger valueOfWithInt:value]];
}

- (int)getWithInt:(int)index {
  return [((JavaLangInteger *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) getWithInt:index])) intValue];
}

- (int)indexOfWithInt:(int)value {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) indexOfWithId:[JavaLangInteger valueOfWithInt:value]];
}

- (void)insertWithInt:(int)index
              withInt:(int)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) insertWithInt:index withId:[JavaLangInteger valueOfWithInt:value]];
}

- (BOOL)isEmpty {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) isEmpty];
}

- (BOOL)isSetWithInt:(int)index {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) getWithInt:index] != nil;
}

- (NSString *)join {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) join];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) joinWithNSString:separator];
}

- (int)length {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) length];
}

- (int)peek {
  return [((JavaLangInteger *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) peek])) intValue];
}

- (int)pop {
  return [((JavaLangInteger *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) pop])) intValue];
}

- (void)pushWithInt:(int)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) pushWithId:[JavaLangInteger valueOfWithInt:value]];
}

- (void)removeWithInt:(int)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) removeWithId:[JavaLangInteger valueOfWithInt:value]];
}

- (void)removeByIndexWithInt:(int)index {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) removeByIndexWithInt:index];
}

- (void)setWithInt:(int)index
           withInt:(int)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) setWithInt:index withId:[JavaLangInteger valueOfWithInt:value]];
}

- (void)setLengthWithInt:(int)length {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) setLengthWithInt:length];
}

- (int)shift {
  return [((JavaLangInteger *) nil_chk([((id<ElementalUtilArrayOf>) nil_chk(array_)) shift])) intValue];
}

- (void)sort {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) sortWithElementalUtilCanCompare:[[ElementalUtilImplJreArrayOfInt_$1 alloc] init]];
}

- (void)sortWithElementalUtilCanCompareInt:(id<ElementalUtilCanCompareInt>)comparator {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) sortWithElementalUtilCanCompare:[[ElementalUtilImplJreArrayOfInt_$2 alloc] initWithElementalUtilCanCompareInt:comparator]];
}

- (id<ElementalUtilArrayOfInt>)spliceWithInt:(int)index
                                     withInt:(int)count {
  return [[ElementalUtilImplJreArrayOfInt alloc] initWithElementalUtilArrayOf:[((id<ElementalUtilArrayOf>) nil_chk(array_)) spliceWithInt:index withInt:count]];
}

- (void)unshiftWithInt:(int)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) unshiftWithId:[JavaLangInteger valueOfWithInt:value]];
}

- (id)init {
  if (self = [super init]) {
    array_ = [ElementalUtilCollections arrayOf];
  }
  return self;
}

- (id)initWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  if (self = [super init]) {
    self->array_ = array;
  }
  return self;
}

- (void)copyAllFieldsTo:(ElementalUtilImplJreArrayOfInt *)other {
  [super copyAllFieldsTo:other];
  other->array_ = array_;
}

@end
@implementation ElementalUtilImplJreArrayOfInt_$1

- (int)compareWithId:(JavaLangInteger *)a
              withId:(JavaLangInteger *)b {
  return a == nil ? (a == b ? 0 : -1) : [a compareToWithId:b];
}

- (id)init {
  return [super init];
}

@end
@implementation ElementalUtilImplJreArrayOfInt_$2

- (int)compareWithId:(JavaLangInteger *)a
              withId:(JavaLangInteger *)b {
  return [((id<ElementalUtilCanCompareInt>) nil_chk(val$comparator_)) compareWithInt:[((JavaLangInteger *) nil_chk(a)) intValue] withInt:[((JavaLangInteger *) nil_chk(b)) intValue]];
}

- (id)initWithElementalUtilCanCompareInt:(id<ElementalUtilCanCompareInt>)capture$0 {
  val$comparator_ = capture$0;
  return [super init];
}

@end
