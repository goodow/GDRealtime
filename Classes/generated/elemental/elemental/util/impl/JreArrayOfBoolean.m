//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/util/impl/JreArrayOfBoolean.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/util/ArrayOf.h"
#import "elemental/util/ArrayOfBoolean.h"
#import "elemental/util/Collections.h"
#import "elemental/util/impl/JreArrayOfBoolean.h"
#import "java/lang/Boolean.h"

@implementation ElementalUtilImplJreArrayOfBoolean

- (id<ElementalUtilArrayOf>)array {
  return array_;
}
- (void)setArray:(id<ElementalUtilArrayOf>)array {
  JreOperatorRetainedAssign(&array_, array);
}
@synthesize array = array_;

- (id<ElementalUtilArrayOfBoolean>)concatWithElementalUtilArrayOfBoolean:(id<ElementalUtilArrayOfBoolean>)values {
  return [[[ElementalUtilImplJreArrayOfBoolean alloc] initWithElementalUtilArrayOf:((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) concatWithElementalUtilArrayOf:((ElementalUtilImplJreArrayOfBoolean *) values).array])] autorelease];
}

- (BOOL)containsWithBOOL:(BOOL)value {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) containsWithId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (BOOL)getWithInt:(int)index {
  return [((JavaLangBoolean *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) getWithInt:index]) booleanValue];
}

- (int)indexOfWithBOOL:(BOOL)value {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) indexOfWithId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (void)insertWithInt:(int)index
             withBOOL:(BOOL)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) insertWithInt:index withId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (BOOL)isEmpty {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) isEmpty];
}

- (BOOL)isSetWithInt:(int)index {
  return ((JavaLangBoolean *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) getWithInt:index]) != nil;
}

- (NSString *)join {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) join];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) joinWithNSString:separator];
}

- (int)length {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) length];
}

- (BOOL)peek {
  return [((JavaLangBoolean *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) peek]) booleanValue];
}

- (BOOL)pop {
  return [((JavaLangBoolean *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) pop]) booleanValue];
}

- (void)pushWithBOOL:(BOOL)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) pushWithId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (void)removeWithBOOL:(BOOL)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) removeWithId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (void)removeByIndexWithInt:(int)index {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) removeByIndexWithInt:index];
}

- (void)setWithInt:(int)index
          withBOOL:(BOOL)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) setWithInt:index withId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (void)setLengthWithInt:(int)length {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) setLengthWithInt:length];
}

- (BOOL)shift {
  return [((JavaLangBoolean *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) shift]) booleanValue];
}

- (id<ElementalUtilArrayOfBoolean>)spliceWithInt:(int)index
                                         withInt:(int)count {
  return [[[ElementalUtilImplJreArrayOfBoolean alloc] initWithElementalUtilArrayOf:((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) spliceWithInt:index withInt:count])] autorelease];
}

- (void)unshiftWithBOOL:(BOOL)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) unshiftWithId:[JavaLangBoolean valueOfWithBOOL:value]];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&array_, ((id<ElementalUtilArrayOf>) [ElementalUtilCollections arrayOf]));
  }
  return self;
}

- (id)initWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  if ((self = [super init])) {
    self.array = array;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&array_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOfBoolean *typedCopy = (ElementalUtilImplJreArrayOfBoolean *) copy;
  typedCopy.array = array_;
}

@end
