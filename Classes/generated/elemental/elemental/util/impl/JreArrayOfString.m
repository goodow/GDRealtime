//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/util/impl/JreArrayOfString.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/util/ArrayOf.h"
#import "elemental/util/ArrayOfString.h"
#import "elemental/util/CanCompareString.h"
#import "elemental/util/Collections.h"
#import "elemental/util/impl/JreArrayOf.h"
#import "elemental/util/impl/JreArrayOfString.h"
#import "java/util/ArrayList.h"

@implementation ElementalUtilImplJreArrayOfString

- (id<ElementalUtilArrayOf>)array {
  return array_;
}
- (void)setArray:(id<ElementalUtilArrayOf>)array {
  JreOperatorRetainedAssign(&array_, array);
}
@synthesize array = array_;

- (id)initWithJavaUtilArrayList:(JavaUtilArrayList *)array {
  return [self initElementalUtilImplJreArrayOfStringWithElementalUtilArrayOf:([[[ElementalUtilImplJreArrayOf alloc] initWithJavaUtilArrayList:array] autorelease])];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&array_, ((id<ElementalUtilArrayOf>) [ElementalUtilCollections arrayOf]));
  }
  return self;
}

- (id)initElementalUtilImplJreArrayOfStringWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  if ((self = [super init])) {
    self.array = array;
  }
  return self;
}

- (id)initWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  return [self initElementalUtilImplJreArrayOfStringWithElementalUtilArrayOf:array];
}

- (id<ElementalUtilArrayOfString>)concatWithElementalUtilArrayOfString:(id<ElementalUtilArrayOfString>)values {
  return [[[ElementalUtilImplJreArrayOfString alloc] initWithElementalUtilArrayOf:((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) concatWithElementalUtilArrayOf:((ElementalUtilImplJreArrayOfString *) values).array])] autorelease];
}

- (BOOL)containsWithNSString:(NSString *)value {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) containsWithId:value];
}

- (NSString *)getWithInt:(int)index {
  return ((NSString *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) getWithInt:index]);
}

- (int)indexOfWithNSString:(NSString *)value {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) indexOfWithId:value];
}

- (void)insertWithInt:(int)index
         withNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) insertWithInt:index withId:value];
}

- (BOOL)isEmpty {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) isEmpty];
}

- (NSString *)join {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) join];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) joinWithNSString:separator];
}

- (int)length {
  return [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) length];
}

- (NSString *)peek {
  return ((NSString *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) peek]);
}

- (NSString *)pop {
  return ((NSString *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) pop]);
}

- (void)pushWithNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) pushWithId:value];
}

- (void)removeWithNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) removeWithId:value];
}

- (void)removeByIndexWithInt:(int)index {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) removeByIndexWithInt:index];
}

- (void)setWithInt:(int)index
      withNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) setWithInt:index withId:value];
}

- (void)setLengthWithInt:(int)length {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) setLengthWithInt:length];
}

- (NSString *)shift {
  return ((NSString *) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) shift]);
}

- (void)sort {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) sortWithElementalUtilCanCompare:[[[ElementalUtilImplJreArrayOfString_$1 alloc] init] autorelease]];
}

- (void)sortWithElementalUtilCanCompareString:(id<ElementalUtilCanCompareString>)comparator {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) sortWithElementalUtilCanCompare:[[[ElementalUtilImplJreArrayOfString_$2 alloc] initWithElementalUtilCanCompareString:comparator] autorelease]];
}

- (id<ElementalUtilArrayOfString>)spliceWithInt:(int)index
                                        withInt:(int)count {
  return [[[ElementalUtilImplJreArrayOfString alloc] initWithElementalUtilArrayOf:((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) spliceWithInt:index withInt:count])] autorelease];
}

- (void)unshiftWithNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) NIL_CHK(array_)) unshiftWithId:value];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&array_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOfString *typedCopy = (ElementalUtilImplJreArrayOfString *) copy;
  typedCopy.array = array_;
}

@end
@implementation ElementalUtilImplJreArrayOfString_$1

- (int)compareWithId:(NSString *)a
              withId:(NSString *)b {
  return a == nil ? (a == b ? 0 : -1) : [NIL_CHK(a) compareToWithId:b];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ElementalUtilImplJreArrayOfString_$2

- (id<ElementalUtilCanCompareString>)val$comparator {
  return val$comparator_;
}
- (void)setVal$comparator:(id<ElementalUtilCanCompareString>)val$comparator {
  JreOperatorRetainedAssign(&val$comparator_, val$comparator);
}
@synthesize val$comparator = val$comparator_;

- (int)compareWithId:(NSString *)a
              withId:(NSString *)b {
  return [((id<ElementalUtilCanCompareString>) NIL_CHK(val$comparator_)) compareWithNSString:a withNSString:b];
}

- (id)initWithElementalUtilCanCompareString:(id<ElementalUtilCanCompareString>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$comparator_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$comparator_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOfString_$2 *typedCopy = (ElementalUtilImplJreArrayOfString_$2 *) copy;
  typedCopy.val$comparator = val$comparator_;
}

@end
