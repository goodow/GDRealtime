//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "elemental/util/ArrayOf.h"
#include "elemental/util/ArrayOfString.h"
#include "elemental/util/CanCompareString.h"
#include "elemental/util/Collections.h"
#include "elemental/util/impl/JreArrayOf.h"
#include "elemental/util/impl/JreArrayOfString.h"
#include "java/util/ArrayList.h"

@implementation ElementalUtilImplJreArrayOfString

- (id)initWithJavaUtilArrayList:(JavaUtilArrayList *)array {
  return [self initElementalUtilImplJreArrayOfStringWithElementalUtilArrayOf:([[ElementalUtilImplJreArrayOf alloc] initWithJavaUtilArrayList:array])];
}

- (id)init {
  if (self = [super init]) {
    array_ = [ElementalUtilCollections arrayOf];
  }
  return self;
}

- (id)initElementalUtilImplJreArrayOfStringWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  if (self = [super init]) {
    self->array_ = array;
  }
  return self;
}

- (id)initWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)array {
  return [self initElementalUtilImplJreArrayOfStringWithElementalUtilArrayOf:array];
}

- (id<ElementalUtilArrayOfString>)concatWithElementalUtilArrayOfString:(id<ElementalUtilArrayOfString>)values {
  return [[ElementalUtilImplJreArrayOfString alloc] initWithElementalUtilArrayOf:[((id<ElementalUtilArrayOf>) nil_chk(array_)) concatWithElementalUtilArrayOf:((ElementalUtilImplJreArrayOfString *) nil_chk(values))->array_]];
}

- (BOOL)containsWithNSString:(NSString *)value {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) containsWithId:value];
}

- (NSString *)getWithInt:(int)index {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) getWithInt:index];
}

- (int)indexOfWithNSString:(NSString *)value {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) indexOfWithId:value];
}

- (void)insertWithInt:(int)index
         withNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) insertWithInt:index withId:value];
}

- (BOOL)isEmpty {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) isEmpty];
}

- (NSString *)join {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) join];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) joinWithNSString:separator];
}

- (int)length {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) length];
}

- (NSString *)peek {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) peek];
}

- (NSString *)pop {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) pop];
}

- (void)pushWithNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) pushWithId:value];
}

- (void)removeWithNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) removeWithId:value];
}

- (void)removeByIndexWithInt:(int)index {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) removeByIndexWithInt:index];
}

- (void)setWithInt:(int)index
      withNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) setWithInt:index withId:value];
}

- (void)setLengthWithInt:(int)length {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) setLengthWithInt:length];
}

- (NSString *)shift {
  return [((id<ElementalUtilArrayOf>) nil_chk(array_)) shift];
}

- (void)sort {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) sortWithElementalUtilCanCompare:[[ElementalUtilImplJreArrayOfString_$1 alloc] init]];
}

- (void)sortWithElementalUtilCanCompareString:(id<ElementalUtilCanCompareString>)comparator {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) sortWithElementalUtilCanCompare:[[ElementalUtilImplJreArrayOfString_$2 alloc] initWithElementalUtilCanCompareString:comparator]];
}

- (id<ElementalUtilArrayOfString>)spliceWithInt:(int)index
                                        withInt:(int)count {
  return [[ElementalUtilImplJreArrayOfString alloc] initWithElementalUtilArrayOf:[((id<ElementalUtilArrayOf>) nil_chk(array_)) spliceWithInt:index withInt:count]];
}

- (void)unshiftWithNSString:(NSString *)value {
  [((id<ElementalUtilArrayOf>) nil_chk(array_)) unshiftWithId:value];
}

- (void)copyAllFieldsTo:(ElementalUtilImplJreArrayOfString *)other {
  [super copyAllFieldsTo:other];
  other->array_ = array_;
}

@end
@implementation ElementalUtilImplJreArrayOfString_$1

- (int)compareWithId:(NSString *)a
              withId:(NSString *)b {
  return a == nil ? (a == b ? 0 : -1) : [a compareToWithId:b];
}

- (id)init {
  return [super init];
}

@end
@implementation ElementalUtilImplJreArrayOfString_$2

- (int)compareWithId:(NSString *)a
              withId:(NSString *)b {
  return [((id<ElementalUtilCanCompareString>) nil_chk(val$comparator_)) compareWithNSString:a withNSString:b];
}

- (id)initWithElementalUtilCanCompareString:(id<ElementalUtilCanCompareString>)capture$0 {
  val$comparator_ = capture$0;
  return [super init];
}

@end
