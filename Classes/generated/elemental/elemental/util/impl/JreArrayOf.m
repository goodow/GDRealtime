//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "elemental/util/ArrayOf.h"
#include "elemental/util/CanCompare.h"
#include "elemental/util/impl/JreArrayOf.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@implementation ElementalUtilImplJreArrayOf

- (id)init {
  if (self = [super init]) {
    array_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)initWithJavaUtilArrayList:(JavaUtilArrayList *)array {
  if (self = [super init]) {
    self->array_ = array;
  }
  return self;
}

- (id<ElementalUtilArrayOf>)concatWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)values {
  NSAssert([(id) values isKindOfClass:[ElementalUtilImplJreArrayOf class]], @"src/elemental/util/impl/JreArrayOf.java:46 condition failed: assert values instanceof JreArrayOf;");
  JavaUtilArrayList *toReturn = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:array_];
  [toReturn addAllWithJavaUtilCollection:((ElementalUtilImplJreArrayOf *) nil_chk(values))->array_];
  return [[ElementalUtilImplJreArrayOf alloc] initWithJavaUtilArrayList:toReturn];
}

- (BOOL)containsWithId:(id)value {
  return [((JavaUtilArrayList *) nil_chk(array_)) containsWithId:value];
}

- (id)getWithInt:(int)index {
  return index >= [self length] ? nil : [((JavaUtilArrayList *) nil_chk(array_)) getWithInt:index];
}

- (int)indexOfWithId:(id)value {
  return [((JavaUtilArrayList *) nil_chk(array_)) indexOfWithId:value];
}

- (void)insertWithInt:(int)index
               withId:(id)value {
  if (index >= [self length]) {
    [((JavaUtilArrayList *) nil_chk(array_)) addWithId:value];
  }
  else {
    if (index < 0) {
      index = index + [self length];
      if (index < 0) {
        index = 0;
      }
    }
    [((JavaUtilArrayList *) nil_chk(array_)) addWithInt:index withId:value];
  }
}

- (BOOL)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(array_)) isEmpty];
}

- (NSString *)join {
  return [self joinWithNSString:@","];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  JavaLangStringBuilder *toReturn = [[JavaLangStringBuilder alloc] init];
  BOOL first = YES;
  for (id __strong val in array_) {
    if (first) {
      first = NO;
    }
    else {
      (void) [toReturn appendWithNSString:separator];
    }
    (void) [toReturn appendWithNSString:val == nil ? @"" : [ElementalUtilImplJreArrayOf toStringWithTrimWithId:val]];
  }
  return [toReturn description];
}

- (int)length {
  return [((JavaUtilArrayList *) nil_chk(array_)) size];
}

- (id)peek {
  return [self isEmpty] ? nil : [array_ getWithInt:[((JavaUtilArrayList *) nil_chk(array_)) size] - 1];
}

- (id)pop {
  return [self isEmpty] ? nil : [array_ removeWithInt:[((JavaUtilArrayList *) nil_chk(array_)) size] - 1];
}

- (void)pushWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(array_)) addWithId:value];
}

- (void)removeWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(array_)) removeWithId:value];
}

- (void)removeByIndexWithInt:(int)index {
  if (index < [self length]) {
    (void) [((JavaUtilArrayList *) nil_chk(array_)) removeWithInt:index];
  }
}

- (void)setWithInt:(int)index
            withId:(id)value {
  [self ensureLengthWithInt:index];
  (void) [((JavaUtilArrayList *) nil_chk(array_)) setWithInt:index withId:value];
}

- (void)setLengthWithInt:(int)length {
  if (length > [self length]) {
    for (int i = [self length]; i < length; i++) {
      [((JavaUtilArrayList *) nil_chk(array_)) addWithId:nil];
    }
  }
  else if (length < [self length]) {
    for (int i = [self length]; i > length; i--) {
      (void) [((JavaUtilArrayList *) nil_chk(array_)) removeWithInt:i - 1];
    }
  }
}

- (id)shift {
  return [self isEmpty] ? nil : [((JavaUtilArrayList *) nil_chk(array_)) removeWithInt:0];
}

- (void)sortWithElementalUtilCanCompare:(id<ElementalUtilCanCompare>)comparator {
  [JavaUtilCollections sortWithJavaUtilList:array_ withJavaUtilComparator:[[ElementalUtilImplJreArrayOf_$1 alloc] initWithElementalUtilCanCompare:comparator]];
}

- (id<ElementalUtilArrayOf>)spliceWithInt:(int)index
                                  withInt:(int)count {
  JavaUtilArrayList *toReturn = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((JavaUtilArrayList *) nil_chk(array_)) subListWithInt:index withInt:index + count]];
  for (int i = 0; i < count && ![self isEmpty]; i++) {
    (void) [array_ removeWithInt:index];
  }
  return [[ElementalUtilImplJreArrayOf alloc] initWithJavaUtilArrayList:toReturn];
}

- (void)unshiftWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(array_)) addWithInt:0 withId:value];
}

- (void)ensureLengthWithInt:(int)index {
  if (index >= [self length]) {
    [self setLengthWithInt:index + 1];
  }
}

+ (NSString *)toStringWithTrimWithId:(id)obj {
  if ([obj isKindOfClass:[NSNumber class]]) {
    NSString *numberStr = [nil_chk(obj) description];
    if ([((NSString *) nil_chk(numberStr)) hasSuffix:@".0"]) {
      numberStr = [numberStr substring:0 endIndex:[numberStr length] - 2];
    }
    return numberStr;
  }
  return [nil_chk(obj) description];
}

- (void)copyAllFieldsTo:(ElementalUtilImplJreArrayOf *)other {
  [super copyAllFieldsTo:other];
  other->array_ = array_;
}

@end
@implementation ElementalUtilImplJreArrayOf_$1

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  return [((id<ElementalUtilCanCompare>) nil_chk(val$comparator_)) compareWithId:o1 withId:o2];
}

- (id)initWithElementalUtilCanCompare:(id<ElementalUtilCanCompare>)capture$0 {
  val$comparator_ = capture$0;
  return [super init];
}

@end
