//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/util/impl/JreArrayOf.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "elemental/util/ArrayOf.h"
#import "elemental/util/CanCompare.h"
#import "elemental/util/impl/JreArrayOf.h"
#import "java/lang/StringBuilder.h"
#import "java/util/ArrayList.h"
#import "java/util/Collections.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation ElementalUtilImplJreArrayOf

- (JavaUtilArrayList *)array {
  return array_;
}
- (void)setArray:(JavaUtilArrayList *)array {
  JreOperatorRetainedAssign(&array_, array);
}
@synthesize array = array_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&array_, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  return self;
}

- (id)initWithJavaUtilArrayList:(JavaUtilArrayList *)array {
  if ((self = [super init])) {
    self.array = array;
  }
  return self;
}

- (id<ElementalUtilArrayOf>)concatWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)values {
  NSAssert([(id) values isKindOfClass:[ElementalUtilImplJreArrayOf class]], @"src/elemental/util/impl/JreArrayOf.java:46 condition failed: assert values instanceof JreArrayOf;");
  JavaUtilArrayList *toReturn = [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:array_] autorelease];
  [((JavaUtilArrayList *) NIL_CHK(toReturn)) addAllWithJavaUtilCollection:((ElementalUtilImplJreArrayOf *) values).array];
  return [[[ElementalUtilImplJreArrayOf alloc] initWithJavaUtilArrayList:toReturn] autorelease];
}

- (BOOL)containsWithId:(id)value {
  return [((JavaUtilArrayList *) NIL_CHK(array_)) containsWithId:value];
}

- (id)getWithInt:(int)index {
  return index >= [self length] ? nil : [((JavaUtilArrayList *) NIL_CHK(array_)) getWithInt:index];
}

- (int)indexOfWithId:(id)value {
  return [((JavaUtilArrayList *) NIL_CHK(array_)) indexOfWithId:value];
}

- (void)insertWithInt:(int)index
               withId:(id)value {
  if (index >= [self length]) {
    [((JavaUtilArrayList *) NIL_CHK(array_)) addWithId:value];
  }
  else {
    if (index < 0) {
      index = index + [self length];
      if (index < 0) {
        index = 0;
      }
    }
    [((JavaUtilArrayList *) NIL_CHK(array_)) addWithInt:index withId:value];
  }
}

- (BOOL)isEmpty {
  return [((JavaUtilArrayList *) NIL_CHK(array_)) isEmpty];
}

- (NSString *)join {
  return [self joinWithNSString:@","];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  JavaLangStringBuilder *toReturn = [[[JavaLangStringBuilder alloc] init] autorelease];
  BOOL first = YES;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((JavaUtilArrayList *) NIL_CHK(array_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id val = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
      if (first) {
        first = NO;
      }
      else {
        [((JavaLangStringBuilder *) NIL_CHK(toReturn)) appendWithNSString:separator];
      }
      [((JavaLangStringBuilder *) NIL_CHK(toReturn)) appendWithNSString:val == nil ? @"" : [ElementalUtilImplJreArrayOf toStringWithTrimWithId:val]];
    }
  }
  return [((JavaLangStringBuilder *) NIL_CHK(toReturn)) description];
}

- (int)length {
  return [((JavaUtilArrayList *) NIL_CHK(array_)) size];
}

- (id)peek {
  return [self isEmpty] ? nil : [((JavaUtilArrayList *) NIL_CHK(array_)) getWithInt:[((JavaUtilArrayList *) NIL_CHK(array_)) size] - 1];
}

- (id)pop {
  return [self isEmpty] ? nil : [((JavaUtilArrayList *) NIL_CHK(array_)) removeWithInt:[((JavaUtilArrayList *) NIL_CHK(array_)) size] - 1];
}

- (void)pushWithId:(id)value {
  [((JavaUtilArrayList *) NIL_CHK(array_)) addWithId:value];
}

- (void)removeWithId:(id)value {
  [((JavaUtilArrayList *) NIL_CHK(array_)) removeWithId:value];
}

- (void)removeByIndexWithInt:(int)index {
  if (index < [self length]) {
    [((JavaUtilArrayList *) NIL_CHK(array_)) removeWithInt:index];
  }
}

- (void)setWithInt:(int)index
            withId:(id)value {
  [self ensureLengthWithInt:index];
  [((JavaUtilArrayList *) NIL_CHK(array_)) setWithInt:index withId:value];
}

- (void)setLengthWithInt:(int)length {
  if (length > [self length]) {
    for (int i = [self length]; i < length; i++) {
      [((JavaUtilArrayList *) NIL_CHK(array_)) addWithId:nil];
    }
  }
  else if (length < [self length]) {
    for (int i = [self length]; i > length; i--) {
      [((JavaUtilArrayList *) NIL_CHK(array_)) removeWithInt:i - 1];
    }
  }
}

- (id)shift {
  return [self isEmpty] ? nil : [((JavaUtilArrayList *) NIL_CHK(array_)) removeWithInt:0];
}

- (void)sortWithElementalUtilCanCompare:(id<ElementalUtilCanCompare>)comparator {
  [JavaUtilCollections sortWithJavaUtilList:array_ withJavaUtilComparator:[[[ElementalUtilImplJreArrayOf_$1 alloc] initWithElementalUtilCanCompare:comparator] autorelease]];
}

- (id<ElementalUtilArrayOf>)spliceWithInt:(int)index
                                  withInt:(int)count {
  JavaUtilArrayList *toReturn = [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:((id<JavaUtilList>) [((JavaUtilArrayList *) NIL_CHK(array_)) subListWithInt:index withInt:index + count])] autorelease];
  for (int i = 0; i < count && ![self isEmpty]; i++) {
    [((JavaUtilArrayList *) NIL_CHK(array_)) removeWithInt:index];
  }
  return [[[ElementalUtilImplJreArrayOf alloc] initWithJavaUtilArrayList:toReturn] autorelease];
}

- (void)unshiftWithId:(id)value {
  [((JavaUtilArrayList *) NIL_CHK(array_)) addWithInt:0 withId:value];
}

- (void)ensureLengthWithInt:(int)index {
  if (index >= [self length]) {
    [self setLengthWithInt:index + 1];
  }
}

+ (NSString *)toStringWithTrimWithId:(id)obj {
  if ([obj isKindOfClass:[NSNumber class]]) {
    NSString *numberStr = [NIL_CHK(obj) description];
    if ([NIL_CHK(numberStr) hasSuffix:@".0"]) {
      numberStr = [NIL_CHK(numberStr) substring:0 endIndex:[NIL_CHK(numberStr) length] - 2];
    }
    return numberStr;
  }
  return [NIL_CHK(obj) description];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&array_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOf *typedCopy = (ElementalUtilImplJreArrayOf *) copy;
  typedCopy.array = array_;
}

@end
@implementation ElementalUtilImplJreArrayOf_$1

- (id<ElementalUtilCanCompare>)val$comparator {
  return val$comparator_;
}
- (void)setVal$comparator:(id<ElementalUtilCanCompare>)val$comparator {
  JreOperatorRetainedAssign(&val$comparator_, val$comparator);
}
@synthesize val$comparator = val$comparator_;

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  return [((id<ElementalUtilCanCompare>) NIL_CHK(val$comparator_)) compareWithId:o1 withId:o2];
}

- (id)initWithElementalUtilCanCompare:(id<ElementalUtilCanCompare>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$comparator_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$comparator_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalUtilImplJreArrayOf_$1 *typedCopy = (ElementalUtilImplJreArrayOf_$1 *) copy;
  typedCopy.val$comparator = val$comparator_;
}

@end
