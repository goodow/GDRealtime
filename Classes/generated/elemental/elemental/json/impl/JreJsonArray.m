//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonBoolean.h"
#include "elemental/json/JsonFactory.h"
#include "elemental/json/JsonNull.h"
#include "elemental/json/JsonNumber.h"
#include "elemental/json/JsonObject.h"
#include "elemental/json/JsonString.h"
#include "elemental/json/JsonType.h"
#include "elemental/json/JsonValue.h"
#include "elemental/json/impl/JreJsonArray.h"
#include "elemental/json/impl/JreJsonValue.h"
#include "elemental/json/impl/JsonArrayContext.h"
#include "elemental/json/impl/JsonContext.h"
#include "elemental/json/impl/JsonUtil.h"
#include "elemental/json/impl/JsonVisitor.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation ElementalJsonImplJreJsonArray

- (id)initWithGDRJsonFactory:(id<GDRJsonFactory>)factory {
  if (self = [super init]) {
    arrayValues_ = [[JavaUtilArrayList alloc] init];
    self->factory_ = factory;
  }
  return self;
}

- (BOOL)asBoolean {
  return YES;
}

- (double)asNumber {
  switch ([self length]) {
    case 0:
    return 0;
    case 1:
    return [((id<GDRJsonValue>) nil_chk([self getWithInt:0])) asNumber];
    default:
    return JavaLangDouble_NaN;
  }
}

- (NSString *)asString {
  JavaLangStringBuilder *toReturn = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < [self length]; i++) {
    if (i > 0) {
      (void) [toReturn appendWithNSString:@", "];
    }
    (void) [toReturn appendWithNSString:[((id<GDRJsonValue>) nil_chk([self getWithInt:i])) asString]];
  }
  return [toReturn description];
}

- (id<GDRJsonValue>)getWithInt:(int)index {
  return [((JavaUtilArrayList *) nil_chk(arrayValues_)) getWithInt:index];
}

- (id<GDRJsonArray>)getArrayWithInt:(int)index {
  return (id<GDRJsonArray>) check_protocol_cast([self getWithInt:index], @protocol(GDRJsonArray));
}

- (BOOL)getBooleanWithInt:(int)index {
  return [((id<GDRJsonBoolean>) nil_chk([self getWithInt:index])) getBoolean];
}

- (double)getNumberWithInt:(int)index {
  return [((id<GDRJsonNumber>) nil_chk([self getWithInt:index])) getNumber];
}

- (id<GDRJsonObject>)getObjectWithInt:(int)index {
  return (id<GDRJsonObject>) check_protocol_cast([self getWithInt:index], @protocol(GDRJsonObject));
}

- (id)getObject {
  id<JavaUtilList> objs = [[JavaUtilArrayList alloc] init];
  for (id<GDRJsonValue> __strong val in arrayValues_) {
    [objs addWithId:[((ElementalJsonImplJreJsonValue *) nil_chk(val)) getObject]];
  }
  return objs;
}

- (NSString *)getStringWithInt:(int)index {
  return [((id<GDRJsonString>) nil_chk([self getWithInt:index])) getString];
}

- (GDRJsonTypeEnum *)getType {
  return [GDRJsonTypeEnum ARRAY];
}

- (BOOL)jsEqualsWithGDRJsonValue:(id<GDRJsonValue>)value {
  return [nil_chk([self getObject]) isEqual:[((ElementalJsonImplJreJsonValue *) nil_chk(value)) getObject]];
}

- (int)length {
  return [((JavaUtilArrayList *) nil_chk(arrayValues_)) size];
}

- (void)removeWithInt:(int)index {
  (void) [((JavaUtilArrayList *) nil_chk(arrayValues_)) removeWithInt:index];
}

- (void)setWithInt:(int)index
  withGDRJsonValue:(id<GDRJsonValue>)value {
  if (value == nil) {
    value = [((id<GDRJsonFactory>) nil_chk(factory_)) createNull];
  }
  if (index == [((JavaUtilArrayList *) nil_chk(arrayValues_)) size]) {
    [arrayValues_ addWithInt:index withId:value];
  }
  else {
    (void) [arrayValues_ setWithInt:index withId:value];
  }
}

- (void)setWithInt:(int)index
      withNSString:(NSString *)string {
  [self setWithInt:index withGDRJsonValue:[((id<GDRJsonFactory>) nil_chk(factory_)) createWithNSString:string]];
}

- (void)setWithInt:(int)index
        withDouble:(double)number {
  [self setWithInt:index withGDRJsonValue:[((id<GDRJsonFactory>) nil_chk(factory_)) createWithDouble:number]];
}

- (void)setWithInt:(int)index
       withBoolean:(BOOL)bool_ {
  [self setWithInt:index withGDRJsonValue:[((id<GDRJsonFactory>) nil_chk(factory_)) createWithBoolean:bool_]];
}

- (NSString *)toJson {
  return [ElementalJsonImplJsonUtil stringifyWithGDRJsonValue:self];
}

- (void)traverseWithElementalJsonImplJsonVisitor:(ElementalJsonImplJsonVisitor *)visitor
                withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if ([((ElementalJsonImplJsonVisitor *) nil_chk(visitor)) visitWithGDRJsonArray:self withElementalJsonImplJsonContext:ctx]) {
    ElementalJsonImplJsonArrayContext *arrayCtx = [[ElementalJsonImplJsonArrayContext alloc] initWithGDRJsonArray:self];
    for (int i = 0; i < [self length]; i++) {
      [arrayCtx setCurrentIndexWithInt:i];
      if ([visitor visitIndexWithInt:[arrayCtx getCurrentIndex] withElementalJsonImplJsonContext:arrayCtx]) {
        [visitor acceptWithGDRJsonValue:[self getWithInt:i] withElementalJsonImplJsonContext:arrayCtx];
        [arrayCtx setFirstWithBoolean:NO];
      }
    }
  }
  [visitor endVisitWithGDRJsonArray:self withElementalJsonImplJsonContext:ctx];
}

- (void)insertWithInt:(int)index
     withGDRJsonValue:(id<GDRJsonValue>)value {
  if (value == nil) {
    value = [((id<GDRJsonFactory>) nil_chk(factory_)) createNull];
  }
  [((JavaUtilArrayList *) nil_chk(arrayValues_)) addWithInt:index withId:value];
}

- (void)copyAllFieldsTo:(ElementalJsonImplJreJsonArray *)other {
  [super copyAllFieldsTo:other];
  other->arrayValues_ = arrayValues_;
  other->factory_ = factory_;
}

@end
