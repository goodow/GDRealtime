//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/json/impl/JreJsonArray.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonBoolean.h"
#import "elemental/json/JsonFactory.h"
#import "elemental/json/JsonNull.h"
#import "elemental/json/JsonNumber.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonString.h"
#import "elemental/json/JsonType.h"
#import "elemental/json/JsonValue.h"
#import "elemental/json/impl/JreJsonArray.h"
#import "elemental/json/impl/JreJsonValue.h"
#import "elemental/json/impl/JsonArrayContext.h"
#import "elemental/json/impl/JsonContext.h"
#import "elemental/json/impl/JsonUtil.h"
#import "elemental/json/impl/JsonVisitor.h"
#import "java/lang/Double.h"
#import "java/lang/StringBuilder.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation ElementalJsonImplJreJsonArray

- (JavaUtilArrayList *)arrayValues {
  return arrayValues_;
}
- (void)setArrayValues:(JavaUtilArrayList *)arrayValues {
  JreOperatorRetainedAssign(&arrayValues_, arrayValues);
}
@synthesize arrayValues = arrayValues_;
- (id<EMJsonFactory>)factory {
  return factory_;
}
- (void)setFactory:(id<EMJsonFactory>)factory {
  JreOperatorRetainedAssign(&factory_, factory);
}
@synthesize factory = factory_;

- (id)initWithEMJsonFactory:(id<EMJsonFactory>)factory {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&arrayValues_, [[[JavaUtilArrayList alloc] init] autorelease]);
    self.factory = factory;
  }
  return self;
}

- (BOOL)asBoolean {
  return YES;
}

- (double)asNumber {
  switch ([self length]) {
    case 0:
    return 0;
    case 1:
    return [((id<EMJsonValue>) [self getWithInt:0]) asNumber];
    default:
    return JavaLangDouble_NaN;
  }
}

- (NSString *)asString {
  JavaLangStringBuilder *toReturn = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = 0; i < [self length]; i++) {
    if (i > 0) {
      [((JavaLangStringBuilder *) NIL_CHK(toReturn)) appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) NIL_CHK(toReturn)) appendWithNSString:[((id<EMJsonValue>) [self getWithInt:i]) asString]];
  }
  return [((JavaLangStringBuilder *) NIL_CHK(toReturn)) description];
}

- (id<EMJsonValue>)getWithInt:(int)index {
  return ((id<EMJsonValue>) [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) getWithInt:index]);
}

- (id<EMJsonArray>)getArrayWithInt:(int)index {
  return (id<EMJsonArray>) [self getWithInt:index];
}

- (BOOL)getBooleanWithInt:(int)index {
  return [((id<EMJsonBoolean>) [self getWithInt:index]) getBoolean];
}

- (double)getNumberWithInt:(int)index {
  return [((id<EMJsonNumber>) [self getWithInt:index]) getNumber];
}

- (id<EMJsonObject>)getObjectWithInt:(int)index {
  return (id<EMJsonObject>) [self getWithInt:index];
}

- (id)getObject {
  id<JavaUtilList> objs = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<EMJsonValue> val = ((id<EMJsonValue>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<JavaUtilList>) NIL_CHK(objs)) addWithId:[((ElementalJsonImplJreJsonValue *) val) getObject]];
    }
  }
  return objs;
}

- (NSString *)getStringWithInt:(int)index {
  return [((id<EMJsonString>) [self getWithInt:index]) getString];
}

- (EMJsonTypeEnum *)getType {
  return [EMJsonTypeEnum ARRAY];
}

- (BOOL)jsEqualsWithEMJsonValue:(id<EMJsonValue>)value {
  return [[self getObject] isEqual:[((ElementalJsonImplJreJsonValue *) value) getObject]];
}

- (int)length {
  return [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) size];
}

- (void)removeWithInt:(int)index {
  [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) removeWithInt:index];
}

- (void)setWithInt:(int)index
   withEMJsonValue:(id<EMJsonValue>)value {
  if (value == nil) {
    value = [((id<EMJsonFactory>) NIL_CHK(factory_)) createNull];
  }
  if (index == [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) size]) {
    [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) addWithInt:index withId:value];
  }
  else {
    [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) setWithInt:index withId:value];
  }
}

- (void)setWithInt:(int)index
      withNSString:(NSString *)string {
  [self setWithInt:index withEMJsonValue:[((id<EMJsonFactory>) NIL_CHK(factory_)) createWithNSString:string]];
}

- (void)setWithInt:(int)index
        withDouble:(double)number {
  [self setWithInt:index withEMJsonValue:[((id<EMJsonFactory>) NIL_CHK(factory_)) createWithDouble:number]];
}

- (void)setWithInt:(int)index
          withBOOL:(BOOL)bool_ {
  [self setWithInt:index withEMJsonValue:[((id<EMJsonFactory>) NIL_CHK(factory_)) createWithBOOL:bool_]];
}

- (NSString *)toJson {
  return [ElementalJsonImplJsonUtil stringifyWithEMJsonValue:self];
}

- (void)traverseWithElementalJsonImplJsonVisitor:(ElementalJsonImplJsonVisitor *)visitor
                withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if ([((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) visitWithEMJsonArray:self withElementalJsonImplJsonContext:ctx]) {
    ElementalJsonImplJsonArrayContext *arrayCtx = [[[ElementalJsonImplJsonArrayContext alloc] initWithEMJsonArray:self] autorelease];
    for (int i = 0; i < [self length]; i++) {
      [((ElementalJsonImplJsonArrayContext *) NIL_CHK(arrayCtx)) setCurrentIndexWithInt:i];
      if ([((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) visitIndexWithInt:[((ElementalJsonImplJsonArrayContext *) NIL_CHK(arrayCtx)) getCurrentIndex] withElementalJsonImplJsonContext:arrayCtx]) {
        [((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) acceptWithEMJsonValue:[self getWithInt:i] withElementalJsonImplJsonContext:arrayCtx];
        [((ElementalJsonImplJsonArrayContext *) NIL_CHK(arrayCtx)) setFirstWithBOOL:NO];
      }
    }
  }
  [((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) endVisitWithEMJsonArray:self withElementalJsonImplJsonContext:ctx];
}

- (void)insertWithInt:(int)index
      withEMJsonValue:(id<EMJsonValue>)value {
  if (value == nil) {
    value = [((id<EMJsonFactory>) NIL_CHK(factory_)) createNull];
  }
  [((JavaUtilArrayList *) NIL_CHK(arrayValues_)) addWithInt:index withId:value];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&factory_, nil);
  JreOperatorRetainedAssign(&arrayValues_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalJsonImplJreJsonArray *typedCopy = (ElementalJsonImplJreJsonArray *) copy;
  typedCopy.arrayValues = arrayValues_;
  typedCopy.factory = factory_;
}

@end
