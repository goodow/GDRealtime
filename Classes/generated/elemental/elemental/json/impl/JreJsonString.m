//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "elemental/json/JsonType.h"
#include "elemental/json/JsonValue.h"
#include "elemental/json/impl/JreJsonString.h"
#include "elemental/json/impl/JreJsonValue.h"
#include "elemental/json/impl/JsonContext.h"
#include "elemental/json/impl/JsonUtil.h"
#include "elemental/json/impl/JsonVisitor.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NumberFormatException.h"

@implementation ElementalJsonImplJreJsonString

- (id)initWithNSString:(NSString *)string {
  if (self = [super init]) {
    self->string_ = string;
  }
  return self;
}

- (BOOL)asBoolean {
  return ![((NSString *) nil_chk([self getString])) isEmpty];
}

- (double)asNumber {
  @try {
    if ([((NSString *) nil_chk([self asString])) isEmpty]) {
      return 0.0;
    }
    else {
      return [JavaLangDouble parseDoubleWithNSString:[self asString]];
    }
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return JavaLangDouble_NaN;
  }
}

- (NSString *)asString {
  return [self getString];
}

- (id)getObject {
  return [self getString];
}

- (NSString *)getString {
  return string_;
}

- (GDRJsonTypeEnum *)getType {
  return [GDRJsonTypeEnum STRING];
}

- (BOOL)jsEqualsWithGDRJsonValue:(id<GDRJsonValue>)value {
  return [nil_chk([self getObject]) isEqual:[((ElementalJsonImplJreJsonValue *) nil_chk(value)) getObject]];
}

- (void)traverseWithElementalJsonImplJsonVisitor:(ElementalJsonImplJsonVisitor *)visitor
                withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [((ElementalJsonImplJsonVisitor *) nil_chk(visitor)) visitWithNSString:[self getString] withElementalJsonImplJsonContext:ctx];
}

- (NSString *)toJson {
  return [ElementalJsonImplJsonUtil quoteWithNSString:[self getString]];
}

+ (IOSObjectArray *)__exceptions_toJson {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangIllegalStateException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)copyAllFieldsTo:(ElementalJsonImplJreJsonString *)other {
  [super copyAllFieldsTo:other];
  other->string_ = string_;
}

@end
