//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/json/impl/JsonVisitor.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonValue.h"
#import "elemental/json/impl/JreJsonValue.h"
#import "elemental/json/impl/JsonContext.h"
#import "elemental/json/impl/JsonVisitor.h"
#import "java/lang/UnsupportedOperationException.h"

@implementation ElementalJsonImplJsonVisitor

- (void)acceptWithEMJsonValue:(id<EMJsonValue>)node {
  [self acceptWithEMJsonValue:node withElementalJsonImplJsonContext:[[[ElementalJsonImplJsonVisitor_ImmutableJsonContext alloc] initWithElementalJsonImplJsonVisitor:self withEMJsonValue:node] autorelease]];
}

- (void)acceptWithEMJsonValue:(id<EMJsonValue>)node
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (node == nil) {
    return;
  }
  [((ElementalJsonImplJreJsonValue *) node) traverseWithElementalJsonImplJsonVisitor:self withElementalJsonImplJsonContext:ctx];
}

- (void)endVisitWithEMJsonArray:(id<EMJsonArray>)array
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
}

- (void)endVisitWithEMJsonObject:(id<EMJsonObject>)object
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
}

- (void)visitWithDouble:(double)number
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
}

- (void)visitWithNSString:(NSString *)string
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
}

- (void)visitWithBOOL:(BOOL)bool_
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
}

- (BOOL)visitWithEMJsonArray:(id<EMJsonArray>)array
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  return YES;
}

- (BOOL)visitWithEMJsonObject:(id<EMJsonObject>)object
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  return YES;
}

- (BOOL)visitIndexWithInt:(int)index
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  return YES;
}

- (BOOL)visitKeyWithNSString:(NSString *)key
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  return YES;
}

- (void)visitNullWithElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ElementalJsonImplJsonVisitor_ImmutableJsonContext

- (id)initWithElementalJsonImplJsonVisitor:(ElementalJsonImplJsonVisitor *)outer$
                           withEMJsonValue:(id<EMJsonValue>)node {
  return [super initWithEMJsonValue:node];
}

- (void)removeMe {
  [self immutableError];
}

- (void)replaceMeWithDouble:(double)d {
  [self immutableError];
}

- (void)replaceMeWithNSString:(NSString *)d {
  [self immutableError];
}

- (void)replaceMeWithBOOL:(BOOL)d {
  [self immutableError];
}

- (void)replaceMeWithEMJsonValue:(id<EMJsonValue>)value {
  [self immutableError];
}

- (void)immutableError {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Immutable context"] autorelease];
}

- (void)dealloc {
  [super dealloc];
}

@end
