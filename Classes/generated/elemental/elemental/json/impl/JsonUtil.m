//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "elemental/json/Json.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonException.h"
#include "elemental/json/JsonFactory.h"
#include "elemental/json/JsonObject.h"
#include "elemental/json/JsonValue.h"
#include "elemental/json/impl/JsonContext.h"
#include "elemental/json/impl/JsonUtil.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@implementation ElementalJsonImplJsonUtil

+ (NSString *)escapeControlCharsWithNSString:(NSString *)text {
  JavaLangStringBuffer *toReturn = [[JavaLangStringBuffer alloc] init];
  for (int i = 0; i < [((NSString *) nil_chk(text)) length]; i++) {
    unichar c = [text charAtWithInt:i];
    if ([ElementalJsonImplJsonUtil isControlCharWithChar:c]) {
      (void) [toReturn appendWithNSString:[ElementalJsonImplJsonUtil escapeStringAsUnicodeWithNSString:[NSString valueOfChar:c]]];
    }
    else {
      (void) [toReturn appendWithChar:c];
    }
  }
  return [toReturn description];
}

+ (id)parseWithNSString:(NSString *)json {
  return [((id<GDRJsonFactory>) nil_chk([GDRJson instance])) parseWithNSString:json];
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [GDRJsonException getClass] } count:1 type:[IOSClass getClass]];
}

+ (NSString *)quoteWithNSString:(NSString *)value {
  JavaLangStringBuffer *toReturn = [[JavaLangStringBuffer alloc] init];
  (void) [toReturn appendWithNSString:@"\""];
  for (int i = 0; i < [((NSString *) nil_chk(value)) length]; i++) {
    unichar c = [value charAtWithInt:i];
    NSString *toAppend = [NSString valueOfChar:c];
    switch (c) {
      case 0x0008:
      toAppend = @"\\b";
      break;
      case 0x0009:
      toAppend = @"\\t";
      break;
      case 0x000a:
      toAppend = @"\\n";
      break;
      case 0x000c:
      toAppend = @"\\f";
      break;
      case 0x000d:
      toAppend = @"\\r";
      break;
      case '"':
      toAppend = @"\\\"";
      break;
      case '\\':
      toAppend = @"\\\\";
      break;
      default:
      if ([ElementalJsonImplJsonUtil isControlCharWithChar:c]) {
        toAppend = [ElementalJsonImplJsonUtil escapeStringAsUnicodeWithNSString:[NSString valueOfChar:c]];
      }
    }
    (void) [toReturn appendWithNSString:toAppend];
  }
  (void) [toReturn appendWithNSString:@"\""];
  return [toReturn description];
}

+ (NSString *)stringifyWithGDRJsonValue:(id<GDRJsonValue>)jsonValue {
  return [ElementalJsonImplJsonUtil stringifyWithGDRJsonValue:jsonValue withInt:0];
}

+ (NSString *)stringifyWithGDRJsonValue:(id<GDRJsonValue>)jsonValue
                                withInt:(int)spaces {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  for (int i = 0; i < spaces; i++) {
    (void) [sb appendWithChar:' '];
  }
  return [ElementalJsonImplJsonUtil stringifyWithGDRJsonValue:jsonValue withNSString:[sb description]];
}

+ (NSString *)stringifyWithGDRJsonValue:(id<GDRJsonValue>)jsonValue
                           withNSString:(NSString *)indent {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  BOOL isPretty = indent != nil && ![@"" isEqual:indent];
  [((ElementalJsonImplJsonUtil_StringifyJsonVisitor *) [[ElementalJsonImplJsonUtil_StringifyJsonVisitor alloc] initWithNSString:indent withJavaLangStringBuffer:sb withBoolean:isPretty]) acceptWithGDRJsonValue:jsonValue];
  return [sb description];
}

+ (NSString *)escapeStringAsUnicodeWithNSString:(NSString *)match {
  NSString *hexValue = [JavaLangInteger toStringWithInt:[((NSString *) nil_chk(match)) charAtWithInt:0] withInt:16];
  hexValue = [((NSString *) nil_chk(hexValue)) length] > 4 ? [hexValue substring:[hexValue length] - 4] : hexValue;
  return [NSString stringWithFormat:@"\\u0000%@", hexValue];
}

+ (BOOL)isControlCharWithChar:(unichar)c {
  return (c >= (int) 0x00 && c <= (int) 0x1f) || (c >= (int) 0x7f && c <= (int) 0x9f) || c == 0x00ad || c == 0x070f || c == 0x17b4 || c == 0x17b5 || c == 0xfeff || (c >= 0x0600 && c <= 0x0604) || (c >= 0x200c && c <= 0x200f) || (c >= 0x2028 && c <= 0x202f) || (c >= 0x2060 && c <= 0x206f) || (c >= 0xfff0 && c <= 0xffff);
}

- (id)init {
  return [super init];
}

@end
@implementation ElementalJsonImplJsonUtil_StringifyJsonVisitor

static id<JavaUtilSet> ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_;

+ (id<JavaUtilSet>)skipKeys {
  return ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_;
}

- (id)initWithNSString:(NSString *)indent
withJavaLangStringBuffer:(JavaLangStringBuffer *)sb
           withBoolean:(BOOL)pretty {
  if (self = [super init]) {
    self->indent_ = indent;
    self->sb_ = sb;
    self->pretty_ = pretty;
    indentLevel_ = @"";
    visited_ = [[JavaUtilHashSet alloc] init];
  }
  return self;
}

- (void)endVisitWithGDRJsonArray:(id<GDRJsonArray>)array
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (pretty_) {
    indentLevel_ = [indentLevel_ substring:0 endIndex:[((NSString *) nil_chk(indentLevel_)) length] - [((NSString *) nil_chk(indent_)) length]];
    (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithChar:0x000a];
    (void) [sb_ appendWithNSString:indentLevel_];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:@"]"];
  [((id<JavaUtilSet>) nil_chk(visited_)) removeWithId:array];
}

- (void)endVisitWithGDRJsonObject:(id<GDRJsonObject>)object
 withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (pretty_) {
    indentLevel_ = [indentLevel_ substring:0 endIndex:[((NSString *) nil_chk(indentLevel_)) length] - [((NSString *) nil_chk(indent_)) length]];
    (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithChar:0x000a];
    (void) [sb_ appendWithNSString:indentLevel_];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:@"}"];
  [((id<JavaUtilSet>) nil_chk(visited_)) removeWithId:object];
  NSAssert(![visited_ containsWithId:object], @"src/elemental/json/impl/JsonUtil.java:98 condition failed: assert !visited.contains(object);");
}

- (void)visitWithDouble:(double)number
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:[JavaLangDouble isInfiniteWithDouble:number] ? @"null" : [self formatWithDouble:number]];
}

- (void)visitWithNSString:(NSString *)string
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:[ElementalJsonImplJsonUtil quoteWithNSString:string]];
}

- (void)visitWithBoolean:(BOOL)bool_
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithBoolean:bool_];
}

- (BOOL)visitWithGDRJsonArray:(id<GDRJsonArray>)array
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [self checkCycleWithGDRJsonValue:array];
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:@"["];
  if (pretty_) {
    (void) [sb_ appendWithChar:0x000a];
    indentLevel_ = [NSString stringWithFormat:@"%@%@", indentLevel_, indent_];
    (void) [sb_ appendWithNSString:indentLevel_];
  }
  return YES;
}

- (BOOL)visitWithGDRJsonObject:(id<GDRJsonObject>)object
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [self checkCycleWithGDRJsonValue:object];
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:@"{"];
  if (pretty_) {
    (void) [sb_ appendWithChar:0x000a];
    indentLevel_ = [NSString stringWithFormat:@"%@%@", indentLevel_, indent_];
    (void) [sb_ appendWithNSString:indentLevel_];
  }
  return YES;
}

- (BOOL)visitIndexWithInt:(int)index
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [self commaIfNotFirstWithElementalJsonImplJsonContext:ctx];
  return YES;
}

- (BOOL)visitKeyWithNSString:(NSString *)key
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if ([@"" isEqual:key]) {
    return YES;
  }
  if ([((id<JavaUtilSet>) nil_chk(ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_)) containsWithId:key]) {
    return NO;
  }
  [self commaIfNotFirstWithElementalJsonImplJsonContext:ctx];
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:[NSString stringWithFormat:@"%@:", [ElementalJsonImplJsonUtil quoteWithNSString:key]]];
  if (pretty_) {
    (void) [sb_ appendWithChar:' '];
  }
  return YES;
}

- (void)visitNullWithElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:@"null"];
}

- (void)checkCycleWithGDRJsonValue:(id<GDRJsonValue>)value {
  if ([((id<JavaUtilSet>) nil_chk(visited_)) containsWithId:value]) {
    @throw [[GDRJsonException alloc] initWithNSString:@"Cycled detected during stringify"];
  }
  else {
    [visited_ addWithId:value];
  }
}

- (void)commaIfNotFirstWithElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (![((ElementalJsonImplJsonContext *) nil_chk(ctx)) isFirst]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sb_)) appendWithNSString:@","];
    if (pretty_) {
      (void) [sb_ appendWithChar:0x000a];
      (void) [sb_ appendWithNSString:indentLevel_];
    }
  }
}

- (NSString *)formatWithDouble:(double)number {
  NSString *n = [NSString valueOfDouble:number];
  if ([((NSString *) nil_chk(n)) hasSuffix:@".0"]) {
    n = [n substring:0 endIndex:[n length] - 2];
  }
  return n;
}

+ (void)initialize {
  if (self == [ElementalJsonImplJsonUtil_StringifyJsonVisitor class]) {
    {
      id<JavaUtilSet> toSkip = [[JavaUtilHashSet alloc] init];
      [toSkip addWithId:@"$H"];
      [toSkip addWithId:@"__gwt_ObjectId"];
      ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_ = [JavaUtilCollections unmodifiableSetWithJavaUtilSet:toSkip];
    }
  }
}

- (void)copyAllFieldsTo:(ElementalJsonImplJsonUtil_StringifyJsonVisitor *)other {
  [super copyAllFieldsTo:other];
  other->indent_ = indent_;
  other->indentLevel_ = indentLevel_;
  other->pretty_ = pretty_;
  other->sb_ = sb_;
  other->visited_ = visited_;
}

@end
