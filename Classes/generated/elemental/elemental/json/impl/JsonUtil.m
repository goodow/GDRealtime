//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/json/impl/JsonUtil.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/json/Json.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonException.h"
#import "elemental/json/JsonFactory.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonValue.h"
#import "elemental/json/impl/JsonContext.h"
#import "elemental/json/impl/JsonUtil.h"
#import "java/lang/Double.h"
#import "java/lang/Integer.h"
#import "java/lang/StringBuffer.h"
#import "java/util/Collections.h"
#import "java/util/HashSet.h"
#import "java/util/Set.h"

@implementation ElementalJsonImplJsonUtil

+ (NSString *)escapeControlCharsWithNSString:(NSString *)text {
  JavaLangStringBuffer *toReturn = [[[JavaLangStringBuffer alloc] init] autorelease];
  for (int i = 0; i < [NIL_CHK(text) length]; i++) {
    unichar c = [NIL_CHK(text) charAtWithInt:i];
    if ([ElementalJsonImplJsonUtil isControlCharWithUnichar:c]) {
      [((JavaLangStringBuffer *) NIL_CHK(toReturn)) appendWithNSString:[ElementalJsonImplJsonUtil escapeStringAsUnicodeWithNSString:[NSString valueOfChar:c]]];
    }
    else {
      [((JavaLangStringBuffer *) NIL_CHK(toReturn)) appendWithUnichar:c];
    }
  }
  return [((JavaLangStringBuffer *) NIL_CHK(toReturn)) description];
}

+ (id)parseWithNSString:(NSString *)json {
  return [[EMJson instance] parseWithNSString:json];
}

+ (NSString *)quoteWithNSString:(NSString *)value {
  JavaLangStringBuffer *toReturn = [[[JavaLangStringBuffer alloc] init] autorelease];
  [((JavaLangStringBuffer *) NIL_CHK(toReturn)) appendWithNSString:@"\""];
  for (int i = 0; i < [NIL_CHK(value) length]; i++) {
    unichar c = [NIL_CHK(value) charAtWithInt:i];
    NSString *toAppend = [NSString valueOfChar:c];
    switch (c) {
      case 0x0008:
      toAppend = @"\\b";
      break;
      case 0x0009:
      toAppend = @"\\t";
      break;
      case 0x000a:
      toAppend = @"\\n";
      break;
      case 0x000c:
      toAppend = @"\\f";
      break;
      case 0x000d:
      toAppend = @"\\r";
      break;
      case '"':
      toAppend = @"\\\"";
      break;
      case '\\':
      toAppend = @"\\\\";
      break;
      default:
      if ([ElementalJsonImplJsonUtil isControlCharWithUnichar:c]) {
        toAppend = [ElementalJsonImplJsonUtil escapeStringAsUnicodeWithNSString:[NSString valueOfChar:c]];
      }
    }
    [((JavaLangStringBuffer *) NIL_CHK(toReturn)) appendWithNSString:toAppend];
  }
  [((JavaLangStringBuffer *) NIL_CHK(toReturn)) appendWithNSString:@"\""];
  return [((JavaLangStringBuffer *) NIL_CHK(toReturn)) description];
}

+ (NSString *)stringifyWithEMJsonValue:(id<EMJsonValue>)jsonValue {
  return [ElementalJsonImplJsonUtil stringifyWithEMJsonValue:jsonValue withInt:0];
}

+ (NSString *)stringifyWithEMJsonValue:(id<EMJsonValue>)jsonValue
                               withInt:(int)spaces {
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] init] autorelease];
  for (int i = 0; i < spaces; i++) {
    [((JavaLangStringBuffer *) NIL_CHK(sb)) appendWithUnichar:' '];
  }
  return [ElementalJsonImplJsonUtil stringifyWithEMJsonValue:jsonValue withNSString:[((JavaLangStringBuffer *) NIL_CHK(sb)) description]];
}

+ (NSString *)stringifyWithEMJsonValue:(id<EMJsonValue>)jsonValue
                          withNSString:(NSString *)indent {
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] init] autorelease];
  BOOL isPretty = indent != nil && ![@"" isEqual:indent];
  [((ElementalJsonImplJsonVisitor *) [[[ElementalJsonImplJsonUtil_StringifyJsonVisitor alloc] initWithNSString:indent withJavaLangStringBuffer:sb withBOOL:isPretty] autorelease]) acceptWithEMJsonValue:jsonValue];
  return [((JavaLangStringBuffer *) NIL_CHK(sb)) description];
}

+ (NSString *)escapeStringAsUnicodeWithNSString:(NSString *)match {
  NSString *hexValue = [JavaLangInteger toStringWithInt:[NIL_CHK(match) charAtWithInt:0] withInt:16];
  hexValue = [NIL_CHK(hexValue) length] > 4 ? [NIL_CHK(hexValue) substring:[NIL_CHK(hexValue) length] - 4] : hexValue;
  return [NSString stringWithFormat:@"\\u0000%@", hexValue];
}

+ (BOOL)isControlCharWithUnichar:(unichar)c {
  return (c >= (int) 0x00 && c <= (int) 0x1f) || (c >= (int) 0x7f && c <= (int) 0x9f) || c == 0x00ad || c == 0x070f || c == 0x17b4 || c == 0x17b5 || c == 0xfeff || (c >= 0x0600 && c <= 0x0604) || (c >= 0x200c && c <= 0x200f) || (c >= 0x2028 && c <= 0x202f) || (c >= 0x2060 && c <= 0x206f) || (c >= 0xfff0 && c <= 0xffff);
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ElementalJsonImplJsonUtil_StringifyJsonVisitor

static id<JavaUtilSet> ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_;

- (NSString *)indentLevel {
  return indentLevel_;
}
- (void)setIndentLevel:(NSString *)indentLevel {
  JreOperatorRetainedAssign(&indentLevel_, indentLevel);
}
@synthesize indentLevel = indentLevel_;
- (id<JavaUtilSet>)visited {
  return visited_;
}
- (void)setVisited:(id<JavaUtilSet>)visited {
  JreOperatorRetainedAssign(&visited_, visited);
}
@synthesize visited = visited_;
- (NSString *)indent {
  return indent_;
}
- (void)setIndent:(NSString *)indent {
  JreOperatorRetainedAssign(&indent_, indent);
}
@synthesize indent = indent_;
- (JavaLangStringBuffer *)sb {
  return sb_;
}
- (void)setSb:(JavaLangStringBuffer *)sb {
  JreOperatorRetainedAssign(&sb_, sb);
}
@synthesize sb = sb_;
@synthesize pretty = pretty_;

+ (id<JavaUtilSet>)skipKeys {
  return ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_;
}

- (id)initWithNSString:(NSString *)indent
withJavaLangStringBuffer:(JavaLangStringBuffer *)sb
              withBOOL:(BOOL)pretty {
  if ((self = [super init])) {
    self.indent = indent;
    self.sb = sb;
    self.pretty = pretty;
    JreOperatorRetainedAssign(&indentLevel_, @"");
    JreOperatorRetainedAssign(&visited_, [[[JavaUtilHashSet alloc] init] autorelease]);
  }
  return self;
}

- (void)endVisitWithEMJsonArray:(id<EMJsonArray>)array
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (pretty_) {
    JreOperatorRetainedAssign(&indentLevel_, [NIL_CHK(indentLevel_) substring:0 endIndex:[NIL_CHK(indentLevel_) length] - [NIL_CHK(indent_) length]]);
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithUnichar:0x000a];
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:indentLevel_];
  }
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:@"]"];
  [((id<JavaUtilSet>) NIL_CHK(visited_)) removeWithId:array];
}

- (void)endVisitWithEMJsonObject:(id<EMJsonObject>)object
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (pretty_) {
    JreOperatorRetainedAssign(&indentLevel_, [NIL_CHK(indentLevel_) substring:0 endIndex:[NIL_CHK(indentLevel_) length] - [NIL_CHK(indent_) length]]);
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithUnichar:0x000a];
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:indentLevel_];
  }
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:@"}"];
  [((id<JavaUtilSet>) NIL_CHK(visited_)) removeWithId:object];
  NSAssert(![((id<JavaUtilSet>) NIL_CHK(visited_)) containsWithId:object], @"src/elemental/json/impl/JsonUtil.java:98 condition failed: assert !visited.contains(object);");
}

- (void)visitWithDouble:(double)number
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:[JavaLangDouble isInfiniteWithDouble:number] ? @"null" : [self formatWithDouble:number]];
}

- (void)visitWithNSString:(NSString *)string
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:[ElementalJsonImplJsonUtil quoteWithNSString:string]];
}

- (void)visitWithBOOL:(BOOL)bool_
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithBOOL:bool_];
}

- (BOOL)visitWithEMJsonArray:(id<EMJsonArray>)array
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [self checkCycleWithEMJsonValue:array];
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:@"["];
  if (pretty_) {
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithUnichar:0x000a];
    JreOperatorRetainedAssign(&indentLevel_, [NSString stringWithFormat:@"%@%@", indentLevel_, indent_]);
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:indentLevel_];
  }
  return YES;
}

- (BOOL)visitWithEMJsonObject:(id<EMJsonObject>)object
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [self checkCycleWithEMJsonValue:object];
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:@"{"];
  if (pretty_) {
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithUnichar:0x000a];
    JreOperatorRetainedAssign(&indentLevel_, [NSString stringWithFormat:@"%@%@", indentLevel_, indent_]);
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:indentLevel_];
  }
  return YES;
}

- (BOOL)visitIndexWithInt:(int)index
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [self commaIfNotFirstWithElementalJsonImplJsonContext:ctx];
  return YES;
}

- (BOOL)visitKeyWithNSString:(NSString *)key
withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if ([@"" isEqual:key]) {
    return YES;
  }
  if ([((id<JavaUtilSet>) NIL_CHK(ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_)) containsWithId:key]) {
    return NO;
  }
  [self commaIfNotFirstWithElementalJsonImplJsonContext:ctx];
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:[NSString stringWithFormat:@"%@:", [ElementalJsonImplJsonUtil quoteWithNSString:key]]];
  if (pretty_) {
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithUnichar:' '];
  }
  return YES;
}

- (void)visitNullWithElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:@"null"];
}

- (void)checkCycleWithEMJsonValue:(id<EMJsonValue>)value {
  if ([((id<JavaUtilSet>) NIL_CHK(visited_)) containsWithId:value]) {
    @throw [[[EMJsonException alloc] initWithNSString:@"Cycled detected during stringify"] autorelease];
  }
  else {
    [((id<JavaUtilSet>) NIL_CHK(visited_)) addWithId:value];
  }
}

- (void)commaIfNotFirstWithElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if (![((ElementalJsonImplJsonContext *) NIL_CHK(ctx)) isFirst]) {
    [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:@","];
    if (pretty_) {
      [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithUnichar:0x000a];
      [((JavaLangStringBuffer *) NIL_CHK(sb_)) appendWithNSString:indentLevel_];
    }
  }
}

- (NSString *)formatWithDouble:(double)number {
  NSString *n = [NSString valueOfDouble:number];
  if ([NIL_CHK(n) hasSuffix:@".0"]) {
    n = [NIL_CHK(n) substring:0 endIndex:[NIL_CHK(n) length] - 2];
  }
  return n;
}

+ (void)initialize {
  if (self == [ElementalJsonImplJsonUtil_StringifyJsonVisitor class]) {
    {
      id<JavaUtilSet> toSkip = [[[JavaUtilHashSet alloc] init] autorelease];
      [((id<JavaUtilSet>) NIL_CHK(toSkip)) addWithId:@"$H"];
      [((id<JavaUtilSet>) NIL_CHK(toSkip)) addWithId:@"__gwt_ObjectId"];
      JreOperatorRetainedAssign(&ElementalJsonImplJsonUtil_StringifyJsonVisitor_skipKeys_, ((id<JavaUtilSet>) [JavaUtilCollections unmodifiableSetWithJavaUtilSet:toSkip]));
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&sb_, nil);
  JreOperatorRetainedAssign(&indent_, nil);
  JreOperatorRetainedAssign(&visited_, nil);
  JreOperatorRetainedAssign(&indentLevel_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalJsonImplJsonUtil_StringifyJsonVisitor *typedCopy = (ElementalJsonImplJsonUtil_StringifyJsonVisitor *) copy;
  typedCopy.indentLevel = indentLevel_;
  typedCopy.visited = visited_;
  typedCopy.indent = indent_;
  typedCopy.sb = sb_;
  typedCopy.pretty = pretty_;
}

@end
