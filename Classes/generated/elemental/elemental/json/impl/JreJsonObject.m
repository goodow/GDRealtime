//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/json/impl/JreJsonObject.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSObjectArray.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonBoolean.h"
#import "elemental/json/JsonFactory.h"
#import "elemental/json/JsonNull.h"
#import "elemental/json/JsonNumber.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonString.h"
#import "elemental/json/JsonType.h"
#import "elemental/json/JsonValue.h"
#import "elemental/json/impl/JreJsonObject.h"
#import "elemental/json/impl/JreJsonValue.h"
#import "elemental/json/impl/JsonContext.h"
#import "elemental/json/impl/JsonObjectContext.h"
#import "elemental/json/impl/JsonUtil.h"
#import "elemental/json/impl/JsonVisitor.h"
#import "java/lang/Double.h"
#import "java/util/ArrayList.h"
#import "java/util/Collections.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/LinkedHashMap.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/Set.h"

@implementation ElementalJsonImplJreJsonObject

- (id<EMJsonFactory>)factory {
  return factory_;
}
- (void)setFactory:(id<EMJsonFactory>)factory {
  JreOperatorRetainedAssign(&factory_, factory);
}
@synthesize factory = factory_;
- (id<JavaUtilMap>)map {
  return map_;
}
- (void)setMap:(id<JavaUtilMap>)map {
  JreOperatorRetainedAssign(&map_, map);
}
@synthesize map = map_;

+ (id<JavaUtilList>)stringifyOrderWithNSStringArray:(IOSObjectArray *)keys {
  id<JavaUtilList> toReturn = [[[JavaUtilArrayList alloc] init] autorelease];
  id<JavaUtilList> nonNumeric = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    IOSObjectArray *a__ = keys;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      NSString *key = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      if ([NIL_CHK(key) matches:@"\\d+"]) {
        [((id<JavaUtilList>) NIL_CHK(toReturn)) addWithId:key];
      }
      else {
        [((id<JavaUtilList>) NIL_CHK(nonNumeric)) addWithId:key];
      }
    }
  }
  [JavaUtilCollections sortWithJavaUtilList:toReturn];
  [((id<JavaUtilList>) NIL_CHK(toReturn)) addAllWithJavaUtilCollection:nonNumeric];
  return toReturn;
}

- (id)initWithEMJsonFactory:(id<EMJsonFactory>)factory {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&map_, [[[JavaUtilLinkedHashMap alloc] init] autorelease]);
    self.factory = factory;
  }
  return self;
}

- (BOOL)asBoolean {
  return YES;
}

- (double)asNumber {
  return JavaLangDouble_NaN;
}

- (NSString *)asString {
  return @"[object Object]";
}

- (id<EMJsonValue>)getWithNSString:(NSString *)key {
  return ((id<EMJsonValue>) [((id<JavaUtilMap>) NIL_CHK(map_)) getWithId:key]);
}

- (id<EMJsonArray>)getArrayWithNSString:(NSString *)key {
  return (id<EMJsonArray>) [self getWithNSString:key];
}

- (BOOL)getBooleanWithNSString:(NSString *)key {
  return [((id<EMJsonBoolean>) [self getWithNSString:key]) getBoolean];
}

- (double)getNumberWithNSString:(NSString *)key {
  return [((id<EMJsonNumber>) [self getWithNSString:key]) getNumber];
}

- (id<EMJsonObject>)getObjectWithNSString:(NSString *)key {
  return (id<EMJsonObject>) [self getWithNSString:key];
}

- (id)getObject {
  id<JavaUtilMap> obj = [[[JavaUtilHashMap alloc] init] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(map_)) entrySet]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> e = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<JavaUtilMap>) NIL_CHK(obj)) putWithId:((NSString *) [((id<JavaUtilMap_Entry>) NIL_CHK(e)) getKey]) withId:[((ElementalJsonImplJreJsonValue *) ((id<EMJsonValue>) [((id<JavaUtilMap_Entry>) NIL_CHK(e)) getValue])) getObject]];
    }
  }
  return obj;
}

- (NSString *)getStringWithNSString:(NSString *)key {
  return [((id<EMJsonString>) [self getWithNSString:key]) getString];
}

- (EMJsonTypeEnum *)getType {
  return [EMJsonTypeEnum OBJECT];
}

- (BOOL)hasKeyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) NIL_CHK(map_)) containsKeyWithId:key];
}

- (BOOL)jsEqualsWithEMJsonValue:(id<EMJsonValue>)value {
  return [[self getObject] isEqual:[((ElementalJsonImplJreJsonValue *) value) getObject]];
}

- (IOSObjectArray *)keys {
  return [((id<JavaUtilSet>) ((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(map_)) keySet])) toArrayWithNSObjectArray:[[[IOSObjectArray alloc] initWithLength:[((id<JavaUtilMap>) NIL_CHK(map_)) size] type:[IOSClass classWithClass:[NSString class]]] autorelease]];
}

- (void)putWithNSString:(NSString *)key
        withEMJsonValue:(id<EMJsonValue>)value {
  if (value == nil) {
    value = [((id<EMJsonFactory>) NIL_CHK(factory_)) createNull];
  }
  [((id<JavaUtilMap>) NIL_CHK(map_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value {
  [self putWithNSString:key withEMJsonValue:[((id<EMJsonFactory>) NIL_CHK(factory_)) createWithNSString:value]];
}

- (void)putWithNSString:(NSString *)key
             withDouble:(double)value {
  [self putWithNSString:key withEMJsonValue:[((id<EMJsonFactory>) NIL_CHK(factory_)) createWithDouble:value]];
}

- (void)putWithNSString:(NSString *)key
               withBOOL:(BOOL)bool_ {
  [self putWithNSString:key withEMJsonValue:[((id<EMJsonFactory>) NIL_CHK(factory_)) createWithBOOL:bool_]];
}

- (void)removeWithNSString:(NSString *)key {
  [((id<JavaUtilMap>) NIL_CHK(map_)) removeWithId:key];
}

- (void)setWithNSString:(NSString *)key
        withEMJsonValue:(id<EMJsonValue>)value {
  [self putWithNSString:key withEMJsonValue:value];
}

- (NSString *)toJson {
  return [ElementalJsonImplJsonUtil stringifyWithEMJsonValue:self];
}

- (NSString *)description {
  return [self toJson];
}

- (void)traverseWithElementalJsonImplJsonVisitor:(ElementalJsonImplJsonVisitor *)visitor
                withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if ([((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) visitWithEMJsonObject:self withElementalJsonImplJsonContext:ctx]) {
    ElementalJsonImplJsonObjectContext *objCtx = [[[ElementalJsonImplJsonObjectContext alloc] initWithEMJsonObject:self] autorelease];
    {
      IOSObjectArray *a__ = [self keys];
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        NSString *key = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        [((ElementalJsonImplJsonObjectContext *) NIL_CHK(objCtx)) setCurrentKeyWithNSString:key];
        if ([((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) visitKeyWithNSString:[((ElementalJsonImplJsonObjectContext *) NIL_CHK(objCtx)) getCurrentKey] withElementalJsonImplJsonContext:objCtx]) {
          [((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) acceptWithEMJsonValue:[self getWithNSString:key] withElementalJsonImplJsonContext:objCtx];
          [((ElementalJsonImplJsonObjectContext *) NIL_CHK(objCtx)) setFirstWithBOOL:NO];
        }
      }
    }
  }
  [((ElementalJsonImplJsonVisitor *) NIL_CHK(visitor)) endVisitWithEMJsonObject:self withElementalJsonImplJsonContext:ctx];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&map_, nil);
  JreOperatorRetainedAssign(&factory_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ElementalJsonImplJreJsonObject *typedCopy = (ElementalJsonImplJreJsonObject *) copy;
  typedCopy.factory = factory_;
  typedCopy.map = map_;
}

@end
