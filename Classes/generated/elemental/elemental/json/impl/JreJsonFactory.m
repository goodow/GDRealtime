//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonBoolean.h"
#include "elemental/json/JsonException.h"
#include "elemental/json/JsonNull.h"
#include "elemental/json/JsonNumber.h"
#include "elemental/json/JsonObject.h"
#include "elemental/json/JsonString.h"
#include "elemental/json/JsonValue.h"
#include "elemental/json/impl/JreJsonArray.h"
#include "elemental/json/impl/JreJsonBoolean.h"
#include "elemental/json/impl/JreJsonFactory.h"
#include "elemental/json/impl/JreJsonNull.h"
#include "elemental/json/impl/JreJsonNumber.h"
#include "elemental/json/impl/JreJsonObject.h"
#include "elemental/json/impl/JreJsonString.h"
#include "elemental/json/impl/JsonTokenizer.h"

@implementation ElementalJsonImplJreJsonFactory

- (id<GDRJsonString>)createWithNSString:(NSString *)string {
  NSAssert(string != nil, @"src/elemental/json/impl/JreJsonFactory.java:35 condition failed: assert string != null;");
  return [[ElementalJsonImplJreJsonString alloc] initWithNSString:string];
}

- (id<GDRJsonNumber>)createWithDouble:(double)number {
  return [[ElementalJsonImplJreJsonNumber alloc] initWithDouble:number];
}

- (id<GDRJsonBoolean>)createWithBoolean:(BOOL)bool_ {
  return [[ElementalJsonImplJreJsonBoolean alloc] initWithBoolean:bool_];
}

- (id<GDRJsonArray>)createArray {
  return [[ElementalJsonImplJreJsonArray alloc] initWithGDRJsonFactory:self];
}

- (id<GDRJsonNull>)createNull {
  return [ElementalJsonImplJreJsonNull NULL_INSTANCE];
}

- (id<GDRJsonObject>)createObject {
  return [[ElementalJsonImplJreJsonObject alloc] initWithGDRJsonFactory:self];
}

- (id)parseWithNSString:(NSString *)jsonString {
  if ([((NSString *) nil_chk(jsonString)) hasPrefix:@"("] && [jsonString hasSuffix:@")"]) {
    jsonString = [jsonString substring:1 endIndex:[jsonString length] - 1];
  }
  return [((ElementalJsonImplJsonTokenizer *) [[ElementalJsonImplJsonTokenizer alloc] initWithElementalJsonImplJreJsonFactory:self withNSString:jsonString]) nextValue];
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [GDRJsonException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)init {
  return [super init];
}

@end
