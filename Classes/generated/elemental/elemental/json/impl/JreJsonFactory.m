//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/elemental/json/impl/JreJsonFactory.java
//
//  Created by retechretech on 13-5-25.
//

#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonBoolean.h"
#import "elemental/json/JsonNull.h"
#import "elemental/json/JsonNumber.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonString.h"
#import "elemental/json/JsonValue.h"
#import "elemental/json/impl/JreJsonArray.h"
#import "elemental/json/impl/JreJsonBoolean.h"
#import "elemental/json/impl/JreJsonFactory.h"
#import "elemental/json/impl/JreJsonNull.h"
#import "elemental/json/impl/JreJsonNumber.h"
#import "elemental/json/impl/JreJsonObject.h"
#import "elemental/json/impl/JreJsonString.h"
#import "elemental/json/impl/JsonTokenizer.h"

@implementation ElementalJsonImplJreJsonFactory

- (id<EMJsonString>)createWithNSString:(NSString *)string {
  NSAssert(string != nil, @"src/elemental/json/impl/JreJsonFactory.java:35 condition failed: assert string != null;");
  return [[[ElementalJsonImplJreJsonString alloc] initWithNSString:string] autorelease];
}

- (id<EMJsonNumber>)createWithDouble:(double)number {
  return [[[ElementalJsonImplJreJsonNumber alloc] initWithDouble:number] autorelease];
}

- (id<EMJsonBoolean>)createWithBOOL:(BOOL)bool_ {
  return [[[ElementalJsonImplJreJsonBoolean alloc] initWithBOOL:bool_] autorelease];
}

- (id<EMJsonArray>)createArray {
  return [[[ElementalJsonImplJreJsonArray alloc] initWithEMJsonFactory:self] autorelease];
}

- (id<EMJsonNull>)createNull {
  return [ElementalJsonImplJreJsonNull NULL_INSTANCE];
}

- (id<EMJsonObject>)createObject {
  return [[[ElementalJsonImplJreJsonObject alloc] initWithEMJsonFactory:self] autorelease];
}

- (id)parseWithNSString:(NSString *)jsonString {
  if ([NIL_CHK(jsonString) hasPrefix:@"("] && [NIL_CHK(jsonString) hasSuffix:@")"]) {
    jsonString = [NIL_CHK(jsonString) substring:1 endIndex:[NIL_CHK(jsonString) length] - 1];
  }
  return [[[[ElementalJsonImplJsonTokenizer alloc] initWithElementalJsonImplJreJsonFactory:self withNSString:jsonString] autorelease] nextValue];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
