//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/operation/map/MapOp.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/goodow/realtime/operation/ComposeException.h"
#import "com/goodow/realtime/operation/Operation.h"
#import "com/goodow/realtime/operation/TransformException.h"
#import "com/goodow/realtime/operation/map/MapOp.h"
#import "com/goodow/realtime/operation/map/MapTarget.h"
#import "com/goodow/realtime/util/JsonSerializer.h"
#import "com/goodow/realtime/util/Pair.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonValue.h"
#import "elemental/util/ArrayOfString.h"
#import "elemental/util/Collections.h"
#import "elemental/util/MapFromStringTo.h"
#import "java/lang/StringBuilder.h"

@implementation ComGoodowRealtimeOperationMapMapOp

static NSString * ComGoodowRealtimeOperationMapMapOp_INSERT_ = @"i";
static NSString * ComGoodowRealtimeOperationMapMapOp_DELETE_ = @"d";

- (id<ElementalUtilMapFromStringTo>)components {
  return components_;
}
- (void)setComponents:(id<ElementalUtilMapFromStringTo>)components {
  JreOperatorRetainedAssign(&components_, components);
}
@synthesize components = components_;
- (NSString *)id_ {
  return id__;
}
- (void)setId_:(NSString *)id_ {
  JreOperatorRetainedAssign(&id__, id_);
}
@synthesize id_ = id__;

+ (int)TYPE {
  return ComGoodowRealtimeOperationMapMapOp_TYPE;
}

+ (NSString *)INSERT {
  return ComGoodowRealtimeOperationMapMapOp_INSERT_;
}

+ (NSString *)DELETE {
  return ComGoodowRealtimeOperationMapMapOp_DELETE_;
}

- (id)initComGoodowRealtimeOperationMapMapOp {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&components_, ((id<ElementalUtilMapFromStringTo>) [ElementalUtilCollections mapFromStringTo]));
  }
  return self;
}

- (id)init {
  return [self initComGoodowRealtimeOperationMapMapOp];
}

- (id)initWithEMJsonArray:(id<EMJsonArray>)serialized {
  if ((self = [self initComGoodowRealtimeOperationMapMapOp])) {
    for (int i = 0, len = [((id<EMJsonArray>) NIL_CHK(serialized)) length]; i < len; i++) {
      id<EMJsonArray> component = [((id<EMJsonArray>) NIL_CHK(serialized)) getArrayWithInt:i];
      if ([((id<EMJsonArray>) NIL_CHK(component)) length] == 3) {
        [self updateWithNSString:[((id<EMJsonArray>) NIL_CHK(component)) getStringWithInt:0] withEMJsonValue:[((id<EMJsonArray>) NIL_CHK(component)) getWithInt:1] withEMJsonValue:[((id<EMJsonArray>) NIL_CHK(component)) getWithInt:2]];
      }
      else {
        NSAssert([((id<EMJsonArray>) NIL_CHK(component)) length] == 2, @"src/main/java/com/goodow/realtime/operation/map/MapOp.java:48 condition failed: assert component.length() == 2;");
        id<EMJsonObject> obj = [((id<EMJsonArray>) NIL_CHK(component)) getObjectWithInt:1];
        NSAssert((int) [[((id<EMJsonObject>) NIL_CHK(obj)) keys] count] == 1, @"src/main/java/com/goodow/realtime/operation/map/MapOp.java:50 condition failed: assert obj.keys().length == 1;");
        if ([NIL_CHK(ComGoodowRealtimeOperationMapMapOp_INSERT_) isEqual:((NSString *) [[((id<EMJsonObject>) NIL_CHK(obj)) keys] objectAtIndex:0])]) {
          [self updateWithNSString:[((id<EMJsonArray>) NIL_CHK(component)) getStringWithInt:0] withEMJsonValue:nil withEMJsonValue:[((id<EMJsonObject>) NIL_CHK(obj)) getWithNSString:ComGoodowRealtimeOperationMapMapOp_INSERT_]];
        }
        else {
          NSAssert([NIL_CHK(ComGoodowRealtimeOperationMapMapOp_DELETE_) isEqual:((NSString *) [[((id<EMJsonObject>) NIL_CHK(obj)) keys] objectAtIndex:0])], @"src/main/java/com/goodow/realtime/operation/map/MapOp.java:54 condition failed: assert DELETE.equals(obj.keys()[0]);");
          [self updateWithNSString:[((id<EMJsonArray>) NIL_CHK(component)) getStringWithInt:0] withEMJsonValue:[((id<EMJsonObject>) NIL_CHK(obj)) getWithNSString:ComGoodowRealtimeOperationMapMapOp_DELETE_] withEMJsonValue:nil];
        }
      }
    }
  }
  return self;
}

- (void)applyWithId:(id<ComGoodowRealtimeOperationMapMapTarget>)target {
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    [((id<ComGoodowRealtimeOperationMapMapTarget>) NIL_CHK(target)) updateWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second];
  }
}

- (ComGoodowRealtimeOperationMapMapOp *)composeWithWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)op {
  NSAssert([(id) op isKindOfClass:[ComGoodowRealtimeOperationMapMapOp class]], @"src/main/java/com/goodow/realtime/operation/map/MapOp.java:72 condition failed: assert op instanceof MapOp;");
  ComGoodowRealtimeOperationMapMapOp *toRtn = [self copy__];
  ComGoodowRealtimeOperationMapMapOp *o = (ComGoodowRealtimeOperationMapMapOp *) op;
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(o.components)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(toRtn)) updateWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(o.components)) getWithNSString:key]).first withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(o.components)) getWithNSString:key]).second];
  }
  return toRtn;
}

- (BOOL)isEqual:(id)obj {
  if (!([obj isKindOfClass:[ComGoodowRealtimeOperationMapMapOp class]])) {
    return NO;
  }
  return [[self description] isEqual:[NIL_CHK(obj) description]];
}

- (NSString *)getId {
  return id__;
}

- (int)getType {
  return ComGoodowRealtimeOperationMapMapOp_TYPE;
}

- (ComGoodowRealtimeOperationMapMapOp *)invert {
  ComGoodowRealtimeOperationMapMapOp *op = [self newInstance];
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(op)) updateWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first];
  }
  return op;
}

- (BOOL)isNoOp {
  return [((id<ElementalUtilArrayOfString>) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) keys]) isEmpty];
}

- (void)setIdWithNSString:(NSString *)id_ {
  self.id_ = id_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithNSString:@"["] autorelease];
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    if (i != 0) {
      [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@","];
    }
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[self toJsonWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"]"];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

- (ComGoodowRealtimeUtilPair *)transformWithWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)clientOp {
  NSAssert([(id) clientOp isKindOfClass:[ComGoodowRealtimeOperationMapMapOp class]], @"src/main/java/com/goodow/realtime/operation/map/MapOp.java:139 condition failed: assert clientOp instanceof MapOp;");
  ComGoodowRealtimeOperationMapMapOp *op = (ComGoodowRealtimeOperationMapMapOp *) clientOp;
  ComGoodowRealtimeOperationMapMapOp *transformedClientOp = [self newInstance];
  id<ElementalUtilArrayOfString> clientKeys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(op.components)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(clientKeys)) length]; i < len; i++) {
    NSString *clientKey = [((id<ElementalUtilArrayOfString>) NIL_CHK(clientKeys)) getWithInt:i];
    id<EMJsonValue> clientOldValue = ((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(op.components)) getWithNSString:clientKey]).first;
    id<EMJsonValue> clientNewValue = ((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(op.components)) getWithNSString:clientKey]).second;
    if (![((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) hasKeyWithNSString:clientKey]) {
      [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(transformedClientOp)) updateWithNSString:clientKey withEMJsonValue:clientOldValue withEMJsonValue:clientNewValue];
      continue;
    }
    id<EMJsonValue> serverOldValue = ((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:clientKey]).first;
    id<EMJsonValue> serverNewValue = ((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:clientKey]).second;
    if (![ComGoodowRealtimeUtilJsonSerializer jsonEqualWithEMJsonValue:serverOldValue withEMJsonValue:clientOldValue]) {
      @throw [[[ComGoodowRealtimeOperationTransformException alloc] initWithNSString:[NSString stringWithFormat:@"Mismatched initial value: attempt to transform %@ with %@", [self toJsonWithNSString:clientKey withEMJsonValue:serverOldValue withEMJsonValue:serverNewValue], [self toJsonWithNSString:clientKey withEMJsonValue:clientOldValue withEMJsonValue:clientNewValue]]] autorelease];
    }
    if ([ComGoodowRealtimeUtilJsonSerializer jsonEqualWithEMJsonValue:serverNewValue withEMJsonValue:clientNewValue]) {
      continue;
    }
    [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(transformedClientOp)) updateWithNSString:clientKey withEMJsonValue:serverNewValue withEMJsonValue:clientNewValue];
  }
  ComGoodowRealtimeOperationMapMapOp *transformedServerOp = [self excludeWithComGoodowRealtimeOperationMapMapOp:op];
  return ((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:transformedServerOp withId:transformedClientOp]);
}

- (ComGoodowRealtimeOperationMapMapOp *)updateWithNSString:(NSString *)key
                                           withEMJsonValue:(id<EMJsonValue>)oldValue
                                           withEMJsonValue:(id<EMJsonValue>)newValue {
  NSAssert(key != nil, @"Null key");
  if ([ComGoodowRealtimeUtilJsonSerializer jsonEqualWithEMJsonValue:oldValue withEMJsonValue:newValue]) {
    return self;
  }
  if (![((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) hasKeyWithNSString:key]) {
    [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) putWithNSString:key withId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:oldValue withId:newValue])];
    return self;
  }
  if (![ComGoodowRealtimeUtilJsonSerializer jsonEqualWithEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second withEMJsonValue:oldValue]) {
    @throw [[[ComGoodowRealtimeOperationComposeException alloc] initWithNSString:[NSString stringWithFormat:@"Mismatched value: attempt to compose %@ with %@", [self toJsonWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second], [self toJsonWithNSString:key withEMJsonValue:oldValue withEMJsonValue:newValue]]] autorelease];
  }
  if ([ComGoodowRealtimeUtilJsonSerializer jsonEqualWithEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withEMJsonValue:newValue]) {
    [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) removeWithNSString:key];
  }
  else {
    [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) putWithNSString:key withId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withId:newValue])];
  }
  return self;
}

- (ComGoodowRealtimeOperationMapMapOp *)copy__ OBJC_METHOD_FAMILY_NONE {
  ComGoodowRealtimeOperationMapMapOp *toRtn = [self newInstance];
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(toRtn)) updateWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second];
  }
  return toRtn;
}

- (ComGoodowRealtimeOperationMapMapOp *)newInstance OBJC_METHOD_FAMILY_NONE {
  return [[[ComGoodowRealtimeOperationMapMapOp alloc] init] autorelease];
}

- (ComGoodowRealtimeOperationMapMapOp *)excludeWithComGoodowRealtimeOperationMapMapOp:(ComGoodowRealtimeOperationMapMapOp *)clientOp {
  ComGoodowRealtimeOperationMapMapOp *transformedServerOp = [self newInstance];
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) length]; i < len; i++) {
    NSString *key = [((id<ElementalUtilArrayOfString>) NIL_CHK(keys)) getWithInt:i];
    if (![((id<ElementalUtilMapFromStringTo>) NIL_CHK(clientOp.components)) hasKeyWithNSString:key]) {
      [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(transformedServerOp)) updateWithNSString:key withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).first withEMJsonValue:((ComGoodowRealtimeUtilPair *) [((id<ElementalUtilMapFromStringTo>) NIL_CHK(components_)) getWithNSString:key]).second];
    }
  }
  return transformedServerOp;
}

- (NSString *)toJsonWithNSString:(NSString *)key
                 withEMJsonValue:(id<EMJsonValue>)oldVal
                 withEMJsonValue:(id<EMJsonValue>)newVal {
  JavaLangStringBuilder *sb = [[[((JavaLangStringBuilder *) [[[JavaLangStringBuilder alloc] initWithNSString:@"[\""] autorelease]) appendWithNSString:key] appendWithNSString:@"\""] appendWithNSString:@","];
  if (oldVal == nil) {
    NSAssert(newVal != nil, @"src/main/java/com/goodow/realtime/operation/map/MapOp.java:219 condition failed: assert newVal != null;");
    [[[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"{\"i\":"] appendWithNSString:[((id<EMJsonValue>) NIL_CHK(newVal)) toJson]] appendWithNSString:@"}"];
  }
  else if (newVal == nil) {
    [[[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"{\"d\":"] appendWithNSString:[((id<EMJsonValue>) NIL_CHK(oldVal)) toJson]] appendWithNSString:@"}"];
  }
  else {
    [[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[((id<EMJsonValue>) NIL_CHK(oldVal)) toJson]] appendWithNSString:@","];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[newVal toJson]];
  }
  return [[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"]"] description];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&id__, nil);
  JreOperatorRetainedAssign(&components_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeOperationMapMapOp *typedCopy = (ComGoodowRealtimeOperationMapMapOp *) copy;
  typedCopy.components = components_;
  typedCopy.id_ = id__;
}

@end
