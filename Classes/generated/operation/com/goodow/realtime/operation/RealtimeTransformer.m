//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/operation/RealtimeTransformer.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSObjectArray.h"
#import "com/goodow/realtime/DocumentBridge.h"
#import "com/goodow/realtime/operation/CreateOperation.h"
#import "com/goodow/realtime/operation/Operation.h"
#import "com/goodow/realtime/operation/RealtimeOperation.h"
#import "com/goodow/realtime/operation/RealtimeTransformer.h"
#import "com/goodow/realtime/operation/ReferenceShiftedOperation.h"
#import "com/goodow/realtime/operation/basic/NoOp.h"
#import "com/goodow/realtime/operation/list/ArrayOp.h"
#import "com/goodow/realtime/operation/list/StringOp.h"
#import "com/goodow/realtime/operation/list/algorithm/ListOp.h"
#import "com/goodow/realtime/operation/list/algorithm/ListOpCollector.h"
#import "com/goodow/realtime/operation/map/MapOp.h"
#import "com/goodow/realtime/util/Pair.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonValue.h"
#import "elemental/util/ArrayOf.h"
#import "elemental/util/Collections.h"
#import "java/lang/UnsupportedOperationException.h"

@implementation ComGoodowRealtimeOperationRealtimeTransformer

- (id<ElementalUtilArrayOf>)composeWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)ops {
  if ([((id<ElementalUtilArrayOf>) NIL_CHK(ops)) isEmpty]) {
    return ops;
  }
  id<ElementalUtilArrayOf> toRtn = ((id<ElementalUtilArrayOf>) [ElementalUtilCollections arrayOf]);
  ComGoodowRealtimeOperationRealtimeOperation *current = nil;
  ComGoodowRealtimeOperationListAlgorithmListOpCollector *collector = nil;
  for (int i = 0, len = [((id<ElementalUtilArrayOf>) NIL_CHK(ops)) length]; i < len; i++) {
    ComGoodowRealtimeOperationRealtimeOperation *op = ((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(ops)) getWithInt:i]);
    NSAssert(![((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) isNoOp], @"src/main/java/com/goodow/realtime/operation/RealtimeTransformer.java:42 condition failed: assert !op.isNoOp();");
    if (current == nil || ![[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getId] isEqual:[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(current)) getId]] || ![NIL_CHK(op.sessionId) isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(current)).sessionId] || ![NIL_CHK(op.userId) isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(current)).userId] || [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getType] != [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(current)) getType]) {
      if (collector != nil) {
        [self composeListOpsWithElementalUtilArrayOf:toRtn withComGoodowRealtimeOperationListAlgorithmListOpCollector:collector];
        collector = nil;
      }
      [((id<ElementalUtilArrayOf>) NIL_CHK(toRtn)) pushWithId:op];
    }
    else {
      NSAssert([((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(toRtn)) peek]) getType] == [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getType], @"src/main/java/com/goodow/realtime/operation/RealtimeTransformer.java:52 condition failed: assert toRtn.peek().getType() == op.getType();");
      if ([(id) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getOp] isKindOfClass:[ComGoodowRealtimeOperationListAlgorithmListOp class]]) {
        if (collector == nil) {
          collector = [((ComGoodowRealtimeOperationListAlgorithmListOp *) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getOp]) createOpCollector];
          [collector addWithComGoodowRealtimeOperationListAlgorithmListOp:(ComGoodowRealtimeOperationListAlgorithmListOp *) ((id<ComGoodowRealtimeOperationOperation>) [((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(toRtn)) peek]) getOp])];
        }
        [((ComGoodowRealtimeOperationListAlgorithmListOpCollector *) NIL_CHK(collector)) addWithComGoodowRealtimeOperationListAlgorithmListOp:(ComGoodowRealtimeOperationListAlgorithmListOp *) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getOp]];
      }
      else {
        ComGoodowRealtimeOperationRealtimeOperation *composition = [((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(toRtn)) pop]) composeWithWithComGoodowRealtimeOperationOperation:op];
        if (![((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(composition)) isNoOp]) {
          [((id<ElementalUtilArrayOf>) NIL_CHK(toRtn)) pushWithId:composition];
        }
      }
    }
    current = op;
  }
  if (collector != nil) {
    [self composeListOpsWithElementalUtilArrayOf:toRtn withComGoodowRealtimeOperationListAlgorithmListOpCollector:collector];
    collector = nil;
  }
  return toRtn;
}

- (id<ComGoodowRealtimeOperationOperation>)createOpWithEMJsonArray:(id<EMJsonArray>)serialized {
  id<ComGoodowRealtimeOperationOperation> op = nil;
  NSString *id_ = [((id<EMJsonArray>) NIL_CHK(serialized)) getStringWithInt:1];
  switch ((int) [((id<EMJsonArray>) NIL_CHK(serialized)) getNumberWithInt:0]) {
    case ComGoodowRealtimeOperationCreateOperation_TYPE:
    op = [[[ComGoodowRealtimeOperationCreateOperation alloc] initWithEMJsonArray:serialized] autorelease];
    break;
    case ComGoodowRealtimeOperationMapMapOp_TYPE:
    op = [[[ComGoodowRealtimeOperationMapMapOp alloc] initWithEMJsonArray:[((id<EMJsonArray>) NIL_CHK(serialized)) getArrayWithInt:2]] autorelease];
    break;
    case ComGoodowRealtimeOperationListAlgorithmListOp_TYPE:
    op = [[[ComGoodowRealtimeOperationListStringOp alloc] initWithEMJsonArray:[((id<EMJsonArray>) NIL_CHK(serialized)) getArrayWithInt:2]] autorelease];
    break;
    case ComGoodowRealtimeOperationListArrayOp_TYPE:
    op = [[[ComGoodowRealtimeOperationListArrayOp alloc] initWithEMJsonArray:[((id<EMJsonArray>) NIL_CHK(serialized)) getArrayWithInt:2]] autorelease];
    break;
    case ComGoodowRealtimeOperationReferenceShiftedOperation_TYPE:
    op = [[[ComGoodowRealtimeOperationReferenceShiftedOperation alloc] initWithEMJsonArray:[((id<EMJsonArray>) NIL_CHK(serialized)) getArrayWithInt:2]] autorelease];
    break;
    case ComGoodowRealtimeOperationBasicNoOp_TYPE:
    op = ((ComGoodowRealtimeOperationBasicNoOp *) [ComGoodowRealtimeOperationBasicNoOp get]);
    break;
    default:
    @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknow operation type: %@", [((id<EMJsonArray>) NIL_CHK(serialized)) toJson]]] autorelease];
  }
  [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op)) setIdWithNSString:id_];
  return op;
}

- (ComGoodowRealtimeOperationRealtimeOperation *)createOperationWithEMJsonValue:(id<EMJsonValue>)serialized
                                                                   withNSString:(NSString *)userId
                                                                   withNSString:(NSString *)sessionId {
  id<ComGoodowRealtimeOperationOperation> op = [self createOpWithEMJsonArray:(id<EMJsonArray>) serialized];
  return [[[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:op withNSString:userId withNSString:sessionId] autorelease];
}

- (GDRDocumentBridge *)createSnapshotWithEMJsonValue:(id<EMJsonValue>)serialized {
  return [[[GDRDocumentBridge alloc] initWithEMJsonArray:(id<EMJsonArray>) serialized] autorelease];
}

- (ComGoodowRealtimeUtilPair *)transformWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)serverOps
                                        withElementalUtilArrayOf:(id<ElementalUtilArrayOf>)clientOps {
  id<ElementalUtilArrayOf> sOps = ((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) [ElementalUtilCollections arrayOf]) concatWithElementalUtilArrayOf:serverOps]);
  id<ElementalUtilArrayOf> cOps = ((id<ElementalUtilArrayOf>) [((id<ElementalUtilArrayOf>) [ElementalUtilCollections arrayOf]) concatWithElementalUtilArrayOf:clientOps]);
  for (int i = 0; i < [((id<ElementalUtilArrayOf>) NIL_CHK(sOps)) length]; i++) {
    ComGoodowRealtimeOperationRealtimeOperation *serverOp = ((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(sOps)) getWithInt:i]);
    NSAssert(![((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(serverOp)) isNoOp], @"src/main/java/com/goodow/realtime/operation/RealtimeTransformer.java:125 condition failed: assert !serverOp.isNoOp();");
    for (int j = 0; j < [((id<ElementalUtilArrayOf>) NIL_CHK(cOps)) length]; j++) {
      ComGoodowRealtimeOperationRealtimeOperation *clientOp = ((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(cOps)) getWithInt:j]);
      NSAssert(![((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(clientOp)) isNoOp], @"src/main/java/com/goodow/realtime/operation/RealtimeTransformer.java:128 condition failed: assert !clientOp.isNoOp();");
      ComGoodowRealtimeUtilPair *pair = [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(serverOp)) transformWithWithComGoodowRealtimeOperationOperation:clientOp];
      serverOp = ((ComGoodowRealtimeUtilPair *) NIL_CHK(pair)).first;
      clientOp = ((ComGoodowRealtimeUtilPair *) NIL_CHK(pair)).second;
      if ([((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(serverOp)) isNoOp]) {
        [((id<ElementalUtilArrayOf>) NIL_CHK(sOps)) removeByIndexWithInt:i--];
        if ([((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(clientOp)) isNoOp]) {
          [((id<ElementalUtilArrayOf>) NIL_CHK(cOps)) removeByIndexWithInt:j--];
        }
        goto continue_sLoop;
      }
      else if ([((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(clientOp)) isNoOp]) {
        [((id<ElementalUtilArrayOf>) NIL_CHK(cOps)) removeByIndexWithInt:j--];
        continue;
      }
      [((id<ElementalUtilArrayOf>) NIL_CHK(cOps)) setWithInt:j withId:clientOp];
    }
    [((id<ElementalUtilArrayOf>) NIL_CHK(sOps)) setWithInt:i withId:serverOp];
    continue_sLoop: ;
  }
  return ((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:sOps withId:cOps]);
}

- (void)composeListOpsWithElementalUtilArrayOf:(id<ElementalUtilArrayOf>)ops
withComGoodowRealtimeOperationListAlgorithmListOpCollector:(ComGoodowRealtimeOperationListAlgorithmListOpCollector *)collector {
  ComGoodowRealtimeOperationListAlgorithmListOp *composition = [((ComGoodowRealtimeOperationListAlgorithmListOpCollector *) NIL_CHK(collector)) composeAll];
  if (![((ComGoodowRealtimeOperationListAlgorithmListOp *) NIL_CHK(composition)) isNoOp]) {
    ComGoodowRealtimeOperationRealtimeOperation *peek = ((ComGoodowRealtimeOperationRealtimeOperation *) [((id<ElementalUtilArrayOf>) NIL_CHK(ops)) peek]);
    [((ComGoodowRealtimeOperationListAlgorithmListOp *) NIL_CHK(composition)) setIdWithNSString:[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(peek)) getId]];
    [((id<ElementalUtilArrayOf>) NIL_CHK(ops)) setWithInt:[((id<ElementalUtilArrayOf>) NIL_CHK(ops)) length] - 1 withId:[[[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:composition withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(peek)).userId withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(peek)).sessionId] autorelease]];
  }
  else {
    [((id<ElementalUtilArrayOf>) NIL_CHK(ops)) removeByIndexWithInt:[((id<ElementalUtilArrayOf>) NIL_CHK(ops)) length] - 1];
  }
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
