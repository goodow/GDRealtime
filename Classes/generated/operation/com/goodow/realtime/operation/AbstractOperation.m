//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/operation/AbstractOperation.h"
#include "com/goodow/realtime/operation/Operation.h"
#include "com/goodow/realtime/operation/util/Pair.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonType.h"
#include "elemental/json/JsonValue.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/StringBuilder.h"

@implementation ComGoodowRealtimeOperationAbstractOperation

+ (NSString *)parseIdWithGDRJsonArray:(id<GDRJsonArray>)serialized {
  return [((id<GDRJsonValue>) nil_chk([((id<GDRJsonArray>) nil_chk(serialized)) getWithInt:1])) getType] == [GDRJsonTypeEnum NULL_] ? nil : [serialized getStringWithInt:1];
}

- (id)initWithInt:(int)type
     withNSString:(NSString *)id_ {
  if (self = [super init]) {
    self->type_ = type;
    self->id__ = id_;
  }
  return self;
}

- (BOOL)isEqual:(id)obj {
  return [((NSString *) nil_chk([self description])) isEqual:[nil_chk(obj) description]];
}

- (NSUInteger)hash {
  int prime = 31;
  int result = 1;
  result = prime * result + [((NSString *) nil_chk([self description])) hash];
  return result;
}

- (ComGoodowRealtimeOperationAbstractOperation *)invert {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [((JavaLangStringBuilder *) [[JavaLangStringBuilder alloc] init]) appendWithChar:'['];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:type_])) appendWithChar:','];
  if (id__ == nil) {
    (void) [sb appendWithNSString:(NSString *) check_class_cast(nil, [NSString class])];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'"'])) appendWithNSString:id__])) appendWithChar:'"'];
  }
  (void) [sb appendWithChar:','];
  [self toStringWithJavaLangStringBuilder:sb];
  (void) [sb appendWithChar:']'];
  return [sb description];
}

- (IOSObjectArray *)transformWithWithComGoodowRealtimeOperationAbstractOperation:(ComGoodowRealtimeOperationAbstractOperation *)operation
                                                                     withBoolean:(BOOL)arrivedAfter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComGoodowRealtimeOperationUtilPair *)transformWithWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)serverOperation {
  NSAssert([(id) serverOperation isKindOfClass:[ComGoodowRealtimeOperationAbstractOperation class]] && [self isSameIdWithComGoodowRealtimeOperationAbstractOperation:(ComGoodowRealtimeOperationAbstractOperation *) check_class_cast(serverOperation, [ComGoodowRealtimeOperationAbstractOperation class])], @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/AbstractOperation.java:76 condition failed: assert serverOperation instanceof AbstractOperation\n        && isSameId((AbstractOperation<T>) serverOperation);");
  ComGoodowRealtimeOperationAbstractOperation *serverOp = (ComGoodowRealtimeOperationAbstractOperation *) check_class_cast(serverOperation, [ComGoodowRealtimeOperationAbstractOperation class]);
  IOSObjectArray *transformedClientOps = [self transformWithWithComGoodowRealtimeOperationAbstractOperation:serverOp withBoolean:YES];
  IOSObjectArray *transformedServerOps = [((ComGoodowRealtimeOperationAbstractOperation *) nil_chk(serverOp)) transformWithWithComGoodowRealtimeOperationAbstractOperation:self withBoolean:NO];
  return [ComGoodowRealtimeOperationUtilPair ofWithId:transformedClientOps withId:transformedServerOps];
}

- (IOSObjectArray *)asArrayWithNSObjectArray:(IOSObjectArray *)operations {
  return operations;
}

- (BOOL)isSameIdWithComGoodowRealtimeOperationAbstractOperation:(ComGoodowRealtimeOperationAbstractOperation *)operation {
  NSString *id2 = ((ComGoodowRealtimeOperationAbstractOperation *) nil_chk(operation))->id__;
  return id__ == nil ? id2 == nil : [id__ isEqual:id2];
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyWithId:(id)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeOperationAbstractOperation *)other {
  [super copyAllFieldsTo:other];
  other->id__ = id__;
  other->type_ = type_;
}

+ (IOSObjectArray *)__annotations_asArrayWithNSObjectArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangSafeVarargsImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
