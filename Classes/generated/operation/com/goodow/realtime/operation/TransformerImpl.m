//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/operation/AbstractOperation.h"
#include "com/goodow/realtime/operation/Operation.h"
#include "com/goodow/realtime/operation/RealtimeOperation.h"
#include "com/goodow/realtime/operation/TransformerImpl.h"
#include "com/goodow/realtime/operation/create/CreateOperation.h"
#include "com/goodow/realtime/operation/cursor/ReferenceShiftedOperation.h"
#include "com/goodow/realtime/operation/list/AbstractDeleteOperation.h"
#include "com/goodow/realtime/operation/list/AbstractInsertOperation.h"
#include "com/goodow/realtime/operation/list/AbstractReplaceOperation.h"
#include "com/goodow/realtime/operation/list/SimpleDeleteOperation.h"
#include "com/goodow/realtime/operation/list/json/JsonHelper.h"
#include "com/goodow/realtime/operation/list/json/JsonInsertOperation.h"
#include "com/goodow/realtime/operation/list/json/JsonReplaceOperation.h"
#include "com/goodow/realtime/operation/list/string/StringHelper.h"
#include "com/goodow/realtime/operation/list/string/StringInsertOperation.h"
#include "com/goodow/realtime/operation/map/AbstractMapOperation.h"
#include "com/goodow/realtime/operation/map/json/JsonMapOperation.h"
#include "com/goodow/realtime/operation/util/Pair.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonValue.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@implementation ComGoodowRealtimeOperationTransformerImpl

- (id<JavaUtilList>)compactWithJavaUtilList:(id<JavaUtilList>)operations {
  return operations;
}

- (ComGoodowRealtimeOperationAbstractOperation *)createOperationWithGDRJsonArray:(id<GDRJsonArray>)serialized {
  ComGoodowRealtimeOperationAbstractOperation *op = nil;
  switch ((int) [((id<GDRJsonArray>) nil_chk(serialized)) getNumberWithInt:0]) {
    case ComGoodowRealtimeOperationCreateCreateOperation_TYPE:
    op = [ComGoodowRealtimeOperationCreateCreateOperation parseWithGDRJsonArray:serialized];
    break;
    case ComGoodowRealtimeOperationMapAbstractMapOperation_TYPE:
    op = [ComGoodowRealtimeOperationMapJsonJsonMapOperation parseWithGDRJsonArray:serialized];
    break;
    case ComGoodowRealtimeOperationListAbstractInsertOperation_TYPE:
    switch ((int) [((id<GDRJsonArray>) nil_chk([serialized getArrayWithInt:3])) getNumberWithInt:0]) {
      case ComGoodowRealtimeOperationListJsonJsonHelper_TYPE:
      op = [ComGoodowRealtimeOperationListJsonJsonInsertOperation parseWithGDRJsonArray:serialized];
      break;
      case ComGoodowRealtimeOperationListStringStringHelper_TYPE:
      op = [ComGoodowRealtimeOperationListStringStringInsertOperation parseWithGDRJsonArray:serialized];
      break;
      default:
      @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknow insert operation sub-type: %@", [serialized toJson]]];
    }
    break;
    case ComGoodowRealtimeOperationListAbstractDeleteOperation_TYPE:
    op = [ComGoodowRealtimeOperationListSimpleDeleteOperation parseWithGDRJsonArray:serialized];
    break;
    case ComGoodowRealtimeOperationListAbstractReplaceOperation_TYPE:
    op = [ComGoodowRealtimeOperationListJsonJsonReplaceOperation parseWithGDRJsonArray:serialized];
    break;
    case ComGoodowRealtimeOperationCursorReferenceShiftedOperation_TYPE:
    op = [ComGoodowRealtimeOperationCursorReferenceShiftedOperation parseWithGDRJsonArray:serialized];
    break;
    default:
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknow operation type: %@", [serialized toJson]]];
  }
  return op;
}

- (id)createOperationWithNSString:(NSString *)userId
                     withNSString:(NSString *)sessionId
                 withGDRJsonValue:(id<GDRJsonValue>)serialized {
  id<GDRJsonArray> ops = (id<GDRJsonArray>) check_protocol_cast(serialized, @protocol(GDRJsonArray));
  int length = [((id<GDRJsonArray>) nil_chk(ops)) length];
  NSAssert(length > 0, @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/TransformerImpl.java:87 condition failed: assert length > 0;");
  id<JavaUtilList> operations = [[JavaUtilArrayList alloc] initWithInt:length];
  for (int i = 0; i < length; i++) {
    [operations addWithId:[self createOperationWithGDRJsonArray:[ops getArrayWithInt:i]]];
  }
  return (id<ComGoodowRealtimeOperationOperation>) [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithNSString:userId withNSString:sessionId withJavaUtilList:operations];
}

- (ComGoodowRealtimeOperationUtilPair *)transformWithJavaUtilList:(id<JavaUtilList>)clientOps
                                                 withJavaUtilList:(id<JavaUtilList>)serverOps {
  NSAssert(![((id<JavaUtilList>) nil_chk(clientOps)) containsWithId:nil] && ![((id<JavaUtilList>) nil_chk(serverOps)) containsWithId:nil], @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/TransformerImpl.java:97 condition failed: assert !clientOps.contains(null) && !serverOps.contains(null);");
  id<JavaUtilList> transformedClientOps = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> transformedServerOps = [[JavaUtilLinkedList alloc] initWithJavaUtilCollection:serverOps];
  for (id<ComGoodowRealtimeOperationOperation> __strong clientOp in clientOps) {
    [self transformWithJavaUtilList:transformedClientOps withId:clientOp withJavaUtilList:transformedServerOps withInt:0 withBoolean:YES];
  }
  return [ComGoodowRealtimeOperationUtilPair ofWithId:transformedClientOps withId:transformedServerOps];
}

- (void)transformWithJavaUtilList:(id<JavaUtilList>)transformedResults
                           withId:(id<ComGoodowRealtimeOperationOperation>)operation
                 withJavaUtilList:(id<JavaUtilList>)operations
                          withInt:(int)startIndex
                      withBoolean:(BOOL)arrivedAfter {
  NSAssert(operation != nil, @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/TransformerImpl.java:109 condition failed: assert operation != null;");
  if (startIndex == [((id<JavaUtilList>) nil_chk(operations)) size]) {
    [((id<JavaUtilList>) nil_chk(transformedResults)) addWithId:operation];
    return;
  }
  id<ComGoodowRealtimeOperationOperation> op1 = [operations getWithInt:startIndex];
  NSAssert(op1 != nil, @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/TransformerImpl.java:116 condition failed: assert op1 != null;");
  if ([operation isKindOfClass:[ComGoodowRealtimeOperationAbstractOperation class]] && ![((ComGoodowRealtimeOperationAbstractOperation *) nil_chk(operation)) isSameIdWithComGoodowRealtimeOperationAbstractOperation:(ComGoodowRealtimeOperationAbstractOperation *) check_class_cast(op1, [ComGoodowRealtimeOperationAbstractOperation class])]) {
    [self transformWithJavaUtilList:transformedResults withId:operation withJavaUtilList:operations withInt:++startIndex withBoolean:arrivedAfter];
    return;
  }
  ComGoodowRealtimeOperationUtilPair *pair = arrivedAfter ? [((id<ComGoodowRealtimeOperationOperation>) nil_chk(operation)) transformWithWithComGoodowRealtimeOperationOperation:op1] : [((id<ComGoodowRealtimeOperationOperation>) nil_chk(op1)) transformWithWithComGoodowRealtimeOperationOperation:operation];
  IOSObjectArray *transformedOps1 = arrivedAfter ? pair->second_ : pair->first_;
  (void) [operations removeWithInt:startIndex];
  if (transformedOps1 != nil) {
    {
      IOSObjectArray *a__ = transformedOps1;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<ComGoodowRealtimeOperationOperation> op = (*b__++);
        [operations addWithInt:startIndex++ withId:op];
      }
    }
  }
  IOSObjectArray *transformedOps0 = arrivedAfter ? pair->first_ : pair->second_;
  if (transformedOps0 == nil) {
    return;
  }
  else {
    {
      IOSObjectArray *a__ = transformedOps0;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<ComGoodowRealtimeOperationOperation> op = (*b__++);
        [self transformWithJavaUtilList:transformedResults withId:op withJavaUtilList:operations withInt:startIndex withBoolean:arrivedAfter];
      }
    }
  }
}

- (id)init {
  return [super init];
}

@end
