//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "com/goodow/realtime/operation/undo/UndoManagerImpl.h"
#include "com/goodow/realtime/operation/undo/UndoStack.h"
#include "com/goodow/realtime/operation/util/Pair.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"

@implementation ComGoodowRealtimeOperationUndoUndoManagerImpl

- (id)initWithComGoodowRealtimeOperationUndoUndoManagerImpl_Algorithms:(id<ComGoodowRealtimeOperationUndoUndoManagerImpl_Algorithms>)algorithms {
  if (self = [super init]) {
    undoStack_ = [[ComGoodowRealtimeOperationUndoUndoStack alloc] initWithComGoodowRealtimeOperationUndoUndoManagerImpl_Algorithms:algorithms];
    redoStack_ = [[ComGoodowRealtimeOperationUndoUndoStack alloc] initWithComGoodowRealtimeOperationUndoUndoManagerImpl_Algorithms:algorithms];
  }
  return self;
}

- (BOOL)canRedo {
  return ![((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(redoStack_)) isEmpty];
}

- (BOOL)canUndo {
  return ![((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(undoStack_)) isEmpty];
}

- (void)checkpoint {
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(undoStack_)) checkpoint];
}

- (void)nonUndoableOpWithId:(id)op {
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(undoStack_)) nonUndoableOperationWithId:op];
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(redoStack_)) nonUndoableOperationWithId:op];
}

- (id<JavaUtilList>)redo {
  ComGoodowRealtimeOperationUtilPair *redoPlus = [self redoPlus];
  return ((ComGoodowRealtimeOperationUtilPair *) nil_chk(redoPlus))->first_;
}

- (ComGoodowRealtimeOperationUtilPair *)redoPlus {
  if (![self canRedo]) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Redo stack is empty."];
  }
  ComGoodowRealtimeOperationUtilPair *pair = [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(redoStack_)) pop];
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(undoStack_)) checkpoint];
  for (id __strong op in ((ComGoodowRealtimeOperationUtilPair *) nil_chk(pair))->first_) {
    [undoStack_ pushWithId:op];
  }
  return pair;
}

- (id<JavaUtilList>)undo {
  ComGoodowRealtimeOperationUtilPair *undoPlus = [self undoPlus];
  return ((ComGoodowRealtimeOperationUtilPair *) nil_chk(undoPlus))->first_;
}

- (void)undoableOpWithId:(id)op {
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(undoStack_)) pushWithId:op];
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(redoStack_)) clear];
}

- (ComGoodowRealtimeOperationUtilPair *)undoPlus {
  if (![self canUndo]) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Undo stack is empty."];
  }
  ComGoodowRealtimeOperationUtilPair *pair = [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(undoStack_)) pop];
  [((ComGoodowRealtimeOperationUndoUndoStack *) nil_chk(redoStack_)) checkpoint];
  for (id __strong op in ((ComGoodowRealtimeOperationUtilPair *) nil_chk(pair))->first_) {
    [redoStack_ pushWithId:op];
  }
  return pair;
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeOperationUndoUndoManagerImpl *)other {
  [super copyAllFieldsTo:other];
  other->redoStack_ = redoStack_;
  other->undoStack_ = undoStack_;
}

@end
