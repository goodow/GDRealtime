//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/operation/Operation.h"
#include "com/goodow/realtime/operation/RealtimeOperation.h"
#include "com/goodow/realtime/operation/TransformerImpl.h"
#include "com/goodow/realtime/operation/util/Pair.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@implementation ComGoodowRealtimeOperationRealtimeOperation

- (id)initComGoodowRealtimeOperationRealtimeOperationWithNSString:(NSString *)userId
                                                     withNSString:(NSString *)sessionId
                                                 withJavaUtilList:(id<JavaUtilList>)operations {
  if (self = [super init]) {
    NSAssert(operations != nil && ![operations isEmpty] && ![operations containsWithId:nil], @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:30 condition failed: assert operations != null && !operations.isEmpty() && !operations.contains(null);");
    self->userId_ = userId;
    self->sessionId_ = sessionId;
    self->operations_ = [JavaUtilCollections unmodifiableListWithJavaUtilList:operations];
  }
  return self;
}

- (id)initWithNSString:(NSString *)userId
          withNSString:(NSString *)sessionId
      withJavaUtilList:(id<JavaUtilList>)operations {
  return [self initComGoodowRealtimeOperationRealtimeOperationWithNSString:userId withNSString:sessionId withJavaUtilList:operations];
}

- (id)initWithNSString:(NSString *)userId
          withNSString:(NSString *)sessionId
withComGoodowRealtimeOperationOperationArray:(IOSObjectArray *)operations {
  return [self initComGoodowRealtimeOperationRealtimeOperationWithNSString:userId withNSString:sessionId withJavaUtilList:[JavaUtilArrays asListWithNSObjectArray:operations]];
}

- (void)applyWithId:(id)target {
  for (id<ComGoodowRealtimeOperationOperation> __strong op in operations_) {
    [((id<ComGoodowRealtimeOperationOperation>) nil_chk(op)) applyWithId:target];
  }
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj == nil) {
    return NO;
  }
  if (!([obj isKindOfClass:[ComGoodowRealtimeOperationRealtimeOperation class]])) {
    return NO;
  }
  ComGoodowRealtimeOperationRealtimeOperation *other = (ComGoodowRealtimeOperationRealtimeOperation *) check_class_cast(obj, [ComGoodowRealtimeOperationRealtimeOperation class]);
  if (operations_ == nil) {
    if (((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(other))->operations_ != nil) {
      return NO;
    }
  }
  else if (![operations_ isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(other))->operations_]) {
    return NO;
  }
  if (sessionId_ == nil) {
    if (((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(other))->sessionId_ != nil) {
      return NO;
    }
  }
  else if (![sessionId_ isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(other))->sessionId_]) {
    return NO;
  }
  if (userId_ == nil) {
    if (((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(other))->userId_ != nil) {
      return NO;
    }
  }
  else if (![userId_ isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(other))->userId_]) {
    return NO;
  }
  return YES;
}

- (NSUInteger)hash {
  int prime = 31;
  int result = 1;
  result = prime * result + ((operations_ == nil) ? 0 : [operations_ hash]);
  result = prime * result + ((sessionId_ == nil) ? 0 : [sessionId_ hash]);
  result = prime * result + ((userId_ == nil) ? 0 : [userId_ hash]);
  return result;
}

- (ComGoodowRealtimeOperationRealtimeOperation *)invert {
  int size = [((id<JavaUtilList>) nil_chk(operations_)) size];
  id<JavaUtilList> ops = [[JavaUtilArrayList alloc] initWithInt:size];
  for (int i = size - 1; i >= 0; i--) {
    id<ComGoodowRealtimeOperationOperation> invertOp = [((id<ComGoodowRealtimeOperationOperation>) nil_chk([operations_ getWithInt:i])) invert];
    if (invertOp != nil) {
      [ops addWithId:invertOp];
    }
  }
  return [ops isEmpty] ? nil : [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithNSString:userId_ withNSString:sessionId_ withJavaUtilList:ops];
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk(operations_)) description];
}

- (ComGoodowRealtimeOperationUtilPair *)transformWithWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)serverOperation {
  NSAssert([(id) serverOperation isKindOfClass:[ComGoodowRealtimeOperationRealtimeOperation class]], @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:116 condition failed: assert serverOperation instanceof RealtimeOperation;");
  ComGoodowRealtimeOperationRealtimeOperation *serverOp = (ComGoodowRealtimeOperationRealtimeOperation *) check_class_cast(serverOperation, [ComGoodowRealtimeOperationRealtimeOperation class]);
  ComGoodowRealtimeOperationTransformerImpl *transformer = [[ComGoodowRealtimeOperationTransformerImpl alloc] init];
  ComGoodowRealtimeOperationUtilPair *pair = [transformer transformWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(operations_, @protocol(JavaUtilList)) withJavaUtilList:(id<JavaUtilList>) check_protocol_cast(((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(serverOp))->operations_, @protocol(JavaUtilList))];
  IOSObjectArray *transformedClientOp = [((id<JavaUtilList>) nil_chk(((ComGoodowRealtimeOperationUtilPair *) nil_chk(pair))->first_)) isEmpty] ? nil : [IOSObjectArray arrayWithObjects:(id[]){ [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithNSString:userId_ withNSString:sessionId_ withJavaUtilList:pair->first_] } count:1 type:[IOSClass classWithClass:[ComGoodowRealtimeOperationRealtimeOperation class]]];
  IOSObjectArray *transformedServerOp = [((id<JavaUtilList>) nil_chk(pair->second_)) isEmpty] ? nil : [IOSObjectArray arrayWithObjects:(id[]){ [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithNSString:serverOp->userId_ withNSString:serverOp->sessionId_ withJavaUtilList:pair->second_] } count:1 type:[IOSClass classWithClass:[ComGoodowRealtimeOperationRealtimeOperation class]]];
  return [ComGoodowRealtimeOperationUtilPair ofWithId:transformedClientOp withId:transformedServerOp];
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeOperationRealtimeOperation *)other {
  [super copyAllFieldsTo:other];
  other->operations_ = operations_;
  other->sessionId_ = sessionId_;
  other->userId_ = userId_;
}

@end
