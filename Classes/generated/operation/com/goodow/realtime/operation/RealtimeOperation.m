//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/operation/RealtimeOperation.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSObjectArray.h"
#import "com/goodow/realtime/operation/Operation.h"
#import "com/goodow/realtime/operation/RealtimeOperation.h"
#import "com/goodow/realtime/util/Pair.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/UnsupportedOperationException.h"

@implementation ComGoodowRealtimeOperationRealtimeOperation

- (id<ComGoodowRealtimeOperationOperation>)op {
  return op_;
}
- (void)setOp:(id<ComGoodowRealtimeOperationOperation>)op {
  JreOperatorRetainedAssign(&op_, op);
}
@synthesize op = op_;
- (NSString *)userId {
  return userId_;
}
- (void)setUserId:(NSString *)userId {
  JreOperatorRetainedAssign(&userId_, userId);
}
@synthesize userId = userId_;
- (NSString *)sessionId {
  return sessionId_;
}
- (void)setSessionId:(NSString *)sessionId {
  JreOperatorRetainedAssign(&sessionId_, sessionId);
}
@synthesize sessionId = sessionId_;

- (id)initWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)op {
  return [self initComGoodowRealtimeOperationRealtimeOperationWithComGoodowRealtimeOperationOperation:op withNSString:nil withNSString:nil];
}

- (id)initComGoodowRealtimeOperationRealtimeOperationWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)op
                                                                                withNSString:(NSString *)userId
                                                                                withNSString:(NSString *)sessionId {
  if ((self = [super init])) {
    self.op = op;
    self.userId = userId;
    self.sessionId = sessionId;
  }
  return self;
}

- (id)initWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)op
                                     withNSString:(NSString *)userId
                                     withNSString:(NSString *)sessionId {
  return [self initComGoodowRealtimeOperationRealtimeOperationWithComGoodowRealtimeOperationOperation:op withNSString:userId withNSString:sessionId];
}

- (void)applyWithId:(id)target {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (ComGoodowRealtimeOperationRealtimeOperation *)composeWithWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)operation {
  NSAssert([(id) operation isKindOfClass:[ComGoodowRealtimeOperationRealtimeOperation class]], @"src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:41 condition failed: assert operation instanceof RealtimeOperation;");
  NSAssert(![self isNoOp] && ![((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(operation)) isNoOp], @"src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:42 condition failed: assert !isNoOp() && !operation.isNoOp();");
  ComGoodowRealtimeOperationRealtimeOperation *op = (ComGoodowRealtimeOperationRealtimeOperation *) operation;
  NSAssert([self getType] == [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getType] && [[self getId] isEqual:[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getId]] && [NIL_CHK(sessionId_) isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)).sessionId] && [NIL_CHK(userId_) isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)).userId], @"src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:44 condition failed: assert getType() == op.getType() && getId().equals(op.getId())\n        && sessionId.equals(op.sessionId) && userId.equals(op.userId);");
  id<ComGoodowRealtimeOperationOperation> composition = ((id<ComGoodowRealtimeOperationOperation>) [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(self.op)) composeWithWithComGoodowRealtimeOperationOperation:((id<ComGoodowRealtimeOperationOperation>) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getOp])]);
  [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(composition)) setIdWithNSString:[self getId]];
  return [[[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:composition withNSString:userId_ withNSString:sessionId_] autorelease];
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj == nil) {
    return NO;
  }
  if (!([obj isKindOfClass:[ComGoodowRealtimeOperationRealtimeOperation class]])) {
    return NO;
  }
  ComGoodowRealtimeOperationRealtimeOperation *other = (ComGoodowRealtimeOperationRealtimeOperation *) obj;
  if (op_ == nil) {
    if (((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(other)).op != nil) {
      return NO;
    }
  }
  else if (![op_ isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(other)).op]) {
    return NO;
  }
  if (sessionId_ == nil) {
    if (((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(other)).sessionId != nil) {
      return NO;
    }
  }
  else if (![sessionId_ isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(other)).sessionId]) {
    return NO;
  }
  if (userId_ == nil) {
    if (((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(other)).userId != nil) {
      return NO;
    }
  }
  else if (![userId_ isEqual:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(other)).userId]) {
    return NO;
  }
  return YES;
}

- (NSString *)getId {
  return [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) getId];
}

- (id<ComGoodowRealtimeOperationOperation>)getOp {
  return (id<ComGoodowRealtimeOperationOperation>) op_;
}

- (int)getType {
  return [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) getType];
}

- (NSUInteger)hash {
  int prime = 31;
  int result = 1;
  result = prime * result + ((op_ == nil) ? 0 : [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) hash]);
  result = prime * result + ((sessionId_ == nil) ? 0 : [NIL_CHK(sessionId_) hash]);
  result = prime * result + ((userId_ == nil) ? 0 : [NIL_CHK(userId_) hash]);
  return result;
}

- (id<ComGoodowRealtimeOperationOperation>)invert {
  return [[[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:((id<ComGoodowRealtimeOperationOperation>) [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) invert]) withNSString:userId_ withNSString:sessionId_] autorelease];
}

- (BOOL)isNoOp {
  return [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) isNoOp];
}

- (void)setIdWithNSString:(NSString *)id_ {
  [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) setIdWithNSString:id_];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] init] autorelease];
  [[[[[[[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"["] appendWithInt:[((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) getType]] appendWithNSString:@",\""] appendWithNSString:[self getId]] appendWithNSString:@"\","] appendWithNSString:[((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op_)) description]] appendWithNSString:@"]"];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

- (ComGoodowRealtimeUtilPair *)transformWithWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)clientOp {
  NSAssert(![self isNoOp] && ![((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(clientOp)) isNoOp], @"src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:140 condition failed: assert !isNoOp() && !clientOp.isNoOp();");
  NSAssert([(id) clientOp isKindOfClass:[ComGoodowRealtimeOperationRealtimeOperation class]], @"src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:141 condition failed: assert clientOp instanceof RealtimeOperation;");
  ComGoodowRealtimeOperationRealtimeOperation *op = (ComGoodowRealtimeOperationRealtimeOperation *) clientOp;
  if (![[self getId] isEqual:[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getId]]) {
    return ((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:self withId:op]);
  }
  NSAssert([self getType] == [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getType] && [[self getId] isEqual:[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getId]], @"src/main/java/com/goodow/realtime/operation/RealtimeOperation.java:146 condition failed: assert getType() == op.getType() && getId().equals(op.getId());");
  ComGoodowRealtimeUtilPair *pair = ((ComGoodowRealtimeUtilPair *) [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(self.op)) transformWithWithComGoodowRealtimeOperationOperation:((id<ComGoodowRealtimeOperationOperation>) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)) getOp])]);
  [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(pair.first)) setIdWithNSString:[self getId]];
  [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(pair.second)) setIdWithNSString:[self getId]];
  ComGoodowRealtimeOperationRealtimeOperation *transformedServerOp = [[[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:((ComGoodowRealtimeUtilPair *) NIL_CHK(pair)).first withNSString:userId_ withNSString:sessionId_] autorelease];
  ComGoodowRealtimeOperationRealtimeOperation *transformedClientOp = [[[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:((ComGoodowRealtimeUtilPair *) NIL_CHK(pair)).second withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)).userId withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(op)).sessionId] autorelease];
  return ((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:transformedServerOp withId:transformedClientOp]);
}

- (void)dealloc {
  JreOperatorRetainedAssign(&sessionId_, nil);
  JreOperatorRetainedAssign(&userId_, nil);
  JreOperatorRetainedAssign(&op_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeOperationRealtimeOperation *typedCopy = (ComGoodowRealtimeOperationRealtimeOperation *) copy;
  typedCopy.op = op_;
  typedCopy.userId = userId_;
  typedCopy.sessionId = sessionId_;
}

@end
