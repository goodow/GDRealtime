//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/operation/AbstractOperation.h"
#include "com/goodow/realtime/operation/list/AbstractDeleteOperation.h"
#include "com/goodow/realtime/operation/list/AbstractInsertOperation.h"
#include "com/goodow/realtime/operation/list/AbstractListOperation.h"
#include "com/goodow/realtime/operation/list/AbstractReplaceOperation.h"
#include "com/goodow/realtime/operation/list/ListHelper.h"
#include "com/goodow/realtime/operation/list/ListTarget.h"
#include "java/lang/RuntimeException.h"

@implementation ComGoodowRealtimeOperationListAbstractReplaceOperation

+ (int)TYPE {
  return ComGoodowRealtimeOperationListAbstractReplaceOperation_TYPE;
}

- (id)initWithNSString:(NSString *)id_
               withInt:(int)startIndex
                withId:(id)oldValues
                withId:(id)newValues {
  if (self = [super initWithInt:ComGoodowRealtimeOperationListAbstractReplaceOperation_TYPE withNSString:id_ withInt:startIndex withId:newValues withInt:-1]) {
    self->oldValues_ = oldValues;
    NSAssert(oldValues == nil || [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) lengthWithId:oldValues] == length_, @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/list/AbstractReplaceOperation.java:26 condition failed: assert oldValues == null || getHelper().length(oldValues) == length;");
  }
  return self;
}

- (void)applyWithId:(id<ComGoodowRealtimeOperationListListTarget>)target {
  [((id<ComGoodowRealtimeOperationListListTarget>) nil_chk(target)) replaceWithInt:startIndex_ withId:values_];
}

- (int)transformIndexReferenceWithInt:(int)index
                          withBoolean:(BOOL)rigthSide
                          withBoolean:(BOOL)canBeDeleted {
  return index;
}

- (IOSObjectArray *)transformWithWithComGoodowRealtimeOperationAbstractOperation:(ComGoodowRealtimeOperationAbstractOperation *)operation
                                                                     withBoolean:(BOOL)arrivedAfter {
  NSAssert([operation isKindOfClass:[ComGoodowRealtimeOperationListAbstractListOperation class]] && [self isSameIdWithComGoodowRealtimeOperationAbstractOperation:operation], @"/Users/retechretech/dev/workspace/realtime/realtime-operation/src/main/java/com/goodow/realtime/operation/list/AbstractReplaceOperation.java:42 condition failed: assert operation instanceof AbstractListOperation && isSameId(operation);");
  ComGoodowRealtimeOperationListAbstractListOperation *op = (ComGoodowRealtimeOperationListAbstractListOperation *) check_class_cast(operation, [ComGoodowRealtimeOperationListAbstractListOperation class]);
  int endIndex0 = startIndex_ + length_;
  int endIndex1 = ((ComGoodowRealtimeOperationListAbstractListOperation *) nil_chk(op))->startIndex_ + op->length_;
  switch (op->type_) {
    case ComGoodowRealtimeOperationListAbstractInsertOperation_TYPE:
    if (op->startIndex_ <= startIndex_) {
      return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ + op->length_ withId:oldValues_ withId:values_] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else if (op->startIndex_ < endIndex0) {
      int len0 = op->startIndex_ - startIndex_;
      return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:0 withInt:len0] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:0 withInt:len0]], [self createWithInt:endIndex1 withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:len0 withInt:length_ - len0] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:len0 withInt:length_ - len0]] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else {
      return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    case ComGoodowRealtimeOperationListAbstractDeleteOperation_TYPE:
    if (op->startIndex_ >= endIndex0) {
      return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else if (endIndex1 <= startIndex_) {
      return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ - op->length_ withId:oldValues_ withId:values_] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else if (op->startIndex_ <= startIndex_) {
      return endIndex1 < endIndex0 ? [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:op->startIndex_ withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]] : nil;
    }
    else {
      return endIndex1 < endIndex0 ? [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) replaceWithWithId:oldValues_ withInt:op->startIndex_ - startIndex_ withInt:op->length_ withId:nil] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) replaceWithWithId:values_ withInt:op->startIndex_ - startIndex_ withInt:op->length_ withId:nil]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]] : [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:0 withInt:op->startIndex_ - startIndex_] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:0 withInt:op->startIndex_ - startIndex_]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    case ComGoodowRealtimeOperationListAbstractReplaceOperation_TYPE:
    if (endIndex1 <= startIndex_ || op->startIndex_ >= endIndex0 || (arrivedAfter && oldValues_ == nil)) {
      return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else if (op->startIndex_ <= startIndex_) {
      if (arrivedAfter) {
        id transformedOldValues = endIndex1 < endIndex0 ? [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:op->values_ withInt:startIndex_ - op->startIndex_ withInt:endIndex1 - startIndex_ withId:oldValues_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1] : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:op->values_ withInt:startIndex_ - op->startIndex_ withInt:length_];
        return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ withId:transformedOldValues withId:values_] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      else {
        return endIndex1 < endIndex0 ? [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:endIndex1 withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]] : nil;
      }
    }
    else {
      if (arrivedAfter) {
        id transformedOldValues = endIndex1 < endIndex0 ? [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) replaceWithWithId:oldValues_ withInt:op->startIndex_ - startIndex_ withInt:op->length_ withId:op->values_] : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:0 withInt:op->startIndex_ - startIndex_ withId:op->values_ withInt:0 withInt:endIndex0 - op->startIndex_];
        return [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self createWithInt:startIndex_ withId:transformedOldValues withId:values_] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      else {
        ComGoodowRealtimeOperationListAbstractReplaceOperation *op1 = [self createWithInt:startIndex_ withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:0 withInt:op->startIndex_ - startIndex_] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:0 withInt:op->startIndex_ - startIndex_]];
        return endIndex1 < endIndex0 ? [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ op1, [self createWithInt:endIndex1 withId:oldValues_ == nil ? nil : [((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:oldValues_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1] withId:[((id<ComGoodowRealtimeOperationListListHelper>) nil_chk([self getHelper])) subsetWithId:values_ withInt:endIndex1 - startIndex_ withInt:endIndex0 - endIndex1]] } count:2 type:[IOSClass classWithClass:[NSObject class]]]] : [self asArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ op1 } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
    }
    default:
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported List Operation type: %d", op->type_]];
  }
}

- (ComGoodowRealtimeOperationListAbstractReplaceOperation *)createWithInt:(int)startIndex
                                                                   withId:(id)oldValues
                                                                   withId:(id)newValues {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeOperationListAbstractReplaceOperation *)other {
  [super copyAllFieldsTo:other];
  other->oldValues_ = oldValues_;
}

@end
