//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/operation/list/ArrayOp.java
//
//  Created by retechretech on 13-5-25.
//

#import "com/goodow/realtime/operation/list/ArrayOp.h"
#import "com/goodow/realtime/operation/list/algorithm/ListHelper.h"
#import "com/goodow/realtime/operation/list/algorithm/ListNormalizer.h"
#import "com/goodow/realtime/operation/list/algorithm/ListOp.h"
#import "elemental/json/Json.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonValue.h"

@implementation ComGoodowRealtimeOperationListArrayOp

+ (int)TYPE {
  return ComGoodowRealtimeOperationListArrayOp_TYPE;
}

- (id)init {
  return [super init];
}

- (id)initWithBOOL:(BOOL)isInsert
           withInt:(int)idx
   withEMJsonArray:(id<EMJsonArray>)list
           withInt:(int)initLength {
  return [super initWithBOOL:isInsert withInt:idx withId:list withInt:initLength];
}

- (id)initWithEMJsonArray:(id<EMJsonArray>)serialized {
  return [super initWithEMJsonArray:serialized];
}

- (int)getType {
  return ComGoodowRealtimeOperationListArrayOp_TYPE;
}

- (id<ComGoodowRealtimeOperationListAlgorithmListHelper>)createListHelper {
  return [[[ComGoodowRealtimeOperationListArrayOp_ArrayHelper alloc] init] autorelease];
}

- (id<EMJsonArray>)fromJsonWithEMJsonValue:(id<EMJsonValue>)json {
  return (id<EMJsonArray>) json;
}

- (NSString *)toJsonWithId:(id<EMJsonArray>)list {
  return [((id<EMJsonArray>) NIL_CHK(list)) toJson];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ComGoodowRealtimeOperationListArrayOp_ArrayAppender

- (id<EMJsonArray>)array {
  return array_;
}
- (void)setArray:(id<EMJsonArray>)array {
  JreOperatorRetainedAssign(&array_, array);
}
@synthesize array = array_;

- (void)appendWithId:(id<EMJsonArray>)list {
  for (int i = 0, len = [((id<EMJsonArray>) NIL_CHK(list)) length]; i < len; i++) {
    [((id<EMJsonArray>) NIL_CHK(array_)) setWithInt:[((id<EMJsonArray>) NIL_CHK(array_)) length] withEMJsonValue:[((id<EMJsonArray>) NIL_CHK(list)) getWithInt:i]];
  }
}

- (id<EMJsonArray>)flush {
  @try {
    return array_;
  }
  @finally {
    JreOperatorRetainedAssign(&array_, [EMJson createArray]);
  }
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&array_, [EMJson createArray]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&array_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComGoodowRealtimeOperationListArrayOp_ArrayAppender *typedCopy = (ComGoodowRealtimeOperationListArrayOp_ArrayAppender *) copy;
  typedCopy.array = array_;
}

@end
@implementation ComGoodowRealtimeOperationListArrayOp_ArrayHelper

- (ComGoodowRealtimeOperationListAlgorithmListNormalizer *)createNormalizer {
  return [[[ComGoodowRealtimeOperationListArrayOp_ArrayNormalizer alloc] init] autorelease];
}

- (int)lengthWithId:(id<EMJsonArray>)list {
  return [((id<EMJsonArray>) NIL_CHK(list)) length];
}

- (ComGoodowRealtimeOperationListAlgorithmListOp *)newOp OBJC_METHOD_FAMILY_NONE {
  return [[[ComGoodowRealtimeOperationListArrayOp alloc] init] autorelease];
}

- (BOOL)startsWithWithId:(id<EMJsonArray>)list
                  withId:(id<EMJsonArray>)prefix {
  NSAssert([((id<EMJsonArray>) NIL_CHK(list)) length] >= [((id<EMJsonArray>) NIL_CHK(prefix)) length], @"src/main/java/com/goodow/realtime/operation/list/ArrayOp.java:63 condition failed: assert list.length() >= prefix.length();");
  for (int i = 0, len = [((id<EMJsonArray>) NIL_CHK(prefix)) length]; i < len; i++) {
    if (([((id<EMJsonArray>) NIL_CHK(prefix)) getWithInt:i] == nil && [((id<EMJsonArray>) NIL_CHK(list)) getWithInt:i] != nil) || ([((id<EMJsonArray>) NIL_CHK(prefix)) getWithInt:i] != nil && [((id<EMJsonArray>) NIL_CHK(list)) getWithInt:i] == nil) || ![[((id<EMJsonValue>) [((id<EMJsonArray>) NIL_CHK(prefix)) getWithInt:i]) toJson] isEqual:[((id<EMJsonValue>) [((id<EMJsonArray>) NIL_CHK(list)) getWithInt:i]) toJson]]) {
      return NO;
    }
  }
  return YES;
}

- (id<EMJsonArray>)subsetWithId:(id<EMJsonArray>)list
                        withInt:(int)beginIdx {
  return [self subsetWithId:list withInt:beginIdx withInt:[((id<EMJsonArray>) NIL_CHK(list)) length]];
}

- (id<EMJsonArray>)subsetWithId:(id<EMJsonArray>)list
                        withInt:(int)beginIdx
                        withInt:(int)endIdx {
  id<EMJsonArray> array = [EMJson createArray];
  for (int i = beginIdx; i < endIdx; i++) {
    [((id<EMJsonArray>) NIL_CHK(array)) setWithInt:i - beginIdx withEMJsonValue:[((id<EMJsonArray>) NIL_CHK(list)) getWithInt:i]];
  }
  return array;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ComGoodowRealtimeOperationListArrayOp_ArrayNormalizer

- (id)init {
  return [super initWithComGoodowRealtimeOperationListAlgorithmListOp:[[[ComGoodowRealtimeOperationListArrayOp alloc] init] autorelease] withComGoodowRealtimeOperationListAlgorithmListNormalizer_Appender:[[[ComGoodowRealtimeOperationListArrayOp_ArrayAppender alloc] init] autorelease]];
}

- (BOOL)isEmptyWithId:(id<EMJsonArray>)list {
  return [((id<EMJsonArray>) NIL_CHK(list)) length] == 0;
}

- (void)dealloc {
  [super dealloc];
}

@end
