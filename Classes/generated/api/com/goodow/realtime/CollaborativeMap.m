//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/CollaborativeMap.h"
#include "com/goodow/realtime/CollaborativeObject.h"
#include "com/goodow/realtime/EventHandler.h"
#include "com/goodow/realtime/EventType.h"
#include "com/goodow/realtime/Model.h"
#include "com/goodow/realtime/ValueChangedEvent.h"
#include "com/goodow/realtime/model/util/JsonSerializer.h"
#include "com/goodow/realtime/model/util/ModelFactory.h"
#include "com/goodow/realtime/operation/Operation.h"
#include "com/goodow/realtime/operation/create/CreateOperation.h"
#include "com/goodow/realtime/operation/map/json/JsonMapOperation.h"
#include "elemental/json/Json.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonObject.h"
#include "elemental/json/JsonType.h"
#include "elemental/json/JsonValue.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/timepedia/exporter/client/Export.h"
#include "org/timepedia/exporter/client/ExportAfterCreateMethod.h"
#include "org/timepedia/exporter/client/ExportPackage.h"
#include "org/timepedia/exporter/client/NoExport.h"

@implementation GDRCollaborativeMap

- (id)initWithGDRModel:(GDRModel *)model {
  if (self = [super initWithGDRModel:model]) {
    snapshot_ = [GDRJson createObject];
  }
  return self;
}

- (void)addValueChangedListener:(GDRValueChangedBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum VALUE_CHANGED] withGDREventHandler:handler withBoolean:NO];
}

- (void)clear {
  [((GDRModel *) nil_chk(model_)) beginCompoundOperation:@"map.clear"];
  {
    IOSObjectArray *a__ = [self __keys];
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = (*b__++);
      (void) [self remove:key];
    }
  }
  [model_ endCompoundOperation];
}

- (id)get:(NSString *)key {
  [self checkKeyWithNSString:key];
  return (id) [ComGoodowRealtimeModelUtilJsonSerializer deserializeObjectWithGDRJsonValue:[((id<GDRJsonObject>) nil_chk(snapshot_)) getArrayWithNSString:key] withJavaUtilMap:((GDRModel *) nil_chk(model_))->objects_];
}

- (BOOL)has:(NSString *)key {
  [self checkKeyWithNSString:key];
  return [((id<GDRJsonObject>) nil_chk(snapshot_)) hasKeyWithNSString:key];
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (IOSObjectArray *)__items {
  IOSObjectArray *items = [IOSObjectArray arrayWithDimensions:2 lengths:(int[]){ [self size], 2 } type:[IOSClass classWithClass:[NSObject class]]];
  IOSObjectArray *keys = [self __keys];
  for (int i = 0, len = [self size]; i < len; i++) {
    IOSObjectArray *item = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[NSObject class]]];
    (void) IOSObjectArray_Set(item, 0, IOSObjectArray_Get(nil_chk(keys), i));
    (void) IOSObjectArray_Set(item, 1, [self get:IOSObjectArray_Get(keys, i)]);
    (void) IOSObjectArray_Set(items, i, item);
  }
  return items;
}

- (IOSObjectArray *)__keys {
  return [((id<GDRJsonObject>) nil_chk(snapshot_)) keys];
}

- (id)remove:(NSString *)key {
  [self checkKeyWithNSString:key];
  id oldValue = [self get:key];
  if (oldValue == nil) {
    return nil;
  }
  ComGoodowRealtimeOperationMapJsonJsonMapOperation *op = [[ComGoodowRealtimeOperationMapJsonJsonMapOperation alloc] initWithNSString:id__ withNSString:key withId:[((id<GDRJsonObject>) nil_chk(snapshot_)) getArrayWithNSString:key] withId:nil];
  [self consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  return oldValue;
}

- (void)removeValueChangedListener:(GDRValueChangedBlock)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum VALUE_CHANGED] withGDREventHandler:handler withBoolean:NO];
}

- (id)set:(NSString *)key value:(id)value {
  [self checkKeyWithNSString:key];
  id<GDRJsonArray> serializedValue = [ComGoodowRealtimeModelUtilJsonSerializer serializeObjectWithId:value];
  id oldObject = [self get:key];
  id<GDRJsonArray> oldValue = [((id<GDRJsonObject>) nil_chk(snapshot_)) getArrayWithNSString:key];
  if (![ComGoodowRealtimeOperationMapJsonJsonMapOperation jsonEqualsWithGDRJsonValue:oldValue withGDRJsonValue:serializedValue]) {
    ComGoodowRealtimeOperationMapJsonJsonMapOperation *op = [[ComGoodowRealtimeOperationMapJsonJsonMapOperation alloc] initWithNSString:id__ withNSString:key withId:oldValue withId:serializedValue];
    [self consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  }
  return oldObject;
}

- (int)size {
  return (int) [((IOSObjectArray *) nil_chk([self __keys])) count];
}

- (id<JavaUtilList>)__values {
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  IOSObjectArray *keys = [self __keys];
  for (int i = 0, len = [self size]; i < len; i++) {
    [values addWithId:[self get:IOSObjectArray_Get(nil_chk(keys), i)]];
  }
  return values;
}

- (void)consumeWithNSString:(NSString *)userId
               withNSString:(NSString *)sessionId
withComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)operation {
  [((id<ComGoodowRealtimeOperationOperation>) nil_chk(operation)) applyWithId:[[GDRCollaborativeMap_$1 alloc] initWithGDRCollaborativeMap:self withNSString:sessionId withNSString:userId withComGoodowRealtimeOperationOperation:operation]];
}

- (IOSObjectArray *)toInitialization {
  IOSObjectArray *toRtn = [IOSObjectArray arrayWithLength:1 + [self size] type:[IOSClass classWithProtocol:@protocol(ComGoodowRealtimeOperationOperation)]];
  (void) IOSObjectArray_Set(toRtn, 0, [[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:id__ withInt:ComGoodowRealtimeOperationCreateCreateOperation_MAP]);
  if (![self isEmpty]) {
    int i = 1;
    {
      IOSObjectArray *a__ = [self __keys];
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *key = (*b__++);
        (void) IOSObjectArray_Set(toRtn, i++, [[ComGoodowRealtimeOperationMapJsonJsonMapOperation alloc] initWithNSString:id__ withNSString:key withId:nil withId:[((id<GDRJsonObject>) nil_chk(snapshot_)) getWithNSString:key]]);
      }
    }
  }
  return toRtn;
}

- (void)toStringWithJavaUtilSet:(id<JavaUtilSet>)seen
      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([((id<JavaUtilSet>) nil_chk(seen)) containsWithId:id__]) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<Map: "])) appendWithNSString:id__])) appendWithNSString:@">"];
    return;
  }
  [seen addWithId:id__];
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"{"];
  BOOL isFirst = YES;
  {
    IOSObjectArray *a__ = [self __keys];
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = (*b__++);
      if (!isFirst) {
        (void) [sb appendWithNSString:@", "];
      }
      else {
        isFirst = NO;
      }
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:key])) appendWithNSString:@": "];
      id value = [self get:key];
      if ([value isKindOfClass:[GDRCollaborativeObject class]]) {
        GDRCollaborativeObject *obj = (GDRCollaborativeObject *) check_class_cast(value, [GDRCollaborativeObject class]);
        [((GDRCollaborativeObject *) nil_chk(obj)) toStringWithJavaUtilSet:seen withJavaLangStringBuilder:sb];
      }
      else {
        (void) [sb appendWithNSString:[NSString stringWithFormat:@"[JsonValue %@]", [((id<GDRJsonValue>) nil_chk([((id<GDRJsonArray>) nil_chk([((id<GDRJsonObject>) nil_chk(snapshot_)) getArrayWithNSString:key])) getWithInt:1])) toJson]]];
      }
    }
  }
  (void) [sb appendWithNSString:@"}"];
}

- (void)checkKeyWithNSString:(NSString *)key {
  if (key == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Expected string for key, but was: null"];
  }
}

- (void)putAndFireEventWithNSString:(NSString *)key
                   withGDRJsonValue:(id<GDRJsonValue>)newValue
                       withNSString:(NSString *)sessionId
                       withNSString:(NSString *)userId {
  NSAssert(nil != newValue && [GDRJsonTypeEnum NULL_] != [newValue getType], @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/CollaborativeMap.java:331 condition failed: assert null != newValue && JsonType.NULL != newValue.getType();");
  id newObject = [ComGoodowRealtimeModelUtilJsonSerializer deserializeObjectWithGDRJsonValue:newValue withJavaUtilMap:((GDRModel *) nil_chk(model_))->objects_];
  GDRValueChangedEvent *event = [[GDRValueChangedEvent alloc] initWithGDRCollaborativeMap:self withNSString:sessionId withNSString:userId withNSString:key withId:newObject withId:[self get:key]];
  if ([((id<GDRJsonObject>) nil_chk(snapshot_)) hasKeyWithNSString:key]) {
    id<GDRJsonArray> oldValue = [snapshot_ getArrayWithNSString:key];
    [model_ addOrRemoveParentWithGDRJsonValue:oldValue withNSString:id__ withBoolean:NO];
    model_->bytesUsed_ -= [((NSString *) nil_chk([((id<GDRJsonArray>) nil_chk(oldValue)) toJson])) length];
  }
  [snapshot_ putWithNSString:key withGDRJsonValue:newValue];
  [model_ addOrRemoveParentWithGDRJsonValue:newValue withNSString:id__ withBoolean:YES];
  [self fireEventWithGDRBaseModelEvent:event];
  model_->bytesUsed_ += [((NSString *) nil_chk([((id<GDRJsonValue>) nil_chk(newValue)) toJson])) length];
}

- (void)removeAndFireEventWithNSString:(NSString *)key
                          withNSString:(NSString *)sessionId
                          withNSString:(NSString *)userId {
  NSAssert([self has:key], @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/CollaborativeMap.java:347 condition failed: assert has(key);");
  id<GDRJsonArray> oldValue = [((id<GDRJsonObject>) nil_chk(snapshot_)) getArrayWithNSString:key];
  GDRValueChangedEvent *event = [[GDRValueChangedEvent alloc] initWithGDRCollaborativeMap:self withNSString:sessionId withNSString:userId withNSString:key withId:nil withId:[self get:key]];
  [snapshot_ removeWithNSString:key];
  [((GDRModel *) nil_chk(model_)) addOrRemoveParentWithGDRJsonValue:oldValue withNSString:id__ withBoolean:NO];
  [self fireEventWithGDRBaseModelEvent:event];
  model_->bytesUsed_ -= [((NSString *) nil_chk([((id<GDRJsonArray>) nil_chk(oldValue)) toJson])) length];
}

- (void)copyAllFieldsTo:(GDRCollaborativeMap *)other {
  [super copyAllFieldsTo:other];
  other->snapshot_ = snapshot_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportPackageImpl alloc] initWithValue:@"good.realtime"], [[OrgTimepediaExporterClientExportImpl alloc] initWithAll:true withValue:@""] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations___jsniRunAfter__ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportAfterCreateMethodImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_getWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations___items {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_removeWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_setWithNSString_withId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations___values {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation GDRCollaborativeMap_$1

- (void)setWithNSString:(NSString *)key
                 withId:(id<GDRJsonValue>)newValue {
  if (newValue == nil) {
    [this$0_ removeAndFireEventWithNSString:key withNSString:val$sessionId_ withNSString:val$userId_];
    ((GDRModel *) nil_chk(this$0_->model_))->bytesUsed_ -= [((NSString *) nil_chk([((id<ComGoodowRealtimeOperationOperation>) nil_chk(val$operation_)) description])) length];
    this$0_->model_->bytesUsed_ -= 2;
  }
  else {
    [this$0_ putAndFireEventWithNSString:key withGDRJsonValue:newValue withNSString:val$sessionId_ withNSString:val$userId_];
  }
}

- (id)initWithGDRCollaborativeMap:(GDRCollaborativeMap *)outer$
                     withNSString:(NSString *)capture$0
                     withNSString:(NSString *)capture$1
withComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)capture$2 {
  this$0_ = outer$;
  val$sessionId_ = capture$0;
  val$userId_ = capture$1;
  val$operation_ = capture$2;
  return [super init];
}

@end
