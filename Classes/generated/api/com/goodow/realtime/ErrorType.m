//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "com/goodow/realtime/ErrorType.h"
#include "com/goodow/realtime/model/util/ModelFactory.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/timepedia/exporter/client/Export.h"
#include "org/timepedia/exporter/client/ExportPackage.h"


static GDRErrorTypeEnum *GDRErrorTypeEnum_CLIENT_ERROR;
static GDRErrorTypeEnum *GDRErrorTypeEnum_CONCURRENT_CREATION;
static GDRErrorTypeEnum *GDRErrorTypeEnum_FORBIDDEN;
static GDRErrorTypeEnum *GDRErrorTypeEnum_INVALID_COMPOUND_OPERATION;
static GDRErrorTypeEnum *GDRErrorTypeEnum_NOT_FOUND;
static GDRErrorTypeEnum *GDRErrorTypeEnum_SERVER_ERROR;
static GDRErrorTypeEnum *GDRErrorTypeEnum_TOKEN_REFRESH_REQUIRED;
IOSObjectArray *GDRErrorTypeEnum_values;

@implementation GDRErrorTypeEnum

+ (GDRErrorTypeEnum *)CLIENT_ERROR {
  return GDRErrorTypeEnum_CLIENT_ERROR;
}
+ (GDRErrorTypeEnum *)CONCURRENT_CREATION {
  return GDRErrorTypeEnum_CONCURRENT_CREATION;
}
+ (GDRErrorTypeEnum *)FORBIDDEN {
  return GDRErrorTypeEnum_FORBIDDEN;
}
+ (GDRErrorTypeEnum *)INVALID_COMPOUND_OPERATION {
  return GDRErrorTypeEnum_INVALID_COMPOUND_OPERATION;
}
+ (GDRErrorTypeEnum *)NOT_FOUND {
  return GDRErrorTypeEnum_NOT_FOUND;
}
+ (GDRErrorTypeEnum *)SERVER_ERROR {
  return GDRErrorTypeEnum_SERVER_ERROR;
}
+ (GDRErrorTypeEnum *)TOKEN_REFRESH_REQUIRED {
  return GDRErrorTypeEnum_TOKEN_REFRESH_REQUIRED;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [GDRErrorTypeEnum class]) {
    GDRErrorTypeEnum_CLIENT_ERROR = [[GDRErrorTypeEnum alloc] initWithNSString:@"CLIENT_ERROR" withInt:0];
    GDRErrorTypeEnum_CONCURRENT_CREATION = [[GDRErrorTypeEnum alloc] initWithNSString:@"CONCURRENT_CREATION" withInt:1];
    GDRErrorTypeEnum_FORBIDDEN = [[GDRErrorTypeEnum alloc] initWithNSString:@"FORBIDDEN" withInt:2];
    GDRErrorTypeEnum_INVALID_COMPOUND_OPERATION = [[GDRErrorTypeEnum alloc] initWithNSString:@"INVALID_COMPOUND_OPERATION" withInt:3];
    GDRErrorTypeEnum_NOT_FOUND = [[GDRErrorTypeEnum alloc] initWithNSString:@"NOT_FOUND" withInt:4];
    GDRErrorTypeEnum_SERVER_ERROR = [[GDRErrorTypeEnum alloc] initWithNSString:@"SERVER_ERROR" withInt:5];
    GDRErrorTypeEnum_TOKEN_REFRESH_REQUIRED = [[GDRErrorTypeEnum alloc] initWithNSString:@"TOKEN_REFRESH_REQUIRED" withInt:6];
    GDRErrorTypeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ GDRErrorTypeEnum_CLIENT_ERROR, GDRErrorTypeEnum_CONCURRENT_CREATION, GDRErrorTypeEnum_FORBIDDEN, GDRErrorTypeEnum_INVALID_COMPOUND_OPERATION, GDRErrorTypeEnum_NOT_FOUND, GDRErrorTypeEnum_SERVER_ERROR, GDRErrorTypeEnum_TOKEN_REFRESH_REQUIRED, nil } count:7 type:[IOSClass classWithClass:[GDRErrorTypeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:GDRErrorTypeEnum_values];
}

+ (GDRErrorTypeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [GDRErrorTypeEnum_values count]; i++) {
    GDRErrorTypeEnum *e = GDRErrorTypeEnum_values->buffer_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportPackageImpl alloc] initWithValue:@"good.realtime"], [[OrgTimepediaExporterClientExportImpl alloc] initWithAll:false withValue:@""] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
