//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/CollaborativeList.h"
#include "com/goodow/realtime/CollaborativeMap.h"
#include "com/goodow/realtime/CollaborativeObject.h"
#include "com/goodow/realtime/CollaborativeString.h"
#include "com/goodow/realtime/Document.h"
#include "com/goodow/realtime/DocumentBridge.h"
#include "com/goodow/realtime/DocumentLoadedHandler.h"
#include "com/goodow/realtime/DocumentSaveStateChangedEvent.h"
#include "com/goodow/realtime/Error.h"
#include "com/goodow/realtime/ErrorHandler.h"
#include "com/goodow/realtime/ErrorType.h"
#include "com/goodow/realtime/EventType.h"
#include "com/goodow/realtime/IndexReference.h"
#include "com/goodow/realtime/Model.h"
#include "com/goodow/realtime/ModelInitializerHandler.h"
#include "com/goodow/realtime/Realtime.h"
#include "com/goodow/realtime/UndoRedoStateChangedEvent.h"
#include "com/goodow/realtime/channel/operation/OperationSucker.h"
#include "com/goodow/realtime/channel/util/ChannelFactory.h"
#include "com/goodow/realtime/channel/util/ChannelNative.h"
#include "com/goodow/realtime/operation/AbstractOperation.h"
#include "com/goodow/realtime/operation/Operation.h"
#include "com/goodow/realtime/operation/RealtimeOperation.h"
#include "com/goodow/realtime/operation/TransformerImpl.h"
#include "com/goodow/realtime/operation/create/CreateOperation.h"
#include "com/goodow/realtime/operation/undo/UndoManager.h"
#include "com/goodow/realtime/operation/undo/UndoManagerFactory.h"
#include "com/goodow/realtime/operation/undo/UndoManagerPlus.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonObject.h"
#include "elemental/json/JsonValue.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#import "GDR.h"

@implementation GDRDocumentBridge

static id<ComGoodowRealtimeChannelOperationOperationSucker_OutputSink> GDRDocumentBridge_VOID_;

+ (id<ComGoodowRealtimeChannelOperationOperationSucker_OutputSink>)VOID {
  return GDRDocumentBridge_VOID_;
}

- (id)initWithGDRJsonArray:(id<GDRJsonArray>)snapshot {
  if (self = [super init]) {
    outputSink_ = GDRDocumentBridge_VOID_;
    undoManager_ = [ComGoodowRealtimeOperationUndoUndoManagerFactory getNoOp];
    [self createSnapshotWithGDRJsonValue:snapshot];
  }
  return self;
}

- (id)init {
  if (self = [super init]) {
    outputSink_ = GDRDocumentBridge_VOID_;
    undoManager_ = [ComGoodowRealtimeOperationUndoUndoManagerFactory getNoOp];
  }
  return self;
}

- (void)consumeWithId:(ComGoodowRealtimeOperationRealtimeOperation *)operation {
  [self applyLocallyWithComGoodowRealtimeOperationRealtimeOperation:operation];
  [self nonUndoableOpWithComGoodowRealtimeOperationRealtimeOperation:operation];
}

- (GDRDocument *)getDocument {
  return document_;
}

- (void)handleErrorWithNSString:(NSString *)type
                   withNSString:(NSString *)message
                    withBoolean:(BOOL)isFatal {
  [self handleErrorWithGDRError:[[GDRError alloc] initWithGDRErrorTypeEnum:[GDRErrorTypeEnum valueOfWithNSString:type] withNSString:message withBoolean:isFatal]];
}

- (void)onCollaboratorChangedWithBoolean:(BOOL)isJoined
                       withGDRJsonObject:(id<GDRJsonObject>)json {
  [((GDRDocument *) nil_chk(document_)) onCollaboratorChangedWithBoolean:isJoined withGDRJsonObject:json];
}

- (void)onSaveStateChangedWithBoolean:(BOOL)isSaving
                          withBoolean:(BOOL)isPending {
  GDRDocumentSaveStateChangedEvent *event = [[GDRDocumentSaveStateChangedEvent alloc] initWithGDRDocument:document_ withBoolean:isSaving withBoolean:isPending];
  [((GDRDocument *) nil_chk(document_)) scheduleEventWithNSString:[GDRDocument EVENT_HANDLER_KEY] withGDREventTypeEnum:[GDREventTypeEnum DOCUMENT_SAVE_STATE_CHANGED] withGDRDisposable:event];
}

- (void)setOutputSinkWithComGoodowRealtimeChannelOperationOperationSucker_OutputSink:(id<ComGoodowRealtimeChannelOperationOperationSucker_OutputSink>)outputSink {
  self->outputSink_ = outputSink;
}

- (NSString *)description {
  JavaLangStringBuilder *sb1 = [[JavaLangStringBuilder alloc] init];
  JavaLangStringBuilder *sb2 = [[JavaLangStringBuilder alloc] init];
  BOOL isFirst = YES;
  for (GDRCollaborativeObject * __strong object in [((id<JavaUtilMap>) nil_chk(((GDRModel *) nil_chk(model_))->objects_)) values]) {
    IOSObjectArray *initializeOp = [((GDRCollaborativeObject *) nil_chk(object)) toInitialization];
    BOOL isCreate = YES;
    {
      IOSObjectArray *a__ = initializeOp;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<ComGoodowRealtimeOperationOperation> op = (*b__++);
        JavaLangStringBuilder *sb;
        if (isCreate) {
          sb = sb1;
          isCreate = NO;
        }
        else {
          sb = sb2;
        }
        if (!isFirst) {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@","];
        }
        else {
          isFirst = NO;
        }
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((id<ComGoodowRealtimeOperationOperation>) nil_chk(op)) description]];
      }
    }
  }
  return [NSString stringWithFormat:@"[%@%@]", [sb1 description], [sb2 description]];
}

- (void)addErrorHandlerWithGDRErrorHandler:(id<GDRErrorHandler>)errorHandler {
  if (errorHandler == nil) {
    return;
  }
  if (errorHandlers_ == nil) {
    errorHandlers_ = [[JavaUtilHashSet alloc] init];
  }
  [((id<JavaUtilSet>) nil_chk(errorHandlers_)) addWithId:errorHandler];
}

- (void)consumeAndSubmitWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)op {
  ComGoodowRealtimeOperationRealtimeOperation *operation = [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithNSString:[GDRRealtime USERID] withNSString:sessionId_ withComGoodowRealtimeOperationOperationArray:[IOSObjectArray arrayWithObjects:(id[]){ op } count:1 type:[IOSClass classWithProtocol:@protocol(ComGoodowRealtimeOperationOperation)]]];
  [self applyLocallyWithComGoodowRealtimeOperationRealtimeOperation:operation];
  [((id<ComGoodowRealtimeOperationUndoUndoManager>) nil_chk(undoManager_)) checkpoint];
  [self undoableOpWithComGoodowRealtimeOperationRealtimeOperation:operation];
  [((id<ComGoodowRealtimeChannelOperationOperationSucker_OutputSink>) nil_chk(outputSink_)) consumeWithId:operation];
}

- (void)createSnapshotWithGDRJsonValue:(id<GDRJsonValue>)serialized {
  ComGoodowRealtimeOperationTransformerImpl *transformer = [[ComGoodowRealtimeOperationTransformerImpl alloc] init];
  document_ = [[GDRDocument alloc] initWithGDRDocumentBridge:self withGDRDisposable:nil withGDRErrorHandler:nil];
  model_ = [document_ getModel];
  id<GDRJsonArray> snapshot = (id<GDRJsonArray>) check_protocol_cast(serialized, @protocol(GDRJsonArray));
  if (snapshot == nil || [snapshot length] == 0) {
    [((GDRModel *) nil_chk(model_)) createRoot];
  }
  else {
    for (int i = 0, len = [snapshot length]; i < len; i++) {
      id<GDRJsonArray> serializedOp = [snapshot getArrayWithInt:i];
      id<ComGoodowRealtimeOperationOperation> op = [transformer createOperationWithGDRJsonArray:serializedOp];
      ComGoodowRealtimeOperationRealtimeOperation *operation = [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithNSString:nil withNSString:nil withComGoodowRealtimeOperationOperationArray:[IOSObjectArray arrayWithObjects:(id[]){ op } count:1 type:[IOSClass classWithProtocol:@protocol(ComGoodowRealtimeOperationOperation)]]];
      [self applyLocallyWithComGoodowRealtimeOperationRealtimeOperation:operation];
    }
  }
}

- (void)handleErrorWithGDRError:(GDRError *)error {
  if (errorHandlers_ != nil) {
    for (id<GDRErrorHandler> __strong errorHandler in errorHandlers_) {
      [self handleErrorWithGDRErrorHandler:errorHandler withGDRError:error];
    }
  }
}

- (void)initializeModelWithGDRModelInitializerHandler:(id<GDRModelInitializerHandler>)initializer {
  if ([(id) initializer conformsToProtocol: @protocol(GDRModelInitializerHandler)]) {
    [((id<GDRModelInitializerHandler>) nil_chk(initializer)) onInitializerWithGDRModel:model_];
  }
  else {
    [self __ocniInitializeModel__WithId:initializer withGDRModel:model_];
  }
}

- (BOOL)isLocalSessionWithNSString:(NSString *)sessionId {
  return sessionId != nil && [sessionId isEqual:self->sessionId_];
}

- (void)loadDoucumentWithGDRDocumentLoadedHandler:(id<GDRDocumentLoadedHandler>)onLoaded {
  [((id<ComGoodowRealtimeChannelUtilChannelFactory>) nil_chk([ComGoodowRealtimeChannelUtilChannelNative get])) scheduleDeferredWithJavaLangRunnable:[[GDRDocumentBridge_$2 alloc] initWithGDRDocumentBridge:self withGDRDocumentLoadedHandler:onLoaded]];
}

- (void)redo {
  [self bypassUndoStackWithJavaUtilList:[((id<ComGoodowRealtimeOperationUndoUndoManager>) nil_chk(undoManager_)) redo]];
}

- (void)setUndoEnabledWithBoolean:(BOOL)undoEnabled {
  undoManager_ = undoEnabled ? [ComGoodowRealtimeOperationUndoUndoManagerFactory createUndoManager] : [ComGoodowRealtimeOperationUndoUndoManagerFactory getNoOp];
}

- (void)undo {
  [self bypassUndoStackWithJavaUtilList:[((id<ComGoodowRealtimeOperationUndoUndoManager>) nil_chk(undoManager_)) undo]];
}

- (void)__ocniHandleError__WithId:(id)errorHandler
                     withGDRError:(GDRError *)error {
  GDRErrorBlock block = (GDRErrorBlock) errorHandler;
  return block(error);
}

- (void)__ocniInitializeModel__WithId:(id)initializer
                         withGDRModel:(GDRModel *)model {
  GDRModelInitializerBlock block = (GDRModelInitializerBlock) initializer;
  return block(model);
}

- (void)__ocniLoadDoucument__WithId:(id)onLoaded
                    withGDRDocument:(GDRDocument *)document {
  GDRDocumentLoadedBlock block = (GDRDocumentLoadedBlock) onLoaded;
  return block(document);
}

- (void)applyLocallyWithComGoodowRealtimeOperationRealtimeOperation:(ComGoodowRealtimeOperationRealtimeOperation *)operation {
  id<JavaUtilList> ops = (id<JavaUtilList>) check_protocol_cast(((ComGoodowRealtimeOperationRealtimeOperation *) nil_chk(operation))->operations_, @protocol(JavaUtilList));
  for (ComGoodowRealtimeOperationAbstractOperation * __strong op in ops) {
    if (((ComGoodowRealtimeOperationAbstractOperation *) nil_chk(op))->type_ == ComGoodowRealtimeOperationCreateCreateOperation_TYPE) {
      GDRCollaborativeObject *obj;
      switch (((ComGoodowRealtimeOperationCreateCreateOperation *) check_class_cast(op, [ComGoodowRealtimeOperationCreateCreateOperation class]))->subType_) {
        case ComGoodowRealtimeOperationCreateCreateOperation_MAP:
        obj = [[GDRCollaborativeMap alloc] initWithGDRModel:model_];
        break;
        case ComGoodowRealtimeOperationCreateCreateOperation_LIST:
        obj = [[GDRCollaborativeList alloc] initWithGDRModel:model_];
        break;
        case ComGoodowRealtimeOperationCreateCreateOperation_STRING:
        obj = [[GDRCollaborativeString alloc] initWithGDRModel:model_];
        break;
        case ComGoodowRealtimeOperationCreateCreateOperation_INDEX_REFERENCE:
        obj = [[GDRIndexReference alloc] initWithGDRModel:model_];
        break;
        default:
        @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Shouldn't reach here!"];
      }
      ((GDRCollaborativeObject *) nil_chk(obj))->id__ = op->id__;
      (void) [((id<JavaUtilMap>) nil_chk(((GDRModel *) nil_chk(model_))->objects_)) putWithId:obj->id__ withId:obj];
      model_->bytesUsed_ += [((NSString *) nil_chk([op description])) length];
      model_->bytesUsed_++;
      continue;
    }
    [((GDRCollaborativeObject *) nil_chk([((GDRModel *) nil_chk(model_)) getObjectWithNSString:op->id__])) consumeWithNSString:operation->userId_ withNSString:operation->sessionId_ withComGoodowRealtimeOperationOperation:op];
  }
}

- (void)bypassUndoStackWithJavaUtilList:(id<JavaUtilList>)operations {
  for (ComGoodowRealtimeOperationRealtimeOperation * __strong operation in operations) {
    [self applyLocallyWithComGoodowRealtimeOperationRealtimeOperation:operation];
    [((id<ComGoodowRealtimeChannelOperationOperationSucker_OutputSink>) nil_chk(outputSink_)) consumeWithId:operation];
  }
  [self mayUndoRedoStateChanged];
}

- (void)handleErrorWithGDRErrorHandler:(id<GDRErrorHandler>)errorHandler
                          withGDRError:(GDRError *)error {
  if ([(id) errorHandler conformsToProtocol: @protocol(GDRErrorHandler)]) {
    [((id<GDRErrorHandler>) nil_chk(errorHandler)) handleErrorWithGDRError:error];
  }
  else {
    [self __ocniHandleError__WithId:errorHandler withGDRError:error];
  }
}

- (void)mayUndoRedoStateChanged {
  BOOL canUndo = [((id<ComGoodowRealtimeOperationUndoUndoManager>) nil_chk(undoManager_)) canUndo];
  BOOL canRedo = [undoManager_ canRedo];
  if ([((GDRModel *) nil_chk(model_)) canUndo] != canUndo || [model_ canRedo] != canRedo) {
    model_->canUndo__ = canUndo;
    model_->canRedo__ = canRedo;
    GDRUndoRedoStateChangedEvent *event = [[GDRUndoRedoStateChangedEvent alloc] initWithGDRModel:model_ withBoolean:canUndo withBoolean:canRedo];
    [((GDRDocument *) nil_chk(document_)) scheduleEventWithNSString:[GDRModel EVENT_HANDLER_KEY] withGDREventTypeEnum:[GDREventTypeEnum UNDO_REDO_STATE_CHANGED] withGDRDisposable:event];
  }
}

- (void)nonUndoableOpWithComGoodowRealtimeOperationRealtimeOperation:(ComGoodowRealtimeOperationRealtimeOperation *)op {
  [((id<ComGoodowRealtimeOperationUndoUndoManager>) nil_chk(undoManager_)) nonUndoableOpWithId:op];
}

- (void)undoableOpWithComGoodowRealtimeOperationRealtimeOperation:(ComGoodowRealtimeOperationRealtimeOperation *)op {
  [((id<ComGoodowRealtimeOperationUndoUndoManager>) nil_chk(undoManager_)) undoableOpWithId:op];
  [self mayUndoRedoStateChanged];
}

+ (void)initialize {
  if (self == [GDRDocumentBridge class]) {
    GDRDocumentBridge_VOID_ = [[GDRDocumentBridge_$1 alloc] init];
  }
}

- (void)copyAllFieldsTo:(GDRDocumentBridge *)other {
  [super copyAllFieldsTo:other];
  other->document_ = document_;
  other->errorHandlers_ = errorHandlers_;
  other->model_ = model_;
  other->outputSink_ = outputSink_;
  other->sessionId_ = sessionId_;
  other->undoManager_ = undoManager_;
}

@end
@implementation GDRDocumentBridge_$1

- (void)close {
}

- (void)consumeWithId:(ComGoodowRealtimeOperationRealtimeOperation *)op {
}

- (id)init {
  return [super init];
}

@end
@implementation GDRDocumentBridge_$2

- (void)run {
  if ([(id) val$onLoaded_ conformsToProtocol: @protocol(GDRDocumentLoadedHandler)]) {
    [((id<GDRDocumentLoadedHandler>) nil_chk(val$onLoaded_)) onLoadedWithGDRDocument:this$0_->document_];
  }
  else {
    [this$0_ __ocniLoadDoucument__WithId:val$onLoaded_ withGDRDocument:this$0_->document_];
  }
}

- (id)initWithGDRDocumentBridge:(GDRDocumentBridge *)outer$
   withGDRDocumentLoadedHandler:(id<GDRDocumentLoadedHandler>)capture$0 {
  this$0_ = outer$;
  val$onLoaded_ = capture$0;
  return [super init];
}

@end
