//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/CollaborativeObject.h"
#include "com/goodow/realtime/model/util/JsonSerializer.h"
#include "com/goodow/realtime/operation/util/JsonUtility.h"
#include "elemental/json/Json.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonBoolean.h"
#include "elemental/json/JsonFactory.h"
#include "elemental/json/JsonNumber.h"
#include "elemental/json/JsonString.h"
#include "elemental/json/JsonType.h"
#include "elemental/json/JsonValue.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Double.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Map.h"

@implementation ComGoodowRealtimeModelUtilJsonSerializer

+ (int)REFERENCE_TYPE {
  return ComGoodowRealtimeModelUtilJsonSerializer_REFERENCE_TYPE;
}

+ (id)deserializeObjectWithGDJsonValue:(id<GDJsonValue>)arrayOrNull
                       withJavaUtilMap:(id<JavaUtilMap>)objects {
  if ([ComGoodowRealtimeOperationUtilJsonUtility isNullWithGDJsonValue:arrayOrNull]) {
    return nil;
  }
  id<GDJsonArray> array = (id<GDJsonArray>) check_protocol_cast(arrayOrNull, @protocol(GDJsonArray));
  switch ((int) [((id<GDJsonArray>) nil_chk(array)) getNumber:0]) {
    case ComGoodowRealtimeModelUtilJsonSerializer_VALUE_TYPE:
    {
      id<GDJsonValue> val;
      switch ([[((id<GDJsonValue>) nil_chk([array get:1])) getType] ordinal]) {
        case GDJsonType_BOOLEAN:
        return [JavaLangBoolean valueOfWithBoolean:[array getBoolean:1]];
        case GDJsonType_NUMBER:
        return [JavaLangDouble valueOfWithDouble:[array getNumber:1]];
        case GDJsonType_STRING:
        return [array getString:1];
        case GDJsonType_OBJECT:
        case GDJsonType_ARRAY:
        val = [array get:1];
        return [((id<GDJsonFactory>) nil_chk([GDJson instance])) parseWithNSString:[((id<GDJsonValue>) nil_chk(val)) toJson]];
        case GDJsonType_NULL:
        default:
        @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Should not reach here!"];
      }
    }
    case ComGoodowRealtimeModelUtilJsonSerializer_REFERENCE_TYPE:
    return [((id<JavaUtilMap>) nil_chk(objects)) getWithId:[array getString:1]];
    default:
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
}

+ (id<GDJsonArray>)serializeObjectWithId:(id)obj {
  if (obj == nil) {
    return nil;
  }
  id<GDJsonArray> array = [GDJson createArray];
  int type = ComGoodowRealtimeModelUtilJsonSerializer_VALUE_TYPE;
  id<GDJsonValue> val;
  if ([obj isKindOfClass:[NSString class]]) {
    val = [GDJson createString:(NSString *) check_class_cast(obj, [NSString class])];
  }
  else if ([obj isKindOfClass:[NSNumber class]]) {
    val = [GDJson createNumber:[((NSNumber *) nil_chk(obj)) doubleValue]];
  }
  else if ([obj isKindOfClass:[JavaLangBoolean class]]) {
    val = [GDJson createBoolean:[((JavaLangBoolean *) nil_chk(obj)) booleanValue]];
  }
  else if ([obj conformsToProtocol: @protocol(GDJsonValue)]) {
    val = (id<GDJsonValue>) check_protocol_cast(obj, @protocol(GDJsonValue));
    if ([GDJsonTypeEnum NULL_] == [((id<GDJsonValue>) nil_chk(val)) getType]) {
      return nil;
    }
    val = [((id<GDJsonFactory>) nil_chk([GDJson instance])) parseWithNSString:[val toJson]];
  }
  else if ([obj isKindOfClass:[GDRCollaborativeObject class]]) {
    type = ComGoodowRealtimeModelUtilJsonSerializer_REFERENCE_TYPE;
    val = [GDJson createString:[((GDRCollaborativeObject *) nil_chk(obj)) getId]];
  }
  else {
    @throw [[JavaLangClassCastException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported class type: %@", [[nil_chk(obj) getClass] getName]]];
  }
  [((id<GDJsonArray>) nil_chk(array)) set:0 number:type];
  [array set:1 value:val];
  return array;
}

+ (IOSObjectArray *)serializeObjectsWithNSObjectArray:(IOSObjectArray *)values {
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(values)) count] type:[IOSClass classWithProtocol:@protocol(GDJsonValue)]];
  int i = 0;
  {
    IOSObjectArray *a__ = values;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id obj = (*b__++);
      (void) IOSObjectArray_Set(array, i++, [ComGoodowRealtimeModelUtilJsonSerializer serializeObjectWithId:obj]);
    }
  }
  return array;
}

- (id)init {
  return [super init];
}

@end
