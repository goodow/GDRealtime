//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/BaseModelEvent.h"
#include "com/goodow/realtime/CollaborativeObject.h"
#include "com/goodow/realtime/Collaborator.h"
#include "com/goodow/realtime/CollaboratorJoinedEvent.h"
#include "com/goodow/realtime/CollaboratorLeftEvent.h"
#include "com/goodow/realtime/Disposable.h"
#include "com/goodow/realtime/Document.h"
#include "com/goodow/realtime/DocumentBridge.h"
#include "com/goodow/realtime/DocumentClosedError.h"
#include "com/goodow/realtime/ErrorHandler.h"
#include "com/goodow/realtime/EventHandler.h"
#include "com/goodow/realtime/EventType.h"
#include "com/goodow/realtime/Model.h"
#include "com/goodow/realtime/ObjectChangedEvent.h"
#include "com/goodow/realtime/channel/constant/Constants.h"
#include "com/goodow/realtime/channel/operation/OperationSucker.h"
#include "com/goodow/realtime/channel/util/ChannelFactory.h"
#include "com/goodow/realtime/channel/util/ChannelNative.h"
#include "com/goodow/realtime/model/util/ModelFactory.h"
#include "com/goodow/realtime/operation/util/Pair.h"
#include "elemental/json/JsonObject.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/timepedia/exporter/client/Export.h"
#include "org/timepedia/exporter/client/ExportPackage.h"

@implementation GDRDocument

static NSString * GDRDocument_EVENT_HANDLER_KEY_ = @"document";
static JavaUtilLoggingLogger * GDRDocument_log_;

+ (NSString *)EVENT_HANDLER_KEY {
  return GDRDocument_EVENT_HANDLER_KEY_;
}

+ (JavaUtilLoggingLogger *)log {
  return GDRDocument_log_;
}

- (id)initWithGDRDocumentBridge:(GDRDocumentBridge *)bridge
              withGDRDisposable:(id<GDRDisposable>)commService
            withGDRErrorHandler:(id<GDRErrorHandler>)errorHandlerFn {
  if (self = [super init]) {
    collaborators_ = [[JavaUtilArrayList alloc] init];
    isEventsScheduled_ = NO;
    eventsTask_ = [[GDRDocument_$1 alloc] initWithGDRDocument:self];
    self->bridge_ = bridge;
    model_ = [[GDRModel alloc] initWithGDRDocumentBridge:bridge withGDRDocument:self];
  }
  return self;
}

- (void)addCollaboratorJoinedListener:(GDRCollaboratorJoinedBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_JOINED] withGDREventHandler:handler withBoolean:NO];
}

- (void)addCollaboratorLeftListener:(GDRCollaboratorLeftBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_LEFT] withGDREventHandler:handler withBoolean:NO];
}

- (void)addDocumentSaveStateListener:(GDRDocumentSaveStateChangedBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum DOCUMENT_SAVE_STATE_CHANGED] withGDREventHandler:handler withBoolean:NO];
}

- (void)addEventListenerWithGDREventTypeEnum:(GDREventTypeEnum *)type
                         withGDREventHandler:(id<GDREventHandler>)handler
                                 withBoolean:(BOOL)opt_capture {
  [self addEventListenerWithNSString:GDRDocument_EVENT_HANDLER_KEY_ withGDREventTypeEnum:type withGDREventHandler:handler withBoolean:opt_capture];
}

- (void)close {
  [((id<ComGoodowRealtimeChannelOperationOperationSucker_OutputSink>) nil_chk(((GDRDocumentBridge *) nil_chk(bridge_))->outputSink_)) close];
  bridge_ = nil;
  model_ = nil;
}

- (IOSObjectArray *)getCollaborators {
  return [((id<JavaUtilList>) nil_chk(collaborators_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[GDRCollaborator class]]]];
}

- (GDRModel *)getModel {
  return model_;
}

- (void)removeCollaboratorJoinedListener:(GDRCollaboratorJoinedBlock)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_JOINED] withGDREventHandler:handler withBoolean:NO];
}

- (void)removeCollaboratorLeftListener:(GDRCollaboratorLeftBlock)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_LEFT] withGDREventHandler:handler withBoolean:NO];
}

- (void)removeEventListenerWithGDREventTypeEnum:(GDREventTypeEnum *)type
                            withGDREventHandler:(id<GDREventHandler>)handler
                                    withBoolean:(BOOL)opt_capture {
  [self removeEventListenerWithNSString:GDRDocument_EVENT_HANDLER_KEY_ withGDREventTypeEnum:type withGDREventHandler:handler withBoolean:opt_capture];
}

- (void)addEventListenerWithNSString:(NSString *)id_
                withGDREventTypeEnum:(GDREventTypeEnum *)type
                 withGDREventHandler:(id<GDREventHandler>)handler
                         withBoolean:(BOOL)opt_capture {
  if (id_ == nil || type == nil || handler == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:[NSString stringWithFormat:@"%@ was null.", (id_ == nil ? @"id" : type == nil ? @"type" : @"handler")]];
  }
  id<JavaUtilList> handlersPerType = [self getEventHandlersWithComGoodowRealtimeOperationUtilPair:[ComGoodowRealtimeOperationUtilPair ofWithId:id_ withId:type] withBoolean:YES];
  if ([((id<JavaUtilList>) nil_chk(handlersPerType)) containsWithId:handler]) {
    [((JavaUtilLoggingLogger *) nil_chk(GDRDocument_log_)) warningWithNSString:@"The same handler can only be added once per the type."];
  }
  else {
    [handlersPerType addWithId:handler];
  }
}

- (void)checkStatus {
  if (bridge_ == nil) {
    @throw [[GDRDocumentClosedError alloc] init];
  }
}

+ (IOSObjectArray *)__exceptions_checkStatus {
  return [IOSObjectArray arrayWithObjects:(id[]) { [GDRDocumentClosedError getClass] } count:1 type:[IOSClass getClass]];
}

- (void)onCollaboratorChangedWithBoolean:(BOOL)isJoined
                        withGDJsonObject:(id<GDJsonObject>)json {
  GDRCollaborator *collaborator = [[GDRCollaborator alloc] initWithNSString:[((id<GDJsonObject>) nil_chk(json)) getString:[ComGoodowRealtimeChannelConstantConstants_Params USER_ID]] withNSString:[json getString:[ComGoodowRealtimeChannelConstantConstants_Params SESSION_ID]] withNSString:[json getString:[ComGoodowRealtimeChannelConstantConstants_Params DISPLAY_NAME]] withNSString:[json getString:[ComGoodowRealtimeChannelConstantConstants_Params COLOR]] withBoolean:[json getBoolean:[ComGoodowRealtimeChannelConstantConstants_Params IS_ME]] withBoolean:[json getBoolean:[ComGoodowRealtimeChannelConstantConstants_Params IS_ANONYMOUS]] withNSString:[json getString:[ComGoodowRealtimeChannelConstantConstants_Params PHOTO_URL]]];
  if (isJoined) {
    [((id<JavaUtilList>) nil_chk(collaborators_)) addWithId:collaborator];
    GDRCollaboratorJoinedEvent *event = [[GDRCollaboratorJoinedEvent alloc] initWithGDRDocument:self withGDRCollaborator:collaborator];
    [self scheduleEventWithNSString:GDRDocument_EVENT_HANDLER_KEY_ withGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_JOINED] withGDRDisposable:event];
  }
  else {
    [((id<JavaUtilList>) nil_chk(collaborators_)) removeWithId:collaborator];
    GDRCollaboratorLeftEvent *event = [[GDRCollaboratorLeftEvent alloc] initWithGDRDocument:self withGDRCollaborator:collaborator];
    [self scheduleEventWithNSString:GDRDocument_EVENT_HANDLER_KEY_ withGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_LEFT] withGDRDisposable:event];
  }
}

- (void)removeEventListenerWithNSString:(NSString *)id_
                   withGDREventTypeEnum:(GDREventTypeEnum *)type
                    withGDREventHandler:(id<GDREventHandler>)handler
                            withBoolean:(BOOL)opt_capture {
  if (handlers_ == nil || handler == nil) {
    return;
  }
  id<JavaUtilList> handlersPerType = [((id<JavaUtilMap>) nil_chk(handlers_)) getWithId:[ComGoodowRealtimeOperationUtilPair ofWithId:id_ withId:type]];
  if (handlersPerType == nil) {
    return;
  }
  [((id<JavaUtilList>) nil_chk(handlersPerType)) removeWithId:handler];
  if ([handlersPerType isEmpty]) {
    (void) [handlers_ removeWithId:handlersPerType];
    if ([handlers_ isEmpty]) {
      handlers_ = nil;
    }
  }
}

- (void)scheduleEventWithNSString:(NSString *)id_
             withGDREventTypeEnum:(GDREventTypeEnum *)type
                withGDRDisposable:(id<GDRDisposable>)event {
  if (events_ == nil) {
    [self initializeEvents];
  }
  [((id<JavaUtilList>) nil_chk(events_)) addWithId:[ComGoodowRealtimeOperationUtilPair ofWithId:[ComGoodowRealtimeOperationUtilPair ofWithId:id_ withId:type] withId:event]];
  if ([(id) event isKindOfClass:[GDRBaseModelEvent class]]) {
    GDRBaseModelEvent *evt = (GDRBaseModelEvent *) check_class_cast(event, [GDRBaseModelEvent class]);
    NSAssert(!((GDRBaseModelEvent *) nil_chk(evt))->bubbles_, @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/Document.java:269 condition failed: assert !evt.bubbles;");
    id<JavaUtilList> eventsPerId = [((id<JavaUtilMap>) nil_chk(eventsById_)) getWithId:id_];
    if (eventsPerId == nil) {
      eventsPerId = [[JavaUtilArrayList alloc] init];
      (void) [eventsById_ putWithId:id_ withId:eventsPerId];
    }
    [((id<JavaUtilList>) nil_chk(eventsPerId)) addWithId:evt];
  }
  if (!isEventsScheduled_) {
    isEventsScheduled_ = YES;
    [((id<ComGoodowRealtimeChannelUtilChannelFactory>) nil_chk([ComGoodowRealtimeChannelUtilChannelNative get])) scheduleDeferredWithJavaLangRunnable:eventsTask_];
  }
}

- (void)__ocniFireEvent__WithId:(id)handler
                         withId:(id)event {
  GDREventBlock block = (GDREventBlock)handler;
  block(event);
}

- (id<JavaUtilList>)getEventHandlersWithComGoodowRealtimeOperationUtilPair:(ComGoodowRealtimeOperationUtilPair *)key
                                                               withBoolean:(BOOL)createIfNotExist {
  if (handlers_ == nil) {
    if (!createIfNotExist) {
      return nil;
    }
    handlers_ = [[JavaUtilHashMap alloc] init];
  }
  id<JavaUtilList> handlersPerType = [((id<JavaUtilMap>) nil_chk(handlers_)) getWithId:key];
  if (handlersPerType == nil) {
    if (!createIfNotExist) {
      return nil;
    }
    handlersPerType = [[JavaUtilArrayList alloc] init];
    (void) [handlers_ putWithId:key withId:handlersPerType];
  }
  return handlersPerType;
}

- (void)initializeEvents {
  events_ = [[JavaUtilArrayList alloc] init];
  eventsById_ = [[JavaUtilHashMap alloc] init];
}

+ (void)initialize {
  if (self == [GDRDocument class]) {
    GDRDocument_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[GDRDocument class]] getName]];
  }
}

- (void)copyAllFieldsTo:(GDRDocument *)other {
  [super copyAllFieldsTo:other];
  other->bridge_ = bridge_;
  other->collaborators_ = collaborators_;
  other->events_ = events_;
  other->eventsById_ = eventsById_;
  other->eventsTask_ = eventsTask_;
  other->handlers_ = handlers_;
  other->isEventsScheduled_ = isEventsScheduled_;
  other->model_ = model_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportPackageImpl alloc] initWithValue:@"good.realtime"], [[OrgTimepediaExporterClientExportImpl alloc] initWithAll:true withValue:@""] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation GDRDocument_$1

- (void)run {
  evts_ = this$0_->events_;
  evtsById_ = this$0_->eventsById_;
  this$0_->events_ = nil;
  this$0_->eventsById_ = nil;
  this$0_->isEventsScheduled_ = NO;
  for (int i = 0, len = [((id<JavaUtilList>) nil_chk(evts_)) size]; i < len; i++) {
    ComGoodowRealtimeOperationUtilPair *evt = [evts_ getWithInt:i];
    [self produceObjectChangedEventWithNSString:((ComGoodowRealtimeOperationUtilPair *) nil_chk(((ComGoodowRealtimeOperationUtilPair *) nil_chk(evt))->first_))->first_ withGDRDisposable:evt->second_];
  }
  for (ComGoodowRealtimeOperationUtilPair * __strong evt in evts_) {
    [self fireEventWithComGoodowRealtimeOperationUtilPair:((ComGoodowRealtimeOperationUtilPair *) nil_chk(evt))->first_ withGDRDisposable:evt->second_];
  }
  NSAssert([((id<JavaUtilMap>) nil_chk(evtsById_)) isEmpty], @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/Document.java:82 condition failed: assert evtsById.isEmpty();");
  evts_ = nil;
  evtsById_ = nil;
}

- (void)bubblingToAncestorsWithNSString:(NSString *)id_
              withGDRObjectChangedEvent:(GDRObjectChangedEvent *)objectChangedEvent
                        withJavaUtilSet:(id<JavaUtilSet>)seen {
  if ([((id<JavaUtilSet>) nil_chk(seen)) containsWithId:id_]) {
    return;
  }
  [seen addWithId:id_];
  [((id<JavaUtilList>) nil_chk(evts_)) addWithId:[ComGoodowRealtimeOperationUtilPair ofWithId:[ComGoodowRealtimeOperationUtilPair ofWithId:id_ withId:((GDRObjectChangedEvent *) nil_chk(objectChangedEvent))->type_] withId:(id<GDRDisposable>) check_protocol_cast(objectChangedEvent, @protocol(GDRDisposable))]];
  IOSObjectArray *parents = [((GDRModel *) nil_chk(this$0_->model_)) getParentsWithNSString:id_];
  if (parents != nil) {
    {
      IOSObjectArray *a__ = parents;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *parent = (*b__++);
        [self bubblingToAncestorsWithNSString:parent withGDRObjectChangedEvent:objectChangedEvent withJavaUtilSet:seen];
      }
    }
  }
}

- (void)fireEventWithComGoodowRealtimeOperationUtilPair:(ComGoodowRealtimeOperationUtilPair *)key
                                      withGDRDisposable:(id<GDRDisposable>)event {
  id<JavaUtilList> handlers = [this$0_ getEventHandlersWithComGoodowRealtimeOperationUtilPair:key withBoolean:NO];
  if (handlers == nil) {
    return;
  }
  for (int i = 0, len = [((id<JavaUtilList>) nil_chk(handlers)) size]; i < len; i++) {
    id<GDREventHandler> handler = [handlers getWithInt:i];
    if ([(id) handler conformsToProtocol: @protocol(GDREventHandler)]) {
      [((id<GDREventHandler>) nil_chk(handler)) handleEventWithId:event];
    }
    else {
      [this$0_ __ocniFireEvent__WithId:handler withId:event];
    }
  }
}

- (void)produceObjectChangedEventWithNSString:(NSString *)id_
                            withGDRDisposable:(id<GDRDisposable>)event {
  if (![((id<JavaUtilMap>) nil_chk(evtsById_)) containsKeyWithId:id_]) {
    return;
  }
  GDRBaseModelEvent *evt = (GDRBaseModelEvent *) check_class_cast(event, [GDRBaseModelEvent class]);
  NSAssert(!((GDRBaseModelEvent *) nil_chk(evt))->bubbles_, @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/Document.java:124 condition failed: assert !evt.bubbles;");
  id<JavaUtilList> eventsPerId = [evtsById_ getWithId:id_];
  (void) [evtsById_ removeWithId:id_];
  GDRObjectChangedEvent *objectChangedEvent = [[GDRObjectChangedEvent alloc] initWithGDRCollaborativeObject:evt->target_ withNSString:evt->sessionId_ withNSString:evt->userId_ withGDRBaseModelEventArray:[((id<JavaUtilList>) nil_chk(eventsPerId)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[GDRBaseModelEvent class]]]]];
  id<JavaUtilSet> seen = [[JavaUtilHashSet alloc] init];
  [self bubblingToAncestorsWithNSString:id_ withGDRObjectChangedEvent:objectChangedEvent withJavaUtilSet:seen];
}

- (id)initWithGDRDocument:(GDRDocument *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(GDRDocument_$1 *)other {
  [super copyAllFieldsTo:other];
  other->evts_ = evts_;
  other->evtsById_ = evtsById_;
}

@end
