//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/CollaborativeObject.h"
#include "com/goodow/realtime/CollaborativeString.h"
#include "com/goodow/realtime/EventHandler.h"
#include "com/goodow/realtime/EventType.h"
#include "com/goodow/realtime/IndexReference.h"
#include "com/goodow/realtime/Model.h"
#include "com/goodow/realtime/TextDeletedEvent.h"
#include "com/goodow/realtime/TextInsertedEvent.h"
#include "com/goodow/realtime/model/util/ModelFactory.h"
#include "com/goodow/realtime/model/util/ModelNative.h"
#include "com/goodow/realtime/operation/Operation.h"
#include "com/goodow/realtime/operation/create/CreateOperation.h"
#include "com/goodow/realtime/operation/list/string/StringDeleteOperation.h"
#include "com/goodow/realtime/operation/list/string/StringInsertOperation.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Set.h"
#include "org/timepedia/exporter/client/Export.h"
#include "org/timepedia/exporter/client/ExportAfterCreateMethod.h"
#include "org/timepedia/exporter/client/ExportPackage.h"

@implementation GDRCollaborativeString

- (id)initWithGDRModel:(GDRModel *)model {
  if (self = [super initWithGDRModel:model]) {
    snapshot_ = [[JavaLangStringBuilder alloc] init];
  }
  return self;
}

- (void)addTextDeletedListener:(GDRTextDeletedBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum TEXT_DELETED] withGDREventHandler:handler withBoolean:NO];
}

- (void)addTextInsertedListener:(GDRTextInsertedBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum TEXT_INSERTED] withGDREventHandler:handler withBoolean:NO];
}

- (void)append:(NSString *)text {
  [self insertString:[self length] text:text];
}

- (NSString *)getText {
  return [((JavaLangStringBuilder *) nil_chk(snapshot_)) description];
}

- (void)insertString:(int)index text:(NSString *)text {
  if (text == nil || [text isEmpty]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"At least one value must be specified for an insert mutation. text: %@", text]];
  }
  [self checkIndexWithInt:index];
  ComGoodowRealtimeOperationListStringStringInsertOperation *op = [[ComGoodowRealtimeOperationListStringStringInsertOperation alloc] initWithNSString:id__ withInt:index withId:text];
  [self consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
}

- (int)length {
  return [((JavaLangStringBuilder *) nil_chk(snapshot_)) sequenceLength];
}

- (GDRIndexReference *)registerReference:(int)index canBeDeleted:(BOOL)canBeDeleted {
  [self checkIndexWithInt:index];
  return [((GDRModel *) nil_chk(model_)) createIndexReferenceWithNSString:id__ withInt:index withBoolean:canBeDeleted];
}

- (void)removeRange:(int)startIndex endIndex:(int)endIndex {
  int length = [self length];
  if (startIndex < 0 || startIndex >= length || endIndex <= startIndex || endIndex > length) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"StartIndex: %d, EndIndex: %d, Size: %d", startIndex, endIndex, length]];
  }
  ComGoodowRealtimeOperationListStringStringDeleteOperation *op = [[ComGoodowRealtimeOperationListStringStringDeleteOperation alloc] initWithNSString:id__ withInt:startIndex withId:[((JavaLangStringBuilder *) nil_chk(snapshot_)) substringWithInt:startIndex withInt:endIndex]];
  [self consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
}

- (void)removeStringListener:(GDREventBlock)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum TEXT_INSERTED] withGDREventHandler:handler withBoolean:NO];
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum TEXT_DELETED] withGDREventHandler:handler withBoolean:NO];
}

- (void)setText:(NSString *)text {
  if (text == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Expected string for text, but was: null"];
  }
  [((GDRModel *) nil_chk(model_)) beginCompoundOperation:@"replaceText"];
  [((id<ComGoodowRealtimeModelUtilModelFactory>) nil_chk([ComGoodowRealtimeModelUtilModelNative get])) setTextWithGDRCollaborativeString:self withNSString:text];
  [model_ endCompoundOperation];
}

- (void)consumeWithNSString:(NSString *)userId
               withNSString:(NSString *)sessionId
withComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)operation {
  [((id<ComGoodowRealtimeOperationOperation>) nil_chk(operation)) applyWithId:[[GDRCollaborativeString_$1 alloc] initWithGDRCollaborativeString:self withNSString:sessionId withNSString:userId]];
}

- (IOSObjectArray *)toInitialization {
  IOSObjectArray *toRtn = [IOSObjectArray arrayWithLength:1 + ([self length] == 0 ? 0 : 1) type:[IOSClass classWithProtocol:@protocol(ComGoodowRealtimeOperationOperation)]];
  (void) IOSObjectArray_Set(toRtn, 0, [[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:id__ withInt:ComGoodowRealtimeOperationCreateCreateOperation_STRING]);
  if ([self length] != 0) {
    (void) IOSObjectArray_Set(toRtn, 1, [[ComGoodowRealtimeOperationListStringStringInsertOperation alloc] initWithNSString:id__ withInt:0 withId:[self getText]]);
  }
  return toRtn;
}

- (void)toStringWithJavaUtilSet:(id<JavaUtilSet>)seen
      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([((id<JavaUtilSet>) nil_chk(seen)) containsWithId:id__]) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<EditableString: "])) appendWithNSString:id__])) appendWithNSString:@">"];
    return;
  }
  [seen addWithId:id__];
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self getText]];
}

- (void)checkIndexWithInt:(int)index {
  int length = [self length];
  if (index < 0 || index > length) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Index: %d, Size: %d", index, length]];
  }
}

- (void)deleteAndFireEventWithInt:(int)startIndex
                          withInt:(int)length
                     withNSString:(NSString *)sessionId
                     withNSString:(NSString *)userId {
  int endIndex = startIndex + length;
  NSAssert(length > 0 && endIndex <= [self length], @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/CollaborativeString.java:234 condition failed: assert length > 0 && endIndex <= length();");
  NSString *toDelete = [((JavaLangStringBuilder *) nil_chk(snapshot_)) substringWithInt:startIndex withInt:endIndex];
  GDRTextDeletedEvent *event = [[GDRTextDeletedEvent alloc] initWithGDRCollaborativeString:self withNSString:sessionId withNSString:userId withInt:startIndex withNSString:toDelete];
  (void) [snapshot_ delete__WithInt:startIndex withInt:endIndex];
  [self fireEventWithGDRBaseModelEvent:event];
  [((GDRModel *) nil_chk(model_)) setIndexReferenceIndexWithNSString:id__ withBoolean:NO withInt:startIndex withInt:length withNSString:sessionId withNSString:userId];
  model_->bytesUsed_ -= length;
}

- (void)insertAndFireEventWithInt:(int)index
                     withNSString:(NSString *)text
                     withNSString:(NSString *)sessionId
                     withNSString:(NSString *)userId {
  NSAssert(index <= [self length], @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/CollaborativeString.java:244 condition failed: assert index <= length();");
  GDRTextInsertedEvent *event = [[GDRTextInsertedEvent alloc] initWithGDRCollaborativeString:self withNSString:sessionId withNSString:userId withInt:index withNSString:text];
  (void) [((JavaLangStringBuilder *) nil_chk(snapshot_)) insertWithInt:index withNSString:text];
  [self fireEventWithGDRBaseModelEvent:event];
  [((GDRModel *) nil_chk(model_)) setIndexReferenceIndexWithNSString:id__ withBoolean:YES withInt:index withInt:[((NSString *) nil_chk(text)) length] withNSString:sessionId withNSString:userId];
  model_->bytesUsed_ += [text length];
}

- (void)copyAllFieldsTo:(GDRCollaborativeString *)other {
  [super copyAllFieldsTo:other];
  other->snapshot_ = snapshot_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportPackageImpl alloc] initWithValue:@"good.realtime"], [[OrgTimepediaExporterClientExportImpl alloc] initWithAll:true withValue:@""] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations___jsniRunAfter__ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportAfterCreateMethodImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation GDRCollaborativeString_$1

- (void)delete__WithInt:(int)startIndex
                withInt:(int)length {
  [this$0_ deleteAndFireEventWithInt:startIndex withInt:length withNSString:val$sessionId_ withNSString:val$userId_];
}

- (void)insertWithInt:(int)startIndex
               withId:(NSString *)values {
  [this$0_ insertAndFireEventWithInt:startIndex withNSString:values withNSString:val$sessionId_ withNSString:val$userId_];
}

- (void)replaceWithInt:(int)startIndex
                withId:(NSString *)values {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)initWithGDRCollaborativeString:(GDRCollaborativeString *)outer$
                        withNSString:(NSString *)capture$0
                        withNSString:(NSString *)capture$1 {
  this$0_ = outer$;
  val$sessionId_ = capture$0;
  val$userId_ = capture$1;
  return [super init];
}

@end
