//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/CollaborativeList.h"
#include "com/goodow/realtime/CollaborativeMap.h"
#include "com/goodow/realtime/CollaborativeObject.h"
#include "com/goodow/realtime/CollaborativeString.h"
#include "com/goodow/realtime/Document.h"
#include "com/goodow/realtime/DocumentBridge.h"
#include "com/goodow/realtime/EventHandler.h"
#include "com/goodow/realtime/EventType.h"
#include "com/goodow/realtime/IndexReference.h"
#include "com/goodow/realtime/Model.h"
#include "com/goodow/realtime/model/util/JsonSerializer.h"
#include "com/goodow/realtime/model/util/ModelFactory.h"
#include "com/goodow/realtime/operation/create/CreateOperation.h"
#include "com/goodow/realtime/operation/cursor/ReferenceShiftedOperation.h"
#include "com/goodow/realtime/operation/id/IdGenerator.h"
#include "com/goodow/realtime/operation/list/json/JsonInsertOperation.h"
#include "com/goodow/realtime/operation/list/string/StringInsertOperation.h"
#include "com/goodow/realtime/operation/map/json/JsonMapOperation.h"
#include "com/goodow/realtime/operation/util/JsonUtility.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonValue.h"
#include "elemental/util/ArrayOfString.h"
#include "elemental/util/MapFromStringTo.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/timepedia/exporter/client/Export.h"
#include "org/timepedia/exporter/client/ExportAfterCreateMethod.h"
#include "org/timepedia/exporter/client/ExportPackage.h"
#include "org/timepedia/exporter/client/NoExport.h"

@implementation GDRModel

static NSString * GDRModel_EVENT_HANDLER_KEY_ = @"model";
static NSString * GDRModel_ROOT_ID_ = @"root";
static JavaUtilLoggingLogger * GDRModel_log_;

+ (NSString *)EVENT_HANDLER_KEY {
  return GDRModel_EVENT_HANDLER_KEY_;
}

+ (NSString *)ROOT_ID {
  return GDRModel_ROOT_ID_;
}

+ (JavaUtilLoggingLogger *)log {
  return GDRModel_log_;
}

- (id)initWithGDRDocumentBridge:(GDRDocumentBridge *)bridge
                withGDRDocument:(GDRDocument *)document {
  if (self = [super init]) {
    objects_ = [[JavaUtilLinkedHashMap alloc] init];
    parents_ = [[JavaUtilHashMap alloc] init];
    self->bridge_ = bridge;
    self->document_ = document;
  }
  return self;
}

- (void)addEventListenerWithGDREventTypeEnum:(GDREventTypeEnum *)type
                         withGDREventHandler:(id<GDREventHandler>)handler
                                 withBoolean:(BOOL)opt_capture {
  [((GDRDocument *) nil_chk(document_)) addEventListenerWithNSString:GDRModel_EVENT_HANDLER_KEY_ withGDREventTypeEnum:type withGDREventHandler:handler withBoolean:opt_capture];
}

- (void)addUndoRedoStateChangedListener:(GDRUndoRedoStateChangedBlock)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum UNDO_REDO_STATE_CHANGED] withGDREventHandler:handler withBoolean:NO];
}

- (void)beginCompoundOperation:(NSString *)opt_name {
  [((JavaUtilLoggingLogger *) nil_chk(GDRModel_log_)) infoWithNSString:[NSString stringWithFormat:@"beginCompoundOperation%@", (opt_name == nil ? @"" : ([NSString stringWithFormat:@" %@", opt_name]))]];
}

- (BOOL)canRedo {
  return canRedo__;
}

- (BOOL)canUndo {
  return canUndo__;
}

- (id)create:(NSString *)ref args:(IOSObjectArray *)var_args {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (GDRCollaborativeList *)createListWithNSObjectArray:(IOSObjectArray *)opt_initialValue {
  NSString *id_ = [self generateObjectId];
  [self beginCreationCompoundOperation];
  [((GDRDocumentBridge *) nil_chk(bridge_)) consumeAndSubmitWithComGoodowRealtimeOperationOperation:[[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:id_ withInt:ComGoodowRealtimeOperationCreateCreateOperation_LIST]];
  if (opt_initialValue != nil && (int) [opt_initialValue count] > 0) {
    IOSObjectArray *values = [ComGoodowRealtimeModelUtilJsonSerializer serializeObjectsWithNSObjectArray:opt_initialValue];
    ComGoodowRealtimeOperationListJsonJsonInsertOperation *op = [[ComGoodowRealtimeOperationListJsonJsonInsertOperation alloc] initWithNSString:id_ withInt:0 withId:values];
    [bridge_ consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  }
  [self endCompoundOperation];
  return [self getObjectWithNSString:id_];
}

- (GDRCollaborativeMap *)createMapWithJavaUtilMap:(id<JavaUtilMap>)opt_initialValue {
  NSString *id_ = [self generateObjectId];
  [self beginCreationCompoundOperation];
  [((GDRDocumentBridge *) nil_chk(bridge_)) consumeAndSubmitWithComGoodowRealtimeOperationOperation:[[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:id_ withInt:ComGoodowRealtimeOperationCreateCreateOperation_MAP]];
  if (opt_initialValue != nil && ![opt_initialValue isEmpty]) {
    for (id<JavaUtilMap_Entry> __strong entry in [opt_initialValue entrySet]) {
      id<GDJsonArray> serializedValue = [ComGoodowRealtimeModelUtilJsonSerializer serializeObjectWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
      if (serializedValue == nil) {
        continue;
      }
      ComGoodowRealtimeOperationMapJsonJsonMapOperation *op = [[ComGoodowRealtimeOperationMapJsonJsonMapOperation alloc] initWithNSString:id_ withNSString:[entry getKey] withId:nil withId:serializedValue];
      [bridge_ consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
    }
  }
  [self endCompoundOperation];
  return [self getObjectWithNSString:id_];
}

- (GDRCollaborativeString *)createString:(NSString *)opt_initialValue {
  NSString *id_ = [self generateObjectId];
  [self beginCreationCompoundOperation];
  [((GDRDocumentBridge *) nil_chk(bridge_)) consumeAndSubmitWithComGoodowRealtimeOperationOperation:[[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:id_ withInt:ComGoodowRealtimeOperationCreateCreateOperation_STRING]];
  if (opt_initialValue != nil && ![opt_initialValue isEmpty]) {
    ComGoodowRealtimeOperationListStringStringInsertOperation *op = [[ComGoodowRealtimeOperationListStringStringInsertOperation alloc] initWithNSString:id_ withInt:0 withId:opt_initialValue];
    [bridge_ consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  }
  [self endCompoundOperation];
  return [self getObjectWithNSString:id_];
}

- (void)endCompoundOperation {
  [((JavaUtilLoggingLogger *) nil_chk(GDRModel_log_)) infoWithNSString:@"endCompoundOperation"];
}

- (double)getBytesUsed {
  return bytesUsed_;
}

- (id)getObjectWithNSString:(NSString *)objectId {
  return (GDRCollaborativeObject *) [((id<JavaUtilMap>) nil_chk(objects_)) getWithId:objectId];
}

- (IOSObjectArray *)getParentsWithNSString:(NSString *)objectId {
  id<JavaUtilList> list = [((id<JavaUtilMap>) nil_chk(parents_)) getWithId:objectId];
  if (list == nil) {
    return nil;
  }
  id<JavaUtilSet> set = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:list];
  return [set toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
}

- (GDRCollaborativeMap *)getRoot {
  return [self getObjectWithNSString:GDRModel_ROOT_ID_];
}

- (BOOL)isInitialized {
  return NO;
}

- (BOOL)isReadOnly {
  return isReadOnly__;
}

- (void)redo {
  [((GDRDocumentBridge *) nil_chk(bridge_)) redo];
}

- (void)removeEventListenerWithGDREventTypeEnum:(GDREventTypeEnum *)type
                            withGDREventHandler:(id<GDREventHandler>)handler
                                    withBoolean:(BOOL)opt_capture {
  [((GDRDocument *) nil_chk(document_)) removeEventListenerWithNSString:GDRModel_EVENT_HANDLER_KEY_ withGDREventTypeEnum:type withGDREventHandler:handler withBoolean:opt_capture];
}

- (void)undo {
  [((GDRDocumentBridge *) nil_chk(bridge_)) undo];
}

- (void)addOrRemoveParentWithGDJsonValue:(id<GDJsonValue>)childOrNull
                            withNSString:(NSString *)parentId
                             withBoolean:(BOOL)isAdd {
  if ([ComGoodowRealtimeOperationUtilJsonUtility isNullWithGDJsonValue:childOrNull]) {
    return;
  }
  id<GDJsonArray> child = (id<GDJsonArray>) check_protocol_cast(childOrNull, @protocol(GDJsonArray));
  if ([((id<GDJsonArray>) nil_chk(child)) getNumber:0] == ComGoodowRealtimeModelUtilJsonSerializer_REFERENCE_TYPE) {
    NSString *childId = [child getString:1];
    id<JavaUtilList> list = [((id<JavaUtilMap>) nil_chk(parents_)) getWithId:childId];
    if (isAdd) {
      if (list == nil) {
        list = [[JavaUtilArrayList alloc] init];
        (void) [parents_ putWithId:childId withId:list];
      }
      [((id<JavaUtilList>) nil_chk(list)) addWithId:parentId];
    }
    else {
      NSAssert(list != nil && [list containsWithId:parentId], @"/Users/retechretech/dev/workspace/realtime/realtime-api/src/main/java/com/goodow/realtime/Model.java:329 condition failed: assert list != null && list.contains(parentId);");
      [((id<JavaUtilList>) nil_chk(list)) removeWithId:parentId];
      if ([list isEmpty]) {
        (void) [parents_ removeWithId:childId];
      }
    }
  }
}

- (GDRIndexReference *)createIndexReferenceWithNSString:(NSString *)referencedObjectId
                                                withInt:(int)index
                                            withBoolean:(BOOL)canBeDeleted {
  NSString *id_ = [self generateObjectId];
  ComGoodowRealtimeOperationCursorReferenceShiftedOperation *op = [[ComGoodowRealtimeOperationCursorReferenceShiftedOperation alloc] initWithNSString:id_ withNSString:referencedObjectId withInt:index withBoolean:canBeDeleted withInt:-1];
  [self beginCreationCompoundOperation];
  [((GDRDocumentBridge *) nil_chk(bridge_)) consumeAndSubmitWithComGoodowRealtimeOperationOperation:[[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:id_ withInt:ComGoodowRealtimeOperationCreateCreateOperation_INDEX_REFERENCE]];
  [bridge_ consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  [self registerIndexReferenceWithNSString:id_ withNSString:referencedObjectId];
  [self endCompoundOperation];
  return [self getObjectWithNSString:id_];
}

- (void)createRoot {
  [self beginCreationCompoundOperation];
  [((GDRDocumentBridge *) nil_chk(bridge_)) consumeAndSubmitWithComGoodowRealtimeOperationOperation:[[ComGoodowRealtimeOperationCreateCreateOperation alloc] initWithNSString:GDRModel_ROOT_ID_ withInt:ComGoodowRealtimeOperationCreateCreateOperation_MAP]];
  [self endCompoundOperation];
}

- (void)setIndexReferenceIndexWithNSString:(NSString *)referencedObject
                               withBoolean:(BOOL)isInsert
                                   withInt:(int)index
                                   withInt:(int)length
                              withNSString:(NSString *)sessionId
                              withNSString:(NSString *)userId {
  if (indexReferences_ == nil) {
    return;
  }
  id<JavaUtilList> list = [((id<JavaUtilMap>) nil_chk(indexReferences_)) getWithId:referencedObject];
  if (list != nil) {
    for (NSString * __strong indexReferenceId in list) {
      GDRIndexReference *indexReference = [self getObjectWithNSString:indexReferenceId];
      [((GDRIndexReference *) nil_chk(indexReference)) setIndexWithBoolean:isInsert withInt:index withInt:length withNSString:sessionId withNSString:userId];
    }
  }
}

- (GDRCollaborativeMap *)__jsniCreateMap__WithElementalUtilMapFromStringTo:(id<ElementalUtilMapFromStringTo>)map {
  if (map == nil) {
    return [self createMapWithJavaUtilMap:nil];
  }
  JavaUtilHashMap *opt_initialValue = [[JavaUtilHashMap alloc] init];
  id<ElementalUtilArrayOfString> keys = [((id<ElementalUtilMapFromStringTo>) nil_chk(map)) keys];
  for (int i = 0, len = [((id<ElementalUtilArrayOfString>) nil_chk(keys)) length]; i < len; i++) {
    NSString *key = [keys getWithInt:i];
    (void) [opt_initialValue putWithId:key withId:[map getWithNSString:key]];
  }
  return [self createMapWithJavaUtilMap:opt_initialValue];
}

- (void)beginCreationCompoundOperation {
  [self beginCompoundOperation:@"initialize"];
}

- (NSString *)generateObjectId {
  return [NSString stringWithFormat:@"gde%@", [((ComGoodowRealtimeOperationIdIdGenerator *) [[ComGoodowRealtimeOperationIdIdGenerator alloc] init]) nextWithInt:14]];
}

- (void)registerIndexReferenceWithNSString:(NSString *)indexReference
                              withNSString:(NSString *)referencedObject {
  if (indexReferences_ == nil) {
    indexReferences_ = [[JavaUtilHashMap alloc] init];
  }
  id<JavaUtilList> list = [((id<JavaUtilMap>) nil_chk(indexReferences_)) getWithId:referencedObject];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
    (void) [indexReferences_ putWithId:referencedObject withId:list];
  }
  [((id<JavaUtilList>) nil_chk(list)) addWithId:indexReference];
}

+ (void)initialize {
  if (self == [GDRModel class]) {
    GDRModel_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[GDRModel class]] getName]];
  }
}

- (void)copyAllFieldsTo:(GDRModel *)other {
  [super copyAllFieldsTo:other];
  other->bridge_ = bridge_;
  other->bytesUsed_ = bytesUsed_;
  other->canRedo__ = canRedo__;
  other->canUndo__ = canUndo__;
  other->document_ = document_;
  other->indexReferences_ = indexReferences_;
  other->isReadOnly__ = isReadOnly__;
  other->objects_ = objects_;
  other->parents_ = parents_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportPackageImpl alloc] initWithValue:@"good.realtime"], [[OrgTimepediaExporterClientExportImpl alloc] initWithAll:true withValue:@""] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations___jsniRunAfter__ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientExportAfterCreateMethodImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_createMapWithJavaUtilMap_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_getObjectWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgTimepediaExporterClientNoExportImpl alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
