//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/Document.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/goodow/realtime/BaseModelEvent.h"
#import "com/goodow/realtime/CollaborativeObject.h"
#import "com/goodow/realtime/Collaborator.h"
#import "com/goodow/realtime/CollaboratorJoinedEvent.h"
#import "com/goodow/realtime/CollaboratorLeftEvent.h"
#import "com/goodow/realtime/Disposable.h"
#import "com/goodow/realtime/Document.h"
#import "com/goodow/realtime/DocumentBridge.h"
#import "com/goodow/realtime/DocumentSaveStateChangedEvent.h"
#import "com/goodow/realtime/Error.h"
#import "com/goodow/realtime/EventHandler.h"
#import "com/goodow/realtime/EventType.h"
#import "com/goodow/realtime/Model.h"
#import "com/goodow/realtime/ObjectChangedEvent.h"
#import "com/goodow/realtime/util/JsonSerializer.h"
#import "com/goodow/realtime/util/ModelFactory.h"
#import "com/goodow/realtime/util/ModelNative.h"
#import "com/goodow/realtime/util/Pair.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonValue.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/Runnable.h"
#import "java/util/ArrayList.h"
#import "java/util/HashMap.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "java/util/logging/Logger.h"

@implementation GDRDocument

static NSString * GDRDocument_EVENT_HANDLER_KEY_ = @"document";
static JavaUtilLoggingLogger * GDRDocument_log_;

@synthesize collaborators = collaborators_;
@synthesize model = model_;
@synthesize handlers = handlers_;
@synthesize parents = parents_;
@synthesize isEventsScheduled = isEventsScheduled_;
@synthesize events = events_;
@synthesize eventsById = eventsById_;
@synthesize eventsTask = eventsTask_;
@synthesize bridge = bridge_;

+ (NSString *)EVENT_HANDLER_KEY {
  return GDRDocument_EVENT_HANDLER_KEY_;
}

+ (JavaUtilLoggingLogger *)log {
  return GDRDocument_log_;
}

- (id)initWithGDRDocumentBridge:(GDRDocumentBridge *)bridge
              withGDRDisposable:(id<GDRDisposable>)commService
      withGDRError_ErrorHandler:(id<GDRError_ErrorHandler>)errorHandlerFn {
  if ((self = [super init])) {
    parents_ = [[JavaUtilHashMap alloc] init];
    isEventsScheduled_ = NO;
    eventsTask_ = [[GDRDocument_$1 alloc] initWithGDRDocument:self];
    self.bridge = bridge;
    model_ = [[GDRModel alloc] initWithGDRDocumentBridge:bridge withGDRDocument:self];
  }
  return self;
}

- (void)addCollaboratorJoinedListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_JOINED] withGDREventHandler:handler withBOOL:NO];
}

- (void)addCollaboratorLeftListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_LEFT] withGDREventHandler:handler withBOOL:NO];
}

- (void)addDocumentSaveStateListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum DOCUMENT_SAVE_STATE_CHANGED] withGDREventHandler:handler withBOOL:NO];
}

- (void)addEventListenerWithGDREventTypeEnum:(GDREventTypeEnum *)type
                         withGDREventHandler:(id<GDREventHandler>)handler
                                    withBOOL:(BOOL)opt_capture {
  [self addEventListenerWithNSString:GDRDocument_EVENT_HANDLER_KEY_ withGDREventTypeEnum:type withGDREventHandler:handler withBOOL:opt_capture];
}

- (void)close {
}

- (void)exportDocumentWithGDRDisposable:(id<GDRDisposable>)successFn
                      withGDRDisposable:(id<GDRDisposable>)failureFn {
}

- (IOSObjectArray *)getCollaborators {
  return [IOSObjectArray arrayWithObjects:(id[]){ [[GDRCollaborator alloc] initWithNSString:((GDRDocumentBridge *) NIL_CHK(bridge_)).userId withNSString:((GDRDocumentBridge *) NIL_CHK(bridge_)).sessionId withNSString:@"fake name" withNSString:@"#58B442" withBOOL:YES withBOOL:YES withNSString:nil] } count:1 type:[IOSClass classWithClass:[GDRCollaborator class]]];
}

- (GDRModel *)getModel {
  return model_;
}

- (void)removeCollaboratorJoinedListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_JOINED] withGDREventHandler:handler withBOOL:NO];
}

- (void)removeCollaboratorLeftListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum COLLABORATOR_LEFT] withGDREventHandler:handler withBOOL:NO];
}

- (void)removeEventListenerWithGDREventTypeEnum:(GDREventTypeEnum *)type
                            withGDREventHandler:(id<GDREventHandler>)handler
                                       withBOOL:(BOOL)opt_capture {
  [self removeEventListenerWithNSString:GDRDocument_EVENT_HANDLER_KEY_ withGDREventTypeEnum:type withGDREventHandler:handler withBOOL:opt_capture];
}

- (void)addEventListenerWithNSString:(NSString *)id_
                withGDREventTypeEnum:(GDREventTypeEnum *)type
                 withGDREventHandler:(id<GDREventHandler>)handler
                            withBOOL:(BOOL)opt_capture {
  if (id_ == nil || type == nil || handler == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:[NSString stringWithFormat:@"%@ was null.", (id_ == nil ? @"id" : type == nil ? @"type" : @"handler")]];
  }
  id<JavaUtilList> handlersPerType = [self getEventHandlersWithComGoodowRealtimeUtilPair:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:id_ withId:type]) withBOOL:YES];
  if ([((id<JavaUtilList>) NIL_CHK(handlersPerType)) containsWithId:handler]) {
    [((JavaUtilLoggingLogger *) NIL_CHK(GDRDocument_log_)) warningWithNSString:@"The same handler can only be added once per the type."];
  }
  else {
    [((id<JavaUtilList>) NIL_CHK(handlersPerType)) addWithId:handler];
  }
}

- (void)addOrRemoveParentWithEMJsonValue:(id<EMJsonValue>)childOrNull
                            withNSString:(NSString *)parentId
                                withBOOL:(BOOL)isAdd {
  if ([ComGoodowRealtimeUtilJsonSerializer isNullWithEMJsonValue:childOrNull]) {
    return;
  }
  id<EMJsonArray> child = (id<EMJsonArray>) childOrNull;
  if ([((id<EMJsonArray>) NIL_CHK(child)) getNumberWithInt:0] == ComGoodowRealtimeUtilJsonSerializer_REFERENCE_TYPE) {
    NSString *childId = [((id<EMJsonArray>) NIL_CHK(child)) getStringWithInt:1];
    id<JavaUtilList> list = ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(parents_)) getWithId:childId]);
    if (isAdd) {
      if (list == nil) {
        list = [[JavaUtilArrayList alloc] init];
        [((id<JavaUtilMap>) NIL_CHK(parents_)) putWithId:childId withId:list];
      }
      [((id<JavaUtilList>) NIL_CHK(list)) addWithId:parentId];
    }
    else {
      NSAssert(list != nil && [((id<JavaUtilList>) NIL_CHK(list)) containsWithId:parentId], @"src/main/java/com/goodow/realtime/Document.java:249 condition failed: assert list != null && list.contains(parentId);");
      [((id<JavaUtilList>) NIL_CHK(list)) removeWithId:parentId];
      if ([((id<JavaUtilList>) NIL_CHK(list)) isEmpty]) {
        [((id<JavaUtilMap>) NIL_CHK(parents_)) removeWithId:childId];
      }
    }
  }
}

- (void)removeEventListenerWithNSString:(NSString *)id_
                   withGDREventTypeEnum:(GDREventTypeEnum *)type
                    withGDREventHandler:(id<GDREventHandler>)handler
                               withBOOL:(BOOL)opt_capture {
  if (handlers_ == nil || handler == nil) {
    return;
  }
  id<JavaUtilList> handlersPerType = ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(handlers_)) getWithId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:id_ withId:type])]);
  if (handlersPerType == nil) {
    return;
  }
  [((id<JavaUtilList>) NIL_CHK(handlersPerType)) removeWithId:handler];
  if ([((id<JavaUtilList>) NIL_CHK(handlersPerType)) isEmpty]) {
    [((id<JavaUtilMap>) NIL_CHK(handlers_)) removeWithId:handlersPerType];
    if ([((id<JavaUtilMap>) NIL_CHK(handlers_)) isEmpty]) {
      handlers_ = nil;
    }
  }
}

- (void)scheduleEventWithNSString:(NSString *)id_
             withGDREventTypeEnum:(GDREventTypeEnum *)type
                withGDRDisposable:(id<GDRDisposable>)event {
  if (events_ == nil) {
    [self initializeEvents];
  }
  [((id<JavaUtilList>) NIL_CHK(events_)) addWithId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:id_ withId:type]) withId:event])];
  if ([(id) event isKindOfClass:[GDRBaseModelEvent class]]) {
    GDRBaseModelEvent *evt = (GDRBaseModelEvent *) event;
    NSAssert(!((GDRBaseModelEvent *) NIL_CHK(evt)).bubbles, @"src/main/java/com/goodow/realtime/Document.java:282 condition failed: assert !evt.bubbles;");
    id<JavaUtilList> eventsPerId = ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(eventsById_)) getWithId:id_]);
    if (eventsPerId == nil) {
      eventsPerId = [[JavaUtilArrayList alloc] init];
      [((id<JavaUtilMap>) NIL_CHK(eventsById_)) putWithId:id_ withId:eventsPerId];
    }
    [((id<JavaUtilList>) NIL_CHK(eventsPerId)) addWithId:evt];
  }
  if (!isEventsScheduled_) {
    isEventsScheduled_ = YES;
    [((id<ComGoodowRealtimeUtilModelFactory>) [ComGoodowRealtimeUtilModelNative get]) scheduleDeferredWithJavaLangRunnable:eventsTask_];
  }
}

- (void)__ocniFireEvent__WithId:(id)handler
                         withId:(id)event   {
    GDREventBlock block = (GDREventBlock)handler;
    block(event);
  }

- (id<JavaUtilList>)getEventHandlersWithComGoodowRealtimeUtilPair:(ComGoodowRealtimeUtilPair *)key
                                                         withBOOL:(BOOL)createIfNotExist {
  if (handlers_ == nil) {
    if (!createIfNotExist) {
      return nil;
    }
    handlers_ = [[JavaUtilHashMap alloc] init];
  }
  id<JavaUtilList> handlersPerType = ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(handlers_)) getWithId:key]);
  if (handlersPerType == nil) {
    if (!createIfNotExist) {
      return nil;
    }
    handlersPerType = [[JavaUtilArrayList alloc] init];
    [((id<JavaUtilMap>) NIL_CHK(handlers_)) putWithId:key withId:handlersPerType];
  }
  return handlersPerType;
}

- (IOSObjectArray *)getParentsWithNSString:(NSString *)objectId {
  id<JavaUtilList> list = ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(parents_)) getWithId:objectId]);
  if (list == nil) {
    return nil;
  }
  id<JavaUtilSet> set = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:list];
  return [((id<JavaUtilSet>) NIL_CHK(set)) toArrayWithNSObjectArray:[[IOSObjectArray alloc] initWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
}

- (void)initializeEvents OBJC_METHOD_FAMILY_NONE {
  events_ = [[JavaUtilArrayList alloc] init];
  eventsById_ = [[JavaUtilHashMap alloc] init];
}

+ (void)initialize {
  if (self == [GDRDocument class]) {
    GDRDocument_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[GDRDocument class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  GDRDocument *typedCopy = (GDRDocument *) copy;
  typedCopy.collaborators = collaborators_;
  typedCopy.model = model_;
  typedCopy.handlers = handlers_;
  typedCopy.parents = parents_;
  typedCopy.isEventsScheduled = isEventsScheduled_;
  typedCopy.events = events_;
  typedCopy.eventsById = eventsById_;
  typedCopy.eventsTask = eventsTask_;
  typedCopy.bridge = bridge_;
}

@end
@implementation GDRDocument_$1

@synthesize this$0 = this$0_;
@synthesize evts = evts_;
@synthesize evtsById = evtsById_;

- (void)run {
  evts_ = this$0_.events;
  evtsById_ = this$0_.eventsById;
  this$0_.events = nil;
  this$0_.eventsById = nil;
  this$0_.isEventsScheduled = NO;
  for (int i = 0, len = [((id<JavaUtilList>) NIL_CHK(evts_)) size]; i < len; i++) {
    ComGoodowRealtimeUtilPair *evt = ((ComGoodowRealtimeUtilPair *) [((id<JavaUtilList>) NIL_CHK(evts_)) getWithInt:i]);
    [self produceObjectChangedEventWithNSString:((ComGoodowRealtimeUtilPair *) NIL_CHK(evt.first)).first withGDRDisposable:((ComGoodowRealtimeUtilPair *) NIL_CHK(evt)).second];
  }
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(evts_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComGoodowRealtimeUtilPair *evt = ((ComGoodowRealtimeUtilPair *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [self fireEventWithComGoodowRealtimeUtilPair:((ComGoodowRealtimeUtilPair *) NIL_CHK(evt)).first withGDRDisposable:((ComGoodowRealtimeUtilPair *) NIL_CHK(evt)).second];
    }
  }
  NSAssert([((id<JavaUtilMap>) NIL_CHK(evtsById_)) isEmpty], @"src/main/java/com/goodow/realtime/Document.java:85 condition failed: assert evtsById.isEmpty();");
  evts_ = nil;
  evtsById_ = nil;
}

- (void)bubblingToAncestorsWithNSString:(NSString *)id_
              withGDRObjectChangedEvent:(GDRObjectChangedEvent *)objectChangedEvent
                        withJavaUtilSet:(id<JavaUtilSet>)seen {
  if ([((id<JavaUtilSet>) NIL_CHK(seen)) containsWithId:id_]) {
    return;
  }
  [((id<JavaUtilSet>) NIL_CHK(seen)) addWithId:id_];
  [((id<JavaUtilList>) NIL_CHK(evts_)) addWithId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:((ComGoodowRealtimeUtilPair *) [ComGoodowRealtimeUtilPair ofWithId:id_ withId:((GDRObjectChangedEvent *) NIL_CHK(objectChangedEvent)).type]) withId:(id<GDRDisposable>) objectChangedEvent])];
  IOSObjectArray *parents = [this$0_ getParentsWithNSString:id_];
  if (parents != nil) {
    {
      IOSObjectArray *a__ = parents;
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        NSString *parent = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        [self bubblingToAncestorsWithNSString:parent withGDRObjectChangedEvent:objectChangedEvent withJavaUtilSet:seen];
      }
    }
  }
}

- (void)fireEventWithComGoodowRealtimeUtilPair:(ComGoodowRealtimeUtilPair *)key
                             withGDRDisposable:(id<GDRDisposable>)event {
  id<JavaUtilList> handlers = [this$0_ getEventHandlersWithComGoodowRealtimeUtilPair:key withBOOL:NO];
  if (handlers == nil) {
    return;
  }
  for (int i = 0, len = [((id<JavaUtilList>) NIL_CHK(handlers)) size]; i < len; i++) {
    id<GDREventHandler> handler = ((id<GDREventHandler>) [((id<JavaUtilList>) NIL_CHK(handlers)) getWithInt:i]);
    if ([(id) handler conformsToProtocol: @protocol(GDREventHandler)]) {
      [((id<GDREventHandler>) handler) handleEventWithId:event];
    }
    else {
      [this$0_ __ocniFireEvent__WithId:handler withId:event];
    }
  }
}

- (void)produceObjectChangedEventWithNSString:(NSString *)id_
                            withGDRDisposable:(id<GDRDisposable>)event {
  if (![((id<JavaUtilMap>) NIL_CHK(evtsById_)) containsKeyWithId:id_]) {
    return;
  }
  GDRBaseModelEvent *evt = (GDRBaseModelEvent *) event;
  NSAssert(!((GDRBaseModelEvent *) NIL_CHK(evt)).bubbles, @"src/main/java/com/goodow/realtime/Document.java:127 condition failed: assert !evt.bubbles;");
  id<JavaUtilList> eventsPerId = ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(evtsById_)) getWithId:id_]);
  [((id<JavaUtilMap>) NIL_CHK(evtsById_)) removeWithId:id_];
  GDRObjectChangedEvent *objectChangedEvent = [[GDRObjectChangedEvent alloc] initWithGDRCollaborativeObject:((GDRBaseModelEvent *) NIL_CHK(evt)).target withNSString:((GDRBaseModelEvent *) NIL_CHK(evt)).sessionId withNSString:((GDRBaseModelEvent *) NIL_CHK(evt)).userId withGDRBaseModelEventArray:[((id<JavaUtilList>) NIL_CHK(eventsPerId)) toArrayWithNSObjectArray:[[IOSObjectArray alloc] initWithLength:0 type:[IOSClass classWithClass:[GDRBaseModelEvent class]]]]];
  id<JavaUtilSet> seen = [[JavaUtilHashSet alloc] init];
  [self bubblingToAncestorsWithNSString:id_ withGDRObjectChangedEvent:objectChangedEvent withJavaUtilSet:seen];
}

- (id)initWithGDRDocument:(GDRDocument *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  GDRDocument_$1 *typedCopy = (GDRDocument_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.evts = evts_;
  typedCopy.evtsById = evtsById_;
}

@end
