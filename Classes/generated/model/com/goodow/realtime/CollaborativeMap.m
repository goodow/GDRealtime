//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/CollaborativeMap.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/goodow/realtime/CollaborativeMap.h"
#import "com/goodow/realtime/CollaborativeObject.h"
#import "com/goodow/realtime/Document.h"
#import "com/goodow/realtime/EventHandler.h"
#import "com/goodow/realtime/EventType.h"
#import "com/goodow/realtime/Model.h"
#import "com/goodow/realtime/ValueChangedEvent.h"
#import "com/goodow/realtime/operation/CreateOperation.h"
#import "com/goodow/realtime/operation/Operation.h"
#import "com/goodow/realtime/operation/RealtimeOperation.h"
#import "com/goodow/realtime/operation/map/MapOp.h"
#import "com/goodow/realtime/operation/map/MapTarget.h"
#import "com/goodow/realtime/util/JsonSerializer.h"
#import "com/goodow/realtime/util/ModelFactory.h"
#import "elemental/json/Json.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonNull.h"
#import "elemental/json/JsonObject.h"
#import "elemental/json/JsonValue.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/StringBuilder.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/Set.h"

@implementation GDRCollaborativeMap

@synthesize snapshot = snapshot_;

- (id)initWithGDRModel:(GDRModel *)model {
  if ((self = [super initWithGDRModel:model])) {
    snapshot_ = [EMJson createObject];
  }
  return self;
}

- (void)addValueChangedListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self addEventListenerWithGDREventTypeEnum:[GDREventTypeEnum VALUE_CHANGED] withGDREventHandler:handler withBOOL:NO];
}

- (void)clear {
  [((GDRModel *) NIL_CHK(model_)) beginCompoundOperation:@"map.clear"];
  {
    IOSObjectArray *a__ = [self __keys];
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      NSString *key = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [self remove:key];
    }
  }
  [((GDRModel *) NIL_CHK(model_)) endCompoundOperation];
}

- (id)get:(NSString *)key {
  [self checkKeyWithNSString:key];
  return (id) [ComGoodowRealtimeUtilJsonSerializer deserializeObjectWithEMJsonValue:[((id<EMJsonObject>) NIL_CHK(snapshot_)) getArrayWithNSString:key] withJavaUtilMap:((GDRModel *) NIL_CHK(model_)).objects];
}

- (BOOL)has:(NSString *)key {
  [self checkKeyWithNSString:key];
  return [((id<EMJsonObject>) NIL_CHK(snapshot_)) hasKeyWithNSString:key];
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (IOSObjectArray *)__items {
  IOSObjectArray *items = [IOSObjectArray arrayWithObjects:(id[]){ [[IOSObjectArray alloc] initWithLength:2 type:[IOSClass classWithClass:[NSObject class]]] } count:[self size] type:[IOSClass classWithClass:[IOSObjectArray class]]];
  IOSObjectArray *keys = [self __keys];
  for (int i = 0, len = [self size]; i < len; i++) {
    IOSObjectArray *item = [[IOSObjectArray alloc] initWithLength:2 type:[IOSClass classWithClass:[NSObject class]]];
    [((IOSObjectArray *) NIL_CHK(item)) replaceObjectAtIndex:0 withObject:((NSString *) [((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:i])];
    [((IOSObjectArray *) NIL_CHK(item)) replaceObjectAtIndex:1 withObject:[self get:((NSString *) [((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:i])]];
    [((IOSObjectArray *) NIL_CHK(items)) replaceObjectAtIndex:i withObject:item];
  }
  return items;
}

- (IOSObjectArray *)__keys {
  return [((id<EMJsonObject>) NIL_CHK(snapshot_)) keys];
}

- (id)remove:(NSString *)key {
  [self checkKeyWithNSString:key];
  id oldValue = [self get:key];
  if (oldValue == nil) {
    return nil;
  }
  ComGoodowRealtimeOperationMapMapOp *op = [[ComGoodowRealtimeOperationMapMapOp alloc] init];
  [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(op)) updateWithNSString:key withEMJsonValue:[((id<EMJsonObject>) NIL_CHK(snapshot_)) getArrayWithNSString:key] withEMJsonValue:nil];
  [self consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  return oldValue;
}

- (void)removeValueChangedListenerWithGDREventHandler:(id<GDREventHandler>)handler {
  [self removeEventListenerWithGDREventTypeEnum:[GDREventTypeEnum VALUE_CHANGED] withGDREventHandler:handler withBOOL:NO];
}

- (id)set:(NSString *)key value:(id)value {
  [self checkKeyWithNSString:key];
  ComGoodowRealtimeOperationMapMapOp *op = [[ComGoodowRealtimeOperationMapMapOp alloc] init];
  id<EMJsonArray> serializedValue = [ComGoodowRealtimeUtilJsonSerializer serializeObjectWithId:value];
  if (serializedValue == nil && ![self has:key]) {
    return nil;
  }
  id oldObject = [self get:key];
  [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(op)) updateWithNSString:key withEMJsonValue:[((id<EMJsonObject>) NIL_CHK(snapshot_)) getArrayWithNSString:key] withEMJsonValue:serializedValue];
  [self consumeAndSubmitWithComGoodowRealtimeOperationOperation:op];
  return oldObject;
}

- (int)size {
  return (int) [[self __keys] count];
}

- (id<JavaUtilList>)__values {
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  IOSObjectArray *keys = [self __keys];
  for (int i = 0, len = [self size]; i < len; i++) {
    [((id<JavaUtilList>) NIL_CHK(values)) addWithId:[self get:((NSString *) [((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:i])]];
  }
  return values;
}

- (void)consumeWithComGoodowRealtimeOperationRealtimeOperation:(ComGoodowRealtimeOperationRealtimeOperation *)operation {
  [((id<ComGoodowRealtimeOperationOperation>) ((id<ComGoodowRealtimeOperationOperation>) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(operation)) getOp])) applyWithId:[[GDRCollaborativeMap_$1 alloc] initWithGDRCollaborativeMap:self withComGoodowRealtimeOperationRealtimeOperation:operation]];
}

- (IOSObjectArray *)toInitialization {
  ComGoodowRealtimeOperationMapMapOp *op = nil;
  if (![self isEmpty]) {
    op = [[ComGoodowRealtimeOperationMapMapOp alloc] init];
    {
      IOSObjectArray *a__ = [self __keys];
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        NSString *key = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        [((ComGoodowRealtimeOperationMapMapOp *) NIL_CHK(op)) updateWithNSString:key withEMJsonValue:nil withEMJsonValue:[((id<EMJsonObject>) NIL_CHK(snapshot_)) getWithNSString:key]];
      }
    }
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ [[ComGoodowRealtimeOperationCreateOperation alloc] initWithInt:ComGoodowRealtimeOperationCreateOperation_COLLABORATIVE_MAP withNSString:id__], op } count:2 type:[IOSClass classWithProtocol:@protocol(ComGoodowRealtimeOperationOperation)]];
}

- (void)toStringWithJavaUtilSet:(id<JavaUtilSet>)seen
      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([((id<JavaUtilSet>) NIL_CHK(seen)) containsWithId:id__]) {
    [[[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"<Map: "] appendWithNSString:id__] appendWithNSString:@">"];
    return;
  }
  [((id<JavaUtilSet>) NIL_CHK(seen)) addWithId:id__];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"{"];
  BOOL isFirst = YES;
  {
    IOSObjectArray *a__ = [self __keys];
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      NSString *key = ((NSString *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      if (!isFirst) {
        [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
      }
      isFirst = NO;
      [[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:key] appendWithNSString:@": "];
      id value = [self get:key];
      if ([value isKindOfClass:[GDRCollaborativeObject class]]) {
        GDRCollaborativeObject *obj = (GDRCollaborativeObject *) value;
        [((GDRCollaborativeObject *) NIL_CHK(obj)) toStringWithJavaUtilSet:seen withJavaLangStringBuilder:sb];
      }
      else {
        [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[NSString stringWithFormat:@"[JsonValue %@]", [((id<EMJsonValue>) [((id<EMJsonArray>) [((id<EMJsonObject>) NIL_CHK(snapshot_)) getArrayWithNSString:key]) getWithInt:1]) toJson]]];
      }
    }
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"}"];
}

- (void)checkKeyWithNSString:(NSString *)key {
  if (key == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Expected string for key, but was: null"];
  }
}

- (void)putAndFireEventWithNSString:(NSString *)key
                    withEMJsonValue:(id<EMJsonValue>)newValue
                       withNSString:(NSString *)sessionId
                       withNSString:(NSString *)userId {
  NSAssert(nil != newValue && [EMJson createNull] != newValue, @"src/main/java/com/goodow/realtime/CollaborativeMap.java:330 condition failed: assert null != newValue && Json.createNull() != newValue;");
  id<EMJsonArray> oldValue = [((id<EMJsonObject>) NIL_CHK(snapshot_)) getArrayWithNSString:key];
  id newObject = [ComGoodowRealtimeUtilJsonSerializer deserializeObjectWithEMJsonValue:newValue withJavaUtilMap:((GDRModel *) NIL_CHK(model_)).objects];
  GDRValueChangedEvent *event = [[GDRValueChangedEvent alloc] initWithGDRCollaborativeMap:self withNSString:sessionId withNSString:userId withNSString:key withId:newObject withId:[self get:key]];
  [((id<EMJsonObject>) NIL_CHK(snapshot_)) putWithNSString:key withEMJsonValue:newValue];
  [((GDRDocument *) NIL_CHK(model_.document)) addOrRemoveParentWithEMJsonValue:oldValue withNSString:id__ withBOOL:NO];
  [((GDRDocument *) NIL_CHK(model_.document)) addOrRemoveParentWithEMJsonValue:newValue withNSString:id__ withBOOL:YES];
  [self fireEventWithGDRBaseModelEvent:event];
}

- (void)removeAndFireEventWithNSString:(NSString *)key
                          withNSString:(NSString *)sessionId
                          withNSString:(NSString *)userId {
  NSAssert([self has:key], @"src/main/java/com/goodow/realtime/CollaborativeMap.java:342 condition failed: assert has(key);");
  id<EMJsonArray> oldValue = [((id<EMJsonObject>) NIL_CHK(snapshot_)) getArrayWithNSString:key];
  GDRValueChangedEvent *event = [[GDRValueChangedEvent alloc] initWithGDRCollaborativeMap:self withNSString:sessionId withNSString:userId withNSString:key withId:nil withId:[self get:key]];
  [((id<EMJsonObject>) NIL_CHK(snapshot_)) removeWithNSString:key];
  [((GDRDocument *) NIL_CHK(model_.document)) addOrRemoveParentWithEMJsonValue:oldValue withNSString:id__ withBOOL:NO];
  [self fireEventWithGDRBaseModelEvent:event];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  GDRCollaborativeMap *typedCopy = (GDRCollaborativeMap *) copy;
  typedCopy.snapshot = snapshot_;
}

@end
@implementation GDRCollaborativeMap_$1

@synthesize this$0 = this$0_;
@synthesize val$operation = val$operation_;

- (id<ComGoodowRealtimeOperationMapMapTarget>)updateWithNSString:(NSString *)key
                                                 withEMJsonValue:(id<EMJsonValue>)oldValue
                                                 withEMJsonValue:(id<EMJsonValue>)newValue {
  NSAssert(oldValue == nil || [ComGoodowRealtimeUtilJsonSerializer jsonEqualWithEMJsonValue:[((id<EMJsonObject>) NIL_CHK(this$0_.snapshot)) getWithNSString:key] withEMJsonValue:oldValue], @"src/main/java/com/goodow/realtime/CollaborativeMap.java:274 condition failed: assert oldValue == null || JsonSerializer.jsonEqual(snapshot.get(key), oldValue);");
  if (newValue == nil) {
    [this$0_ removeAndFireEventWithNSString:key withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(val$operation_)).sessionId withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(val$operation_)).userId];
  }
  else {
    [this$0_ putAndFireEventWithNSString:key withEMJsonValue:newValue withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(val$operation_)).sessionId withNSString:((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(val$operation_)).userId];
  }
  return nil;
}

- (id)initWithGDRCollaborativeMap:(GDRCollaborativeMap *)outer$
withComGoodowRealtimeOperationRealtimeOperation:(ComGoodowRealtimeOperationRealtimeOperation *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$operation_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  GDRCollaborativeMap_$1 *typedCopy = (GDRCollaborativeMap_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$operation = val$operation_;
}

@end
