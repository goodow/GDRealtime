//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/DocumentBridge.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/goodow/realtime/CollaborativeList.h"
#import "com/goodow/realtime/CollaborativeMap.h"
#import "com/goodow/realtime/CollaborativeObject.h"
#import "com/goodow/realtime/CollaborativeString.h"
#import "com/goodow/realtime/Document.h"
#import "com/goodow/realtime/DocumentBridge.h"
#import "com/goodow/realtime/DocumentSaveStateChangedEvent.h"
#import "com/goodow/realtime/EventType.h"
#import "com/goodow/realtime/IndexReference.h"
#import "com/goodow/realtime/Model.h"
#import "com/goodow/realtime/operation/CreateOperation.h"
#import "com/goodow/realtime/operation/Operation.h"
#import "com/goodow/realtime/operation/OperationSink.h"
#import "com/goodow/realtime/operation/RealtimeOperation.h"
#import "com/goodow/realtime/operation/RealtimeTransformer.h"
#import "com/goodow/realtime/operation/basic/NoOp.h"
#import "elemental/json/JsonArray.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/StringBuilder.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/Set.h"

@implementation GDRDocumentBridge

static id<ComGoodowRealtimeOperationOperationSink> GDRDocumentBridge_VOID_;

@synthesize sessionId = sessionId_;
@synthesize userId = userId_;
@synthesize outputSink = outputSink_;
@synthesize document = document_;
@synthesize model = model_;
@synthesize transformer = transformer_;

+ (id<ComGoodowRealtimeOperationOperationSink>)VOID {
  return GDRDocumentBridge_VOID_;
}

- (id)init {
  if ((self = [self initGDRDocumentBridgeWithEMJsonArray:nil])) {
    [self createRoot];
  }
  return self;
}

- (id)initGDRDocumentBridgeWithEMJsonArray:(id<EMJsonArray>)snapshot {
  if ((self = [super init])) {
    outputSink_ = GDRDocumentBridge_VOID_;
    transformer_ = [[ComGoodowRealtimeOperationRealtimeTransformer alloc] init];
    document_ = [[GDRDocument alloc] initWithGDRDocumentBridge:self withGDRDisposable:nil withGDRError_ErrorHandler:nil];
    model_ = [((GDRDocument *) NIL_CHK(document_)) getModel];
    if (snapshot != nil) {
      for (int i = 0, len = [snapshot length]; i < len; i++) {
        id<EMJsonArray> serializedOp = [snapshot getArrayWithInt:i];
        id<ComGoodowRealtimeOperationOperation> op = [((ComGoodowRealtimeOperationRealtimeTransformer *) NIL_CHK(transformer_)) createOpWithEMJsonArray:serializedOp];
        ComGoodowRealtimeOperationRealtimeOperation *operation = [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:op withNSString:nil withNSString:nil];
        [self consumeWithId:operation];
      }
    }
  }
  return self;
}

- (id)initWithEMJsonArray:(id<EMJsonArray>)snapshot {
  return [self initGDRDocumentBridgeWithEMJsonArray:snapshot];
}

- (void)consumeWithId:(ComGoodowRealtimeOperationRealtimeOperation *)operation {
  int type = [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(operation)) getType];
  if (type == ComGoodowRealtimeOperationBasicNoOp_TYPE) {
    return;
  }
  if (type == ComGoodowRealtimeOperationCreateOperation_TYPE) {
    ComGoodowRealtimeOperationCreateOperation *op = (ComGoodowRealtimeOperationCreateOperation *) ((id<ComGoodowRealtimeOperationOperation>) [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(operation)) getOp]);
    GDRCollaborativeObject *obj;
    switch (((ComGoodowRealtimeOperationCreateOperation *) NIL_CHK(op)).type) {
      case ComGoodowRealtimeOperationCreateOperation_COLLABORATIVE_MAP:
      obj = [[GDRCollaborativeMap alloc] initWithGDRModel:model_];
      break;
      case ComGoodowRealtimeOperationCreateOperation_COLLABORATIVE_LIST:
      obj = [[GDRCollaborativeList alloc] initWithGDRModel:model_];
      break;
      case ComGoodowRealtimeOperationCreateOperation_COLLABORATIVE_STRING:
      obj = [[GDRCollaborativeString alloc] initWithGDRModel:model_];
      break;
      case ComGoodowRealtimeOperationCreateOperation_INDEX_REFERENCE:
      obj = [[GDRIndexReference alloc] initWithGDRModel:model_];
      break;
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Shouldn't reach here!"];
    }
    ((GDRCollaborativeObject *) NIL_CHK(obj)).id_ = [((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(operation)) getId];
    [((id<JavaUtilMap>) NIL_CHK(model_.objects)) putWithId:((GDRCollaborativeObject *) NIL_CHK(obj)).id_ withId:obj];
    return;
  }
  [[((GDRModel *) NIL_CHK(model_)) getObjectWithNSString:[((ComGoodowRealtimeOperationRealtimeOperation *) NIL_CHK(operation)) getId]] consumeWithComGoodowRealtimeOperationRealtimeOperation:operation];
}

- (void)createRoot {
  [((GDRModel *) NIL_CHK(model_)) createRoot];
}

- (void)fireDocumentSaveStateChangedEventWithGDRDocumentSaveStateChangedEvent:(GDRDocumentSaveStateChangedEvent *)event {
  [((GDRDocument *) NIL_CHK(document_)) scheduleEventWithNSString:[GDRDocument EVENT_HANDLER_KEY] withGDREventTypeEnum:[GDREventTypeEnum DOCUMENT_SAVE_STATE_CHANGED] withGDRDisposable:event];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:@"["];
  BOOL isFirst = YES;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(model_.objects)) keySet]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      NSString *id_ = ((NSString *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      GDRCollaborativeObject *collaborativeObject = [((GDRModel *) NIL_CHK(model_)) getObjectWithNSString:id_];
      IOSObjectArray *initializeOp = [((GDRCollaborativeObject *) NIL_CHK(collaborativeObject)) toInitialization];
      {
        IOSObjectArray *a__ = initializeOp;
        int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
        for (int i__ = 0; i__ < n__; i__++) {
          id<ComGoodowRealtimeOperationOperation> op = ((id<ComGoodowRealtimeOperationOperation>) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
          if (op == nil) {
            continue;
          }
          [((id<ComGoodowRealtimeOperationOperation>) NIL_CHK(op)) setIdWithNSString:id_];
          if (!isFirst) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@","];
          }
          isFirst = NO;
          [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[((NSObject *) [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:op]) description]];
        }
      }
    }
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"]"];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

- (void)consumeAndSubmitWithComGoodowRealtimeOperationOperation:(id<ComGoodowRealtimeOperationOperation>)op {
  ComGoodowRealtimeOperationRealtimeOperation *operation = [[ComGoodowRealtimeOperationRealtimeOperation alloc] initWithComGoodowRealtimeOperationOperation:op withNSString:userId_ withNSString:sessionId_];
  [self consumeWithId:operation];
  [((id<ComGoodowRealtimeOperationOperationSink>) NIL_CHK(outputSink_)) consumeWithId:operation];
}

- (BOOL)isLocalSessionWithNSString:(NSString *)sessionId {
  return sessionId != nil && [NIL_CHK(sessionId) isEqual:self.sessionId];
}

+ (void)initialize {
  if (self == [GDRDocumentBridge class]) {
    GDRDocumentBridge_VOID_ = [[GDRDocumentBridge_$1 alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  GDRDocumentBridge *typedCopy = (GDRDocumentBridge *) copy;
  typedCopy.sessionId = sessionId_;
  typedCopy.userId = userId_;
  typedCopy.outputSink = outputSink_;
  typedCopy.document = document_;
  typedCopy.model = model_;
  typedCopy.transformer = transformer_;
}

@end
@implementation GDRDocumentBridge_$1

- (void)consumeWithId:(ComGoodowRealtimeOperationRealtimeOperation *)op {
}

- (NSString *)description {
  return (NSString *) [super description];
}

- (id)init {
  return [super init];
}

@end
