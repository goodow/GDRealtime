//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/goodow/realtime/util/JsonSerializer.java
//
//  Created by retechretech on 13-5-25.
//

#import "IOSClass.h"
#import "com/goodow/realtime/CollaborativeObject.h"
#import "com/goodow/realtime/util/JsonSerializer.h"
#import "elemental/json/Json.h"
#import "elemental/json/JsonArray.h"
#import "elemental/json/JsonBoolean.h"
#import "elemental/json/JsonNumber.h"
#import "elemental/json/JsonString.h"
#import "elemental/json/JsonType.h"
#import "elemental/json/JsonValue.h"
#import "java/lang/Boolean.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Double.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/UnsupportedOperationException.h"
#import "java/util/Map.h"

@implementation ComGoodowRealtimeUtilJsonSerializer

+ (int)REFERENCE_TYPE {
  return ComGoodowRealtimeUtilJsonSerializer_REFERENCE_TYPE;
}

+ (BOOL)isNullWithEMJsonValue:(id<EMJsonValue>)json {
  return json == nil || [EMJsonTypeEnum NULL_] == [((id<EMJsonValue>) NIL_CHK(json)) getType];
}

+ (BOOL)jsonEqualWithEMJsonValue:(id<EMJsonValue>)a
                 withEMJsonValue:(id<EMJsonValue>)b {
  if ([ComGoodowRealtimeUtilJsonSerializer isNullWithEMJsonValue:a]) {
    return [ComGoodowRealtimeUtilJsonSerializer isNullWithEMJsonValue:b];
  }
  else {
    return [ComGoodowRealtimeUtilJsonSerializer isNullWithEMJsonValue:b] ? NO : [[((id<EMJsonValue>) NIL_CHK(a)) toJson] isEqual:[((id<EMJsonValue>) NIL_CHK(b)) toJson]];
  }
}

+ (id)deserializeObjectWithEMJsonValue:(id<EMJsonValue>)arrayOrNull
                       withJavaUtilMap:(id<JavaUtilMap>)objects {
  if ([ComGoodowRealtimeUtilJsonSerializer isNullWithEMJsonValue:arrayOrNull]) {
    return nil;
  }
  id<EMJsonArray> array = (id<EMJsonArray>) arrayOrNull;
  switch ((int) [((id<EMJsonArray>) NIL_CHK(array)) getNumberWithInt:0]) {
    case ComGoodowRealtimeUtilJsonSerializer_VALUE_TYPE:
    switch ([[((id<EMJsonValue>) [((id<EMJsonArray>) NIL_CHK(array)) getWithInt:1]) getType] ordinal]) {
      case EMJsonType_BOOLEAN:
      return [JavaLangBoolean valueOfWithBOOL:[((id<EMJsonArray>) NIL_CHK(array)) getBooleanWithInt:1]];
      case EMJsonType_NUMBER:
      return [JavaLangDouble valueOfWithDouble:[((id<EMJsonArray>) NIL_CHK(array)) getNumberWithInt:1]];
      case EMJsonType_STRING:
      return [((id<EMJsonArray>) NIL_CHK(array)) getStringWithInt:1];
      case EMJsonType_OBJECT:
      case EMJsonType_ARRAY:
      return [((id<EMJsonArray>) NIL_CHK(array)) getWithInt:1];
      case EMJsonType_NULL:
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Should not reach here!"];
    }
    case ComGoodowRealtimeUtilJsonSerializer_REFERENCE_TYPE:
    return ((GDRCollaborativeObject *) [((id<JavaUtilMap>) NIL_CHK(objects)) getWithId:[((id<EMJsonArray>) NIL_CHK(array)) getStringWithInt:1]]);
    default:
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
}

+ (id<EMJsonArray>)serializeObjectWithId:(id)obj {
  if (obj == nil) {
    return nil;
  }
  id<EMJsonArray> array = [EMJson createArray];
  int type = ComGoodowRealtimeUtilJsonSerializer_VALUE_TYPE;
  id<EMJsonValue> val;
  if ([obj isKindOfClass:[NSString class]]) {
    val = [EMJson createWithNSString:(NSString *) obj];
  }
  else if ([obj isKindOfClass:[NSNumber class]]) {
    val = [EMJson createWithDouble:[((NSNumber *) obj) doubleValue]];
  }
  else if ([obj isKindOfClass:[JavaLangBoolean class]]) {
    val = [EMJson createWithBOOL:[(JavaLangBoolean *) obj booleanValue]];
  }
  else if ([obj conformsToProtocol: @protocol(EMJsonValue)]) {
    val = (id<EMJsonValue>) obj;
    if ([EMJsonTypeEnum NULL_] == [((id<EMJsonValue>) NIL_CHK(val)) getType]) {
      return nil;
    }
  }
  else if ([obj isKindOfClass:[GDRCollaborativeObject class]]) {
    type = ComGoodowRealtimeUtilJsonSerializer_REFERENCE_TYPE;
    val = [EMJson createWithNSString:[((GDRCollaborativeObject *) obj) getId]];
  }
  else {
    @throw [[JavaLangClassCastException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported class type: %@", [[NIL_CHK(obj) getClass] getName]]];
  }
  [((id<EMJsonArray>) NIL_CHK(array)) setWithInt:0 withDouble:type];
  [((id<EMJsonArray>) NIL_CHK(array)) setWithInt:1 withEMJsonValue:val];
  return array;
}

- (id)init {
  return [super init];
}

@end
